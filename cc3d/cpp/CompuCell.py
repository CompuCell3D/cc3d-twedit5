# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CompuCell
else:
    import _CompuCell

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_SwigPyIterator

    def value(self):
        return _CompuCell.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CompuCell.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CompuCell.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CompuCell.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CompuCell.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CompuCell.SwigPyIterator_copy(self)

    def next(self):
        return _CompuCell.SwigPyIterator_next(self)

    def __next__(self):
        return _CompuCell.SwigPyIterator___next__(self)

    def previous(self):
        return _CompuCell.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CompuCell.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CompuCell.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CompuCell.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CompuCell.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CompuCell.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CompuCell.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CompuCell.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CompuCell:
_CompuCell.SwigPyIterator_swigregister(SwigPyIterator)
class CC3DException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CC3DException_swiginit(self, _CompuCell.new_CC3DException(*args))

    def what(self):
        return _CompuCell.CC3DException_what(self)
    __swig_destroy__ = _CompuCell.delete_CC3DException

    def getMessage(self):
        return _CompuCell.CC3DException_getMessage(self)

    def getFilename(self):
        return _CompuCell.CC3DException_getFilename(self)

# Register CC3DException in _CompuCell:
_CompuCell.CC3DException_swigregister(CC3DException)
class Message(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PRIO_FATAL = _CompuCell.Message_PRIO_FATAL
    PRIO_CRITICAL = _CompuCell.Message_PRIO_CRITICAL
    PRIO_ERROR = _CompuCell.Message_PRIO_ERROR
    PRIO_WARNING = _CompuCell.Message_PRIO_WARNING
    PRIO_NOTICE = _CompuCell.Message_PRIO_NOTICE
    PRIO_INFORMATION = _CompuCell.Message_PRIO_INFORMATION
    PRIO_DEBUG = _CompuCell.Message_PRIO_DEBUG
    PRIO_TRACE = _CompuCell.Message_PRIO_TRACE

    def __init__(self, *args):
        _CompuCell.Message_swiginit(self, _CompuCell.new_Message(*args))
    __swig_destroy__ = _CompuCell.delete_Message

# Register Message in _CompuCell:
_CompuCell.Message_swigregister(Message)
class LoggingBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, level, func, file, line):
        _CompuCell.LoggingBuffer_swiginit(self, _CompuCell.new_LoggingBuffer(level, func, file, line))
    __swig_destroy__ = _CompuCell.delete_LoggingBuffer

    def stream(self):
        return _CompuCell.LoggingBuffer_stream(self)

# Register LoggingBuffer in _CompuCell:
_CompuCell.LoggingBuffer_swigregister(LoggingBuffer)
LOG_CURRENT = _CompuCell.LOG_CURRENT
LOG_FATAL = _CompuCell.LOG_FATAL
LOG_CRITICAL = _CompuCell.LOG_CRITICAL
LOG_ERROR = _CompuCell.LOG_ERROR
LOG_WARNING = _CompuCell.LOG_WARNING
LOG_NOTICE = _CompuCell.LOG_NOTICE
LOG_INFORMATION = _CompuCell.LOG_INFORMATION
LOG_DEBUG = _CompuCell.LOG_DEBUG
LOG_TRACE = _CompuCell.LOG_TRACE
LOG_OUTPUTSTREAM_CHANGED = _CompuCell.LOG_OUTPUTSTREAM_CHANGED
LOG_LEVEL_CHANGED = _CompuCell.LOG_LEVEL_CHANGED
LOG_CALLBACK_SET = _CompuCell.LOG_CALLBACK_SET
class CC3DLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def get():
        return _CompuCell.CC3DLogger_get()

    @staticmethod
    def destroy():
        return _CompuCell.CC3DLogger_destroy()

    def setLevel(self, *args):
        return _CompuCell.CC3DLogger_setLevel(self, *args)

    def getLevel(self):
        return _CompuCell.CC3DLogger_getLevel(self)

    def disableLogging(self):
        return _CompuCell.CC3DLogger_disableLogging(self)

    def disableConsoleLogging(self):
        return _CompuCell.CC3DLogger_disableConsoleLogging(self)

    def enableConsoleLogging(self, *args):
        return _CompuCell.CC3DLogger_enableConsoleLogging(self, *args)

    def enableFileLogging(self, *args):
        return _CompuCell.CC3DLogger_enableFileLogging(self, *args)

    def disableFileLogging(self):
        return _CompuCell.CC3DLogger_disableFileLogging(self)

    def getCurrentLevelAsString(self):
        return _CompuCell.CC3DLogger_getCurrentLevelAsString(self)

    def getFileName(self):
        return _CompuCell.CC3DLogger_getFileName(self)

    @staticmethod
    def levelToString(level):
        return _CompuCell.CC3DLogger_levelToString(level)

    @staticmethod
    def stringToLevel(str):
        return _CompuCell.CC3DLogger_stringToLevel(str)

    def log(self, level, msg):
        return _CompuCell.CC3DLogger_log(self, level, msg)

    def setConsoleStream(self, os):
        return _CompuCell.CC3DLogger_setConsoleStream(self, os)

    def getConsoleStream(self):
        return _CompuCell.CC3DLogger_getConsoleStream(self)

    def getFileStream(self):
        return _CompuCell.CC3DLogger_getFileStream(self)

    def setCallback(self, arg2):
        return _CompuCell.CC3DLogger_setCallback(self, arg2)
    __swig_destroy__ = _CompuCell.delete_CC3DLogger

# Register CC3DLogger in _CompuCell:
_CompuCell.CC3DLogger_swigregister(CC3DLogger)
class Point3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CompuCell.Point3D_x_get, _CompuCell.Point3D_x_set)
    y = property(_CompuCell.Point3D_y_get, _CompuCell.Point3D_y_set)
    z = property(_CompuCell.Point3D_z_get, _CompuCell.Point3D_z_set)

    def __init__(self, *args):
        _CompuCell.Point3D_swiginit(self, _CompuCell.new_Point3D(*args))

    def __iadd__(self, pt):
        return _CompuCell.Point3D___iadd__(self, pt)

    def __isub__(self, pt):
        return _CompuCell.Point3D___isub__(self, pt)

    def __eq__(self, pt):
        return _CompuCell.Point3D___eq__(self, pt)

    def __ne__(self, pt):
        return _CompuCell.Point3D___ne__(self, pt)

    def __lt__(self, _rhs):
        return _CompuCell.Point3D___lt__(self, _rhs)

    def __str__(self):
        return _CompuCell.Point3D___str__(self)

    def __getstate__(self):
        return (self.x,self.y,self.z)

    def __setstate__(self,tup):
        print( 'tuple=',tup)
        self.this = _CompuCell.new_Point3D(tup[0],tup[1],tup[2])
        self.thisown=1

    def to_tuple(self):
        return self.x, self.y, self.z


    __swig_destroy__ = _CompuCell.delete_Point3D

# Register Point3D in _CompuCell:
_CompuCell.Point3D_swigregister(Point3D)
class Dim3D(Point3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Dim3D_swiginit(self, _CompuCell.new_Dim3D(*args))

    def __iadd__(self, pt):
        return _CompuCell.Dim3D___iadd__(self, pt)

    def __isub__(self, pt):
        return _CompuCell.Dim3D___isub__(self, pt)

    def __eq__(self, pt):
        return _CompuCell.Dim3D___eq__(self, pt)

    def __ne__(self, pt):
        return _CompuCell.Dim3D___ne__(self, pt)

    def __lt__(self, _rhs):
        return _CompuCell.Dim3D___lt__(self, _rhs)

    def __str__(self):
        return _CompuCell.Dim3D___str__(self)

    def to_tuple(self):
        return self.x, self.y, self.z

    def __reduce__(self):
        return Dim3D, (self.x, self.y, self.z)

    __swig_destroy__ = _CompuCell.delete_Dim3D

# Register Dim3D in _CompuCell:
_CompuCell.Dim3D_swigregister(Dim3D)

def __sub__(*args):
    return _CompuCell.__sub__(*args)

def __add__(*args):
    return _CompuCell.__add__(*args)
class Coordinates3DDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Coordinates3DDouble_swiginit(self, _CompuCell.new_Coordinates3DDouble(*args))

    def X(self):
        return _CompuCell.Coordinates3DDouble_X(self)

    def Y(self):
        return _CompuCell.Coordinates3DDouble_Y(self)

    def Z(self):
        return _CompuCell.Coordinates3DDouble_Z(self)

    def XRef(self):
        return _CompuCell.Coordinates3DDouble_XRef(self)

    def YRef(self):
        return _CompuCell.Coordinates3DDouble_YRef(self)

    def ZRef(self):
        return _CompuCell.Coordinates3DDouble_ZRef(self)

    def __isub__(self, a):
        return _CompuCell.Coordinates3DDouble___isub__(self, a)

    def __iadd__(self, a):
        return _CompuCell.Coordinates3DDouble___iadd__(self, a)
    x = property(_CompuCell.Coordinates3DDouble_x_get, _CompuCell.Coordinates3DDouble_x_set)
    y = property(_CompuCell.Coordinates3DDouble_y_get, _CompuCell.Coordinates3DDouble_y_set)
    z = property(_CompuCell.Coordinates3DDouble_z_get, _CompuCell.Coordinates3DDouble_z_set)

    def __str__(self):
        return _CompuCell.Coordinates3DDouble___str__(self)
    __swig_destroy__ = _CompuCell.delete_Coordinates3DDouble

# Register Coordinates3DDouble in _CompuCell:
_CompuCell.Coordinates3DDouble_swigregister(Coordinates3DDouble)
class Neighbor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pt = property(_CompuCell.Neighbor_pt_get, _CompuCell.Neighbor_pt_set)
    distance = property(_CompuCell.Neighbor_distance_get, _CompuCell.Neighbor_distance_set)
    ptTrans = property(_CompuCell.Neighbor_ptTrans_get, _CompuCell.Neighbor_ptTrans_set)

    def __init__(self, *args):
        _CompuCell.Neighbor_swiginit(self, _CompuCell.new_Neighbor(*args))
    __swig_destroy__ = _CompuCell.delete_Neighbor

# Register Neighbor in _CompuCell:
_CompuCell.Neighbor_swigregister(Neighbor)

def __lshift__(*args):
    return _CompuCell.__lshift__(*args)
class BoundaryStrategy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getLatticeSpanVector(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeSpanVector(self, *args)

    def getLatticeSizeVector(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeSizeVector(self, *args)

    def getLatticeType(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeType(self, *args)

    def getMaxDistance(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxDistance(self, *args)

    def getBoundaryConditionIndicator(self, *args):
        return _CompuCell.BoundaryStrategy_getBoundaryConditionIndicator(self, *args)
    __swig_destroy__ = _CompuCell.delete_BoundaryStrategy

    @staticmethod
    def instantiate(*args):
        return _CompuCell.BoundaryStrategy_instantiate(*args)

    @staticmethod
    def getInstance(*args):
        return _CompuCell.BoundaryStrategy_getInstance(*args)

    @staticmethod
    def destroy(*args):
        return _CompuCell.BoundaryStrategy_destroy(*args)

    def calculateDistance(self, *args):
        return _CompuCell.BoundaryStrategy_calculateDistance(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.BoundaryStrategy_getNeighbor(self, *args)

    def HexCoord(self, *args):
        return _CompuCell.BoundaryStrategy_HexCoord(self, *args)

    def Hex2Cartesian(self, *args):
        return _CompuCell.BoundaryStrategy_Hex2Cartesian(self, *args)

    def getNeighborCustomDim(self, *args):
        return _CompuCell.BoundaryStrategy_getNeighborCustomDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.BoundaryStrategy_isValid(self, *args)

    def isValidCustomDim(self, *args):
        return _CompuCell.BoundaryStrategy_isValidCustomDim(self, *args)

    def prepareNeighborListsSquare(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborListsSquare(self, *args)

    def generateLatticeMultiplicativeFactors(self, *args):
        return _CompuCell.BoundaryStrategy_generateLatticeMultiplicativeFactors(self, *args)

    def getLatticeMultiplicativeFactors(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeMultiplicativeFactors(self, *args)

    def prepareNeighborListsHex(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborListsHex(self, *args)

    def prepareNeighborLists(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborLists(self, *args)

    def getMaxNeighborIndexFromNeighborOrderNoGen(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborIndexFromNeighborOrderNoGen(self, *args)

    def getMaxNeighborOrder(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborOrder(self, *args)

    def prepareNeighborListsBasedOnNeighborOrder(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborListsBasedOnNeighborOrder(self, *args)

    def getMaxNeighborIndexFromNeighborOrder(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborIndexFromNeighborOrder(self, *args)

    def getMaxNeighborIndexFromDepth(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborIndexFromDepth(self, *args)

    def getNeighborDirect(self, *args):
        return _CompuCell.BoundaryStrategy_getNeighborDirect(self, *args)

    def calculatePointCoordinates(self, *args):
        return _CompuCell.BoundaryStrategy_calculatePointCoordinates(self, *args)

    def setDim(self, *args):
        return _CompuCell.BoundaryStrategy_setDim(self, *args)

    def getOffsetVec(self, *args):
        return _CompuCell.BoundaryStrategy_getOffsetVec(self, *args)

    def getHexOffsetArray(self, *args):
        return _CompuCell.BoundaryStrategy_getHexOffsetArray(self, *args)

    def getMaxOffset(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxOffset(self, *args)

# Register BoundaryStrategy in _CompuCell:
_CompuCell.BoundaryStrategy_swigregister(BoundaryStrategy)
class CellG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CellG_swiginit(self, _CompuCell.new_CellG(*args))
    volume = property(_CompuCell.CellG_volume_get, _CompuCell.CellG_volume_set)
    targetVolume = property(_CompuCell.CellG_targetVolume_get, _CompuCell.CellG_targetVolume_set)
    lambdaVolume = property(_CompuCell.CellG_lambdaVolume_get, _CompuCell.CellG_lambdaVolume_set)
    surface = property(_CompuCell.CellG_surface_get, _CompuCell.CellG_surface_set)
    targetSurface = property(_CompuCell.CellG_targetSurface_get, _CompuCell.CellG_targetSurface_set)
    angle = property(_CompuCell.CellG_angle_get, _CompuCell.CellG_angle_set)
    lambdaSurface = property(_CompuCell.CellG_lambdaSurface_get, _CompuCell.CellG_lambdaSurface_set)
    clusterSurface = property(_CompuCell.CellG_clusterSurface_get, _CompuCell.CellG_clusterSurface_set)
    targetClusterSurface = property(_CompuCell.CellG_targetClusterSurface_get, _CompuCell.CellG_targetClusterSurface_set)
    lambdaClusterSurface = property(_CompuCell.CellG_lambdaClusterSurface_get, _CompuCell.CellG_lambdaClusterSurface_set)
    type = property(_CompuCell.CellG_type_get, _CompuCell.CellG_type_set)
    subtype = property(_CompuCell.CellG_subtype_get, _CompuCell.CellG_subtype_set)
    xCM = property(_CompuCell.CellG_xCM_get, _CompuCell.CellG_xCM_set)
    yCM = property(_CompuCell.CellG_yCM_get, _CompuCell.CellG_yCM_set)
    zCM = property(_CompuCell.CellG_zCM_get, _CompuCell.CellG_zCM_set)
    xCOM = property(_CompuCell.CellG_xCOM_get, _CompuCell.CellG_xCOM_set)
    yCOM = property(_CompuCell.CellG_yCOM_get, _CompuCell.CellG_yCOM_set)
    zCOM = property(_CompuCell.CellG_zCOM_get, _CompuCell.CellG_zCOM_set)
    xCOMPrev = property(_CompuCell.CellG_xCOMPrev_get, _CompuCell.CellG_xCOMPrev_set)
    yCOMPrev = property(_CompuCell.CellG_yCOMPrev_get, _CompuCell.CellG_yCOMPrev_set)
    zCOMPrev = property(_CompuCell.CellG_zCOMPrev_get, _CompuCell.CellG_zCOMPrev_set)
    iXX = property(_CompuCell.CellG_iXX_get, _CompuCell.CellG_iXX_set)
    iXY = property(_CompuCell.CellG_iXY_get, _CompuCell.CellG_iXY_set)
    iXZ = property(_CompuCell.CellG_iXZ_get, _CompuCell.CellG_iXZ_set)
    iYY = property(_CompuCell.CellG_iYY_get, _CompuCell.CellG_iYY_set)
    iYZ = property(_CompuCell.CellG_iYZ_get, _CompuCell.CellG_iYZ_set)
    iZZ = property(_CompuCell.CellG_iZZ_get, _CompuCell.CellG_iZZ_set)
    lX = property(_CompuCell.CellG_lX_get, _CompuCell.CellG_lX_set)
    lY = property(_CompuCell.CellG_lY_get, _CompuCell.CellG_lY_set)
    lZ = property(_CompuCell.CellG_lZ_get, _CompuCell.CellG_lZ_set)
    ecc = property(_CompuCell.CellG_ecc_get, _CompuCell.CellG_ecc_set)
    lambdaVecX = property(_CompuCell.CellG_lambdaVecX_get, _CompuCell.CellG_lambdaVecX_set)
    lambdaVecY = property(_CompuCell.CellG_lambdaVecY_get, _CompuCell.CellG_lambdaVecY_set)
    lambdaVecZ = property(_CompuCell.CellG_lambdaVecZ_get, _CompuCell.CellG_lambdaVecZ_set)
    flag = property(_CompuCell.CellG_flag_get, _CompuCell.CellG_flag_set)
    averageConcentration = property(_CompuCell.CellG_averageConcentration_get, _CompuCell.CellG_averageConcentration_set)
    id = property(_CompuCell.CellG_id_get, _CompuCell.CellG_id_set)
    clusterId = property(_CompuCell.CellG_clusterId_get, _CompuCell.CellG_clusterId_set)
    fluctAmpl = property(_CompuCell.CellG_fluctAmpl_get, _CompuCell.CellG_fluctAmpl_set)
    lambdaMotility = property(_CompuCell.CellG_lambdaMotility_get, _CompuCell.CellG_lambdaMotility_set)
    biasVecX = property(_CompuCell.CellG_biasVecX_get, _CompuCell.CellG_biasVecX_set)
    biasVecY = property(_CompuCell.CellG_biasVecY_get, _CompuCell.CellG_biasVecY_set)
    biasVecZ = property(_CompuCell.CellG_biasVecZ_get, _CompuCell.CellG_biasVecZ_set)
    connectivityOn = property(_CompuCell.CellG_connectivityOn_get, _CompuCell.CellG_connectivityOn_set)
    extraAttribPtr = property(_CompuCell.CellG_extraAttribPtr_get, _CompuCell.CellG_extraAttribPtr_set)
    pyAttrib = property(_CompuCell.CellG_pyAttrib_get, _CompuCell.CellG_pyAttrib_set)

    def getPressure(self, *args):
        return _CompuCell.CellG_getPressure(self, *args)

    def getSurfaceTension(self, *args):
        return _CompuCell.CellG_getSurfaceTension(self, *args)

    def getClusterSurfaceTension(self, *args):
        return _CompuCell.CellG_getClusterSurfaceTension(self, *args)
    pressure = property(_CompuCell.CellG_pressure_get, _CompuCell.CellG_pressure_set)
    surfaceTension = property(_CompuCell.CellG_surfaceTension_get, _CompuCell.CellG_surfaceTension_set)
    clusterSurfaceTension = property(_CompuCell.CellG_clusterSurfaceTension_get, _CompuCell.CellG_clusterSurfaceTension_set)

    def set_volume(self,volume):
        raise AttributeError(f"ASSIGNMENT cell. volume={volume} is illegal. "
                              "volume is read only variable")
    volume = property(_CompuCell.CellG_volume_get, set_volume)


    def set_surface(self,surface):
        raise AttributeError(f"ASSIGNMENT cell. surface={surface} is illegal. "
                              "surface is read only variable")
    surface = property(_CompuCell.CellG_surface_get, set_surface)


    def set_xCM(self,xCM):
        raise AttributeError(f"ASSIGNMENT cell. xCM={xCM} is illegal. "
                              "xCM is read only variable")
    xCM = property(_CompuCell.CellG_xCM_get, set_xCM)


    def set_yCM(self,yCM):
        raise AttributeError(f"ASSIGNMENT cell. yCM={yCM} is illegal. "
                              "yCM is read only variable")
    yCM = property(_CompuCell.CellG_yCM_get, set_yCM)


    def set_zCM(self,zCM):
        raise AttributeError(f"ASSIGNMENT cell. zCM={zCM} is illegal. "
                              "zCM is read only variable")
    zCM = property(_CompuCell.CellG_zCM_get, set_zCM)


    def set_xCOM(self,xCOM):
        raise AttributeError(f"ASSIGNMENT cell. xCOM={xCOM} is illegal. "
                              "xCOM is read only variable")
    xCOM = property(_CompuCell.CellG_xCOM_get, set_xCOM)


    def set_yCOM(self,yCOM):
        raise AttributeError(f"ASSIGNMENT cell. yCOM={yCOM} is illegal. "
                              "yCOM is read only variable")
    yCOM = property(_CompuCell.CellG_yCOM_get, set_yCOM)


    def set_zCOM(self,zCOM):
        raise AttributeError(f"ASSIGNMENT cell. zCOM={zCOM} is illegal. "
                              "zCOM is read only variable")
    zCOM = property(_CompuCell.CellG_zCOM_get, set_zCOM)


    def set_xCOMPrev(self,xCOMPrev):
        raise AttributeError(f"ASSIGNMENT cell. xCOMPrev={xCOMPrev} is illegal. "
                              "xCOMPrev is read only variable")
    xCOMPrev = property(_CompuCell.CellG_xCOMPrev_get, set_xCOMPrev)


    def set_yCOMPrev(self,yCOMPrev):
        raise AttributeError(f"ASSIGNMENT cell. yCOMPrev={yCOMPrev} is illegal. "
                              "yCOMPrev is read only variable")
    yCOMPrev = property(_CompuCell.CellG_yCOMPrev_get, set_yCOMPrev)


    def set_zCOMPrev(self,zCOMPrev):
        raise AttributeError(f"ASSIGNMENT cell. zCOMPrev={zCOMPrev} is illegal. "
                              "zCOMPrev is read only variable")
    zCOMPrev = property(_CompuCell.CellG_zCOMPrev_get, set_zCOMPrev)


    def set_iXX(self,iXX):
        raise AttributeError(f"ASSIGNMENT cell. iXX={iXX} is illegal. "
                              "iXX is read only variable")
    iXX = property(_CompuCell.CellG_iXX_get, set_iXX)


    def set_iXY(self,iXY):
        raise AttributeError(f"ASSIGNMENT cell. iXY={iXY} is illegal. "
                              "iXY is read only variable")
    iXY = property(_CompuCell.CellG_iXY_get, set_iXY)


    def set_iXZ(self,iXZ):
        raise AttributeError(f"ASSIGNMENT cell. iXZ={iXZ} is illegal. "
                              "iXZ is read only variable")
    iXZ = property(_CompuCell.CellG_iXZ_get, set_iXZ)


    def set_iYY(self,iYY):
        raise AttributeError(f"ASSIGNMENT cell. iYY={iYY} is illegal. "
                              "iYY is read only variable")
    iYY = property(_CompuCell.CellG_iYY_get, set_iYY)


    def set_iYZ(self,iYZ):
        raise AttributeError(f"ASSIGNMENT cell. iYZ={iYZ} is illegal. "
                              "iYZ is read only variable")
    iYZ = property(_CompuCell.CellG_iYZ_get, set_iYZ)


    def set_iZZ(self,iZZ):
        raise AttributeError(f"ASSIGNMENT cell. iZZ={iZZ} is illegal. "
                              "iZZ is read only variable")
    iZZ = property(_CompuCell.CellG_iZZ_get, set_iZZ)


    def set_lX(self,lX):
        raise AttributeError(f"ASSIGNMENT cell. lX={lX} is illegal. "
                              "lX is read only variable")
    lX = property(_CompuCell.CellG_lX_get, set_lX)


    def set_lY(self,lY):
        raise AttributeError(f"ASSIGNMENT cell. lY={lY} is illegal. "
                              "lY is read only variable")
    lY = property(_CompuCell.CellG_lY_get, set_lY)


    def set_lZ(self,lZ):
        raise AttributeError(f"ASSIGNMENT cell. lZ={lZ} is illegal. "
                              "lZ is read only variable")
    lZ = property(_CompuCell.CellG_lZ_get, set_lZ)


    def set_ecc(self,ecc):
        raise AttributeError(f"ASSIGNMENT cell. ecc={ecc} is illegal. "
                              "ecc is read only variable")
    ecc = property(_CompuCell.CellG_ecc_get, set_ecc)


    def set_id(self,id):
        raise AttributeError(f"ASSIGNMENT cell. id={id} is illegal. "
                              "id is read only variable")
    id = property(_CompuCell.CellG_id_get, set_id)


    def set_clusterId(self,clusterId):
        raise AttributeError(f"ASSIGNMENT cell. clusterId={clusterId} is illegal. "
                              "clusterId is read only variable")
    clusterId = property(_CompuCell.CellG_clusterId_get, set_clusterId)


    def set_extraAttribPtr(self,extraAttribPtr):
        raise AttributeError(f"ASSIGNMENT cell. extraAttribPtr={extraAttribPtr} is illegal. "
                              "extraAttribPtr is read only variable")
    extraAttribPtr = property(_CompuCell.CellG_extraAttribPtr_get, set_extraAttribPtr)


    def set_pyAttrib(self,pyAttrib):
        raise AttributeError(f"ASSIGNMENT cell. pyAttrib={pyAttrib} is illegal. "
                              "pyAttrib is read only variable")
    pyAttrib = property(_CompuCell.CellG_pyAttrib_get, set_pyAttrib)


            #simplifying access to cell Python dictionary
    def setdict(self,_dict):
        raise AttributeError(f'ASSIGNMENT cell.dict={_dict} is illegal. Dictionary "dict" can only be modified but not replaced')

    def getdict(self):
        dict_object = _CompuCell.getPyAttrib(self)
        return _CompuCell.getPyAttrib(self)
    dict = property(getdict, setdict)

    # simplifying access to sbml models
    def setsbml(self, sbml) :
        raise AttributeError(f'ASSIGNMENT cell.sbml = {sbml} is illegal. '
                             f'"sbml" attribute can only be modified but not replaced')

    def getsbml(self) :
        import weakref
        try:

            sbml_fetcher = self.dict['__sbml_fetcher']

            sbml_fetcher.cell_obj = weakref.ref(self)

    # sbml_fetcher.cell_ref = weakref.ref(self)

            return sbml_fetcher
        except (KeyError,AttributeError):

            class SBMLFetcher :
                def __init__(self, cell=None) :
                    import weakref
                    self.cell_id = -1
                    self.cell_obj = None
                    if cell is not None:
                        self.cell_id = cell.id



                def __getattr__(self, item) :
                    if item == 'cell_id':
                        return self.__dict__['cell_id']

                    cell_obj = self.cell_obj()
                    cell_dict = cell_obj.dict

                    try :
                        sbml_solver_dict = cell_dict['SBMLSolver']
                    except KeyError :
                        raise KeyError('Cell id={cell_id} has no SBML solvers'.format(cell_id = self.cell_id))

                    item_to_search = item
                    rr_flag = False
                    if item.startswith('_rr_'):
                        item_to_search = item[4:]
                        rr_flag = True

                    try :
                        rr_object =  sbml_solver_dict[item_to_search]
                    except KeyError :
                        raise KeyError('Could not find SBML solver with id={sbml_solver_id} in cell id={cell_id} '.format(
                            sbml_solver_id = item_to_search, cell_id = self.cell_id))

                    if rr_flag:
                        return rr_object
                    else:
                        return rr_object.model

            sbml_fetcher = SBMLFetcher(cell=self)
            self.dict['__sbml_fetcher'] = sbml_fetcher
            sbml_fetcher.cell_obj = weakref.ref(self)
            return sbml_fetcher

    sbml = property(getsbml, setsbml)

    __maboss__ = '__maboss__'

    def _get_maboss(self):
        cell_dict = self.dict
        class MaBoSSAccessor:
            def __getattr__(self, item):
                if CellG.__maboss__ not in cell_dict.keys():
                    cell_dict[CellG.__maboss__] = {}
                if item not in cell_dict[CellG.__maboss__].keys():
                    raise KeyError(f'Could not find MaBoSS solver with name {item}.')
                return cell_dict[CellG.__maboss__][item]
        return MaBoSSAccessor()

    def _set_maboss(self, val):
        raise AttributeError('ASSIGNMENT cell.maboss = %s is illegal. '
                             '"maboss" attribute can only be modified but not replaced' % (maboss))

    maboss = property(_get_maboss, _set_maboss)



    def derived_property_getpressure(self):
        return self.getPressure()

    def derived_property_setpressure(self, _val):
        raise AttributeError('Assignment of derived property pressure is illegal.')

    pressure = property(derived_property_getpressure, derived_property_setpressure)



    def derived_property_getsurfaceTension(self):
        return self.getSurfaceTension()

    def derived_property_setsurfaceTension(self, _val):
        raise AttributeError('Assignment of derived property surfaceTension is illegal.')

    surfaceTension = property(derived_property_getsurfaceTension, derived_property_setsurfaceTension)



    def derived_property_getclusterSurfaceTension(self):
        return self.getClusterSurfaceTension()

    def derived_property_setclusterSurfaceTension(self, _val):
        raise AttributeError('Assignment of derived property clusterSurfaceTension is illegal.')

    clusterSurfaceTension = property(derived_property_getclusterSurfaceTension, derived_property_setclusterSurfaceTension)


    __swig_destroy__ = _CompuCell.delete_CellG

# Register CellG in _CompuCell:
_CompuCell.CellG_swigregister(CellG)
class Cell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Cell_swiginit(self, _CompuCell.new_Cell(*args))
    __swig_destroy__ = _CompuCell.delete_Cell

# Register Cell in _CompuCell:
_CompuCell.Cell_swigregister(Cell)
class CellPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cellPtr = property(_CompuCell.CellPtr_cellPtr_get, _CompuCell.CellPtr_cellPtr_set)

    def __init__(self, *args):
        _CompuCell.CellPtr_swiginit(self, _CompuCell.new_CellPtr(*args))
    __swig_destroy__ = _CompuCell.delete_CellPtr

# Register CellPtr in _CompuCell:
_CompuCell.CellPtr_swigregister(CellPtr)
class NeighborFinderParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.NeighborFinderParams_swiginit(self, _CompuCell.new_NeighborFinderParams(*args))
    __swig_destroy__ = _CompuCell.delete_NeighborFinderParams

    def reset(self, *args):
        return _CompuCell.NeighborFinderParams_reset(self, *args)
    pt = property(_CompuCell.NeighborFinderParams_pt_get, _CompuCell.NeighborFinderParams_pt_set)
    token = property(_CompuCell.NeighborFinderParams_token_get, _CompuCell.NeighborFinderParams_token_set)
    distance = property(_CompuCell.NeighborFinderParams_distance_get, _CompuCell.NeighborFinderParams_distance_set)
    checkBounds = property(_CompuCell.NeighborFinderParams_checkBounds_get, _CompuCell.NeighborFinderParams_checkBounds_set)

# Register NeighborFinderParams in _CompuCell:
_CompuCell.NeighborFinderParams_swigregister(NeighborFinderParams)
class pluginmanagertemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.pluginmanagertemplate_swiginit(self, _CompuCell.new_pluginmanagertemplate(*args))
    __swig_destroy__ = _CompuCell.delete_pluginmanagertemplate

    def getPluginMap(self, *args):
        return _CompuCell.pluginmanagertemplate_getPluginMap(self, *args)

    def getPluginInfos(self, *args):
        return _CompuCell.pluginmanagertemplate_getPluginInfos(self, *args)

    def getLibraryNames(self, *args):
        return _CompuCell.pluginmanagertemplate_getLibraryNames(self, *args)

    def setSimulator(self, *args):
        return _CompuCell.pluginmanagertemplate_setSimulator(self, *args)

    def init(self, *args):
        return _CompuCell.pluginmanagertemplate_init(self, *args)

    def get(self, *args):
        return _CompuCell.pluginmanagertemplate_get(self, *args)

    def isLoaded(self, *args):
        return _CompuCell.pluginmanagertemplate_isLoaded(self, *args)

    def isRegistered(self, *args):
        return _CompuCell.pluginmanagertemplate_isRegistered(self, *args)

    def registerDependency(self, *args):
        return _CompuCell.pluginmanagertemplate_registerDependency(self, *args)

    def dependsOn(self, *args):
        return _CompuCell.pluginmanagertemplate_dependsOn(self, *args)

    def destroyPlugin(self, *args):
        return _CompuCell.pluginmanagertemplate_destroyPlugin(self, *args)

    def unload(self, *args):
        return _CompuCell.pluginmanagertemplate_unload(self, *args)

    def loadLibrary(self, *args):
        return _CompuCell.pluginmanagertemplate_loadLibrary(self, *args)

    def loadLibraryFromPath(self, *args):
        return _CompuCell.pluginmanagertemplate_loadLibraryFromPath(self, *args)

    def loadLibraries(self, *args):
        return _CompuCell.pluginmanagertemplate_loadLibraries(self, *args)

    def closeLibrary(self, *args):
        return _CompuCell.pluginmanagertemplate_closeLibrary(self, *args)

    def closeLibraries(self, *args):
        return _CompuCell.pluginmanagertemplate_closeLibraries(self, *args)

    def registerPlugin(self, *args):
        return _CompuCell.pluginmanagertemplate_registerPlugin(self, *args)

# Register pluginmanagertemplate in _CompuCell:
_CompuCell.pluginmanagertemplate_swigregister(pluginmanagertemplate)
class steppablemanagertemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.steppablemanagertemplate_swiginit(self, _CompuCell.new_steppablemanagertemplate(*args))
    __swig_destroy__ = _CompuCell.delete_steppablemanagertemplate

    def getPluginMap(self, *args):
        return _CompuCell.steppablemanagertemplate_getPluginMap(self, *args)

    def getPluginInfos(self, *args):
        return _CompuCell.steppablemanagertemplate_getPluginInfos(self, *args)

    def getLibraryNames(self, *args):
        return _CompuCell.steppablemanagertemplate_getLibraryNames(self, *args)

    def setSimulator(self, *args):
        return _CompuCell.steppablemanagertemplate_setSimulator(self, *args)

    def init(self, *args):
        return _CompuCell.steppablemanagertemplate_init(self, *args)

    def get(self, *args):
        return _CompuCell.steppablemanagertemplate_get(self, *args)

    def isLoaded(self, *args):
        return _CompuCell.steppablemanagertemplate_isLoaded(self, *args)

    def isRegistered(self, *args):
        return _CompuCell.steppablemanagertemplate_isRegistered(self, *args)

    def registerDependency(self, *args):
        return _CompuCell.steppablemanagertemplate_registerDependency(self, *args)

    def dependsOn(self, *args):
        return _CompuCell.steppablemanagertemplate_dependsOn(self, *args)

    def destroyPlugin(self, *args):
        return _CompuCell.steppablemanagertemplate_destroyPlugin(self, *args)

    def unload(self, *args):
        return _CompuCell.steppablemanagertemplate_unload(self, *args)

    def loadLibrary(self, *args):
        return _CompuCell.steppablemanagertemplate_loadLibrary(self, *args)

    def loadLibraryFromPath(self, *args):
        return _CompuCell.steppablemanagertemplate_loadLibraryFromPath(self, *args)

    def loadLibraries(self, *args):
        return _CompuCell.steppablemanagertemplate_loadLibraries(self, *args)

    def closeLibrary(self, *args):
        return _CompuCell.steppablemanagertemplate_closeLibrary(self, *args)

    def closeLibraries(self, *args):
        return _CompuCell.steppablemanagertemplate_closeLibraries(self, *args)

    def registerPlugin(self, *args):
        return _CompuCell.steppablemanagertemplate_registerPlugin(self, *args)

# Register steppablemanagertemplate in _CompuCell:
_CompuCell.steppablemanagertemplate_swigregister(steppablemanagertemplate)

def round(*args):
    return _CompuCell.round(*args)
class floatfield(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createInstance(*args):
        return _CompuCell.floatfield_createInstance(*args)

    def set(self, *args):
        return _CompuCell.floatfield_set(self, *args)

    def get(self, *args):
        return _CompuCell.floatfield_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.floatfield_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.floatfield_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.floatfield_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.floatfield_isValid(self, *args)

    def setDim(self, *args):
        return _CompuCell.floatfield_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.floatfield_resizeAndShift(self, *args)

    def clearSecData(self, *args):
        return _CompuCell.floatfield_clearSecData(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.floatfield_getNeighbor(self, *args)

    def isLittleEndian(self, *args):
        return _CompuCell.floatfield_isLittleEndian(self, *args)

    def __str__(self, *args):
        return _CompuCell.floatfield___str__(self, *args)

    def min(self, *args):
        return _CompuCell.floatfield_min(self, *args)

    def max(self, *args):
        return _CompuCell.floatfield_max(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.floatfield___getitem__(self, *args)


    def normalizeSlice(self, s):
        norm = lambda x : x if x is None else int(round(x))
        return slice ( norm(s.start),norm(s.stop), norm(s.step) )

    def __setitem__(self,_indexTyple,_val):
        newSliceTuple = tuple(map(lambda x : self.normalizeSlice(x) if isinstance(x,slice) else x , _indexTyple))
        self.setitem(newSliceTuple,_val)



    def setitem(self, *args):
        return _CompuCell.floatfield_setitem(self, *args)
    __swig_destroy__ = _CompuCell.delete_floatfield

# Register floatfield in _CompuCell:
_CompuCell.floatfield_swigregister(floatfield)
cvar = _CompuCell.cvar
floatfield.typeStr = _CompuCell.cvar.floatfield_typeStr

class floatfieldImpl(floatfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.floatfieldImpl_swiginit(self, _CompuCell.new_floatfieldImpl(*args))
    __swig_destroy__ = _CompuCell.delete_floatfieldImpl

    def set(self, *args):
        return _CompuCell.floatfieldImpl_set(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.floatfieldImpl_resizeAndShift(self, *args)

    def setDim(self, *args):
        return _CompuCell.floatfieldImpl_setDim(self, *args)

    def getQuick(self, *args):
        return _CompuCell.floatfieldImpl_getQuick(self, *args)

    def setQuick(self, *args):
        return _CompuCell.floatfieldImpl_setQuick(self, *args)

    def get(self, *args):
        return _CompuCell.floatfieldImpl_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.floatfieldImpl_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.floatfieldImpl_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.floatfieldImpl_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.floatfieldImpl_isValid(self, *args)

# Register floatfieldImpl in _CompuCell:
_CompuCell.floatfieldImpl_swigregister(floatfieldImpl)
class intfield(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createInstance(*args):
        return _CompuCell.intfield_createInstance(*args)

    def set(self, *args):
        return _CompuCell.intfield_set(self, *args)

    def get(self, *args):
        return _CompuCell.intfield_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.intfield_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.intfield_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.intfield_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.intfield_isValid(self, *args)

    def setDim(self, *args):
        return _CompuCell.intfield_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.intfield_resizeAndShift(self, *args)

    def clearSecData(self, *args):
        return _CompuCell.intfield_clearSecData(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.intfield_getNeighbor(self, *args)

    def isLittleEndian(self, *args):
        return _CompuCell.intfield_isLittleEndian(self, *args)

    def __str__(self, *args):
        return _CompuCell.intfield___str__(self, *args)

    def min(self, *args):
        return _CompuCell.intfield_min(self, *args)

    def max(self, *args):
        return _CompuCell.intfield_max(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.intfield___getitem__(self, *args)


    def normalizeSlice(self, s):
        norm = lambda x : x if x is None else int(round(x))
        return slice ( norm(s.start),norm(s.stop), norm(s.step) )

    def __setitem__(self,_indexTyple,_val):
        newSliceTuple = tuple(map(lambda x : self.normalizeSlice(x) if isinstance(x,slice) else x , _indexTyple))
        self.setitem(newSliceTuple,_val)



    def setitem(self, *args):
        return _CompuCell.intfield_setitem(self, *args)
    __swig_destroy__ = _CompuCell.delete_intfield

# Register intfield in _CompuCell:
_CompuCell.intfield_swigregister(intfield)
intfield.typeStr = _CompuCell.cvar.intfield_typeStr

class intfieldImpl(intfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.intfieldImpl_swiginit(self, _CompuCell.new_intfieldImpl(*args))
    __swig_destroy__ = _CompuCell.delete_intfieldImpl

    def set(self, *args):
        return _CompuCell.intfieldImpl_set(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.intfieldImpl_resizeAndShift(self, *args)

    def setDim(self, *args):
        return _CompuCell.intfieldImpl_setDim(self, *args)

    def getQuick(self, *args):
        return _CompuCell.intfieldImpl_getQuick(self, *args)

    def setQuick(self, *args):
        return _CompuCell.intfieldImpl_setQuick(self, *args)

    def get(self, *args):
        return _CompuCell.intfieldImpl_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.intfieldImpl_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.intfieldImpl_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.intfieldImpl_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.intfieldImpl_isValid(self, *args)

# Register intfieldImpl in _CompuCell:
_CompuCell.intfieldImpl_swigregister(intfieldImpl)
class cellfield(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createInstance(*args):
        return _CompuCell.cellfield_createInstance(*args)

    def set(self, *args):
        return _CompuCell.cellfield_set(self, *args)

    def get(self, *args):
        return _CompuCell.cellfield_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.cellfield_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.cellfield_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.cellfield_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.cellfield_isValid(self, *args)

    def setDim(self, *args):
        return _CompuCell.cellfield_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.cellfield_resizeAndShift(self, *args)

    def clearSecData(self, *args):
        return _CompuCell.cellfield_clearSecData(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.cellfield_getNeighbor(self, *args)

    def isLittleEndian(self, *args):
        return _CompuCell.cellfield_isLittleEndian(self, *args)

    def __str__(self, *args):
        return _CompuCell.cellfield___str__(self, *args)

    def min(self, *args):
        return _CompuCell.cellfield_min(self, *args)

    def max(self, *args):
        return _CompuCell.cellfield_max(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.cellfield___getitem__(self, *args)

    def normalizeSlice(self, s):
        norm = lambda x : x if x is None else int(round(x))
        return slice ( norm(s.start),norm(s.stop), norm(s.step) )

    def __setitem__(self,_indexTyple,_val):
        newSliceTuple = tuple(map(lambda x : self.normalizeSlice(x) if isinstance(x,slice) else x , _indexTyple))
        self.setitem(newSliceTuple,_val,self.volumeTrackerPlugin)



    def setitem(self, *args):
        return _CompuCell.cellfield_setitem(self, *args)
    __swig_destroy__ = _CompuCell.delete_cellfield

# Register cellfield in _CompuCell:
_CompuCell.cellfield_swigregister(cellfield)
cellfield.typeStr = _CompuCell.cvar.cellfield_typeStr

class cellfieldImpl(cellfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.cellfieldImpl_swiginit(self, _CompuCell.new_cellfieldImpl(*args))
    __swig_destroy__ = _CompuCell.delete_cellfieldImpl

    def set(self, *args):
        return _CompuCell.cellfieldImpl_set(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.cellfieldImpl_resizeAndShift(self, *args)

    def setDim(self, *args):
        return _CompuCell.cellfieldImpl_setDim(self, *args)

    def getQuick(self, *args):
        return _CompuCell.cellfieldImpl_getQuick(self, *args)

    def setQuick(self, *args):
        return _CompuCell.cellfieldImpl_setQuick(self, *args)

    def get(self, *args):
        return _CompuCell.cellfieldImpl_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.cellfieldImpl_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.cellfieldImpl_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.cellfieldImpl_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.cellfieldImpl_isValid(self, *args)

# Register cellfieldImpl in _CompuCell:
_CompuCell.cellfieldImpl_swigregister(cellfieldImpl)
class watchablecellfield(cellfieldImpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.watchablecellfield_swiginit(self, _CompuCell.new_watchablecellfield(*args))
    __swig_destroy__ = _CompuCell.delete_watchablecellfield

    def addChangeWatcher(self, *args):
        return _CompuCell.watchablecellfield_addChangeWatcher(self, *args)

    def set(self, *args):
        return _CompuCell.watchablecellfield_set(self, *args)

# Register watchablecellfield in _CompuCell:
_CompuCell.watchablecellfield_swigregister(watchablecellfield)
class vectorstdstring(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorstdstring_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorstdstring___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorstdstring___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorstdstring___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorstdstring___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorstdstring___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorstdstring___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorstdstring___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorstdstring___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorstdstring___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorstdstring_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorstdstring_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorstdstring_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorstdstring_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorstdstring_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorstdstring_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorstdstring_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorstdstring_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorstdstring_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorstdstring_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorstdstring_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorstdstring_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorstdstring_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.vectorstdstring_swiginit(self, _CompuCell.new_vectorstdstring(*args))

    def push_back(self, *args):
        return _CompuCell.vectorstdstring_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorstdstring_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorstdstring_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorstdstring_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorstdstring_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorstdstring_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorstdstring_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorstdstring_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorstdstring

# Register vectorstdstring in _CompuCell:
_CompuCell.vectorstdstring_swigregister(vectorstdstring)
class vectordouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectordouble_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectordouble___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectordouble___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectordouble___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectordouble___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectordouble___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectordouble___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectordouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectordouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectordouble___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectordouble_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectordouble_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectordouble_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectordouble_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectordouble_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectordouble_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectordouble_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectordouble_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectordouble_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectordouble_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectordouble_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectordouble_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectordouble_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.vectordouble_swiginit(self, _CompuCell.new_vectordouble(*args))

    def push_back(self, *args):
        return _CompuCell.vectordouble_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectordouble_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectordouble_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectordouble_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectordouble_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectordouble_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectordouble_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectordouble_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectordouble

# Register vectordouble in _CompuCell:
_CompuCell.vectordouble_swigregister(vectordouble)
class vectorvectordouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorvectordouble_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorvectordouble___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorvectordouble___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorvectordouble___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorvectordouble___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorvectordouble___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorvectordouble___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorvectordouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorvectordouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorvectordouble___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorvectordouble_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorvectordouble_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorvectordouble_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorvectordouble_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorvectordouble_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorvectordouble_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorvectordouble_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorvectordouble_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorvectordouble_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorvectordouble_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorvectordouble_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorvectordouble_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorvectordouble_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.vectorvectordouble_swiginit(self, _CompuCell.new_vectorvectordouble(*args))

    def push_back(self, *args):
        return _CompuCell.vectorvectordouble_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorvectordouble_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorvectordouble_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorvectordouble_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorvectordouble_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorvectordouble_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorvectordouble_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorvectordouble_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorvectordouble

# Register vectorvectordouble in _CompuCell:
_CompuCell.vectorvectordouble_swigregister(vectorvectordouble)
class vectorint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorint_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorint___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorint___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorint___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorint___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorint___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorint___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorint___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorint_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorint_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorint_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorint_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorint_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorint_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorint_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorint_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorint_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorint_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorint_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorint_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorint_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.vectorint_swiginit(self, _CompuCell.new_vectorint(*args))

    def push_back(self, *args):
        return _CompuCell.vectorint_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorint_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorint_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorint_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorint_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorint_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorint_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorint_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorint

# Register vectorint in _CompuCell:
_CompuCell.vectorint_swigregister(vectorint)
class vectorunsignedchar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorunsignedchar_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorunsignedchar___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorunsignedchar___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorunsignedchar___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorunsignedchar___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorunsignedchar___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorunsignedchar___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorunsignedchar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorunsignedchar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorunsignedchar___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorunsignedchar_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorunsignedchar_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorunsignedchar_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorunsignedchar_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorunsignedchar_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorunsignedchar_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorunsignedchar_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorunsignedchar_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorunsignedchar_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorunsignedchar_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorunsignedchar_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorunsignedchar_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorunsignedchar_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.vectorunsignedchar_swiginit(self, _CompuCell.new_vectorunsignedchar(*args))

    def push_back(self, *args):
        return _CompuCell.vectorunsignedchar_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorunsignedchar_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorunsignedchar_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorunsignedchar_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorunsignedchar_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorunsignedchar_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorunsignedchar_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorunsignedchar_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorunsignedchar

# Register vectorunsignedchar in _CompuCell:
_CompuCell.vectorunsignedchar_swigregister(vectorunsignedchar)
class vectorbool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorbool_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorbool___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorbool___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorbool___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorbool___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorbool___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorbool___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorbool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorbool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorbool___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorbool_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorbool_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorbool_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorbool_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorbool_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorbool_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorbool_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorbool_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorbool_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorbool_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorbool_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorbool_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorbool_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.vectorbool_swiginit(self, _CompuCell.new_vectorbool(*args))

    def push_back(self, *args):
        return _CompuCell.vectorbool_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorbool_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorbool_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorbool_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorbool_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorbool_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorbool_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorbool_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorbool

# Register vectorbool in _CompuCell:
_CompuCell.vectorbool_swigregister(vectorbool)
class cellgchangewatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def field3DChange(self, *args):
        return _CompuCell.cellgchangewatcher_field3DChange(self, *args)
    __swig_destroy__ = _CompuCell.delete_cellgchangewatcher

# Register cellgchangewatcher in _CompuCell:
_CompuCell.cellgchangewatcher_swigregister(cellgchangewatcher)
class mvectorCellGPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mvectorCellGPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mvectorCellGPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mvectorCellGPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mvectorCellGPtr___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.mvectorCellGPtr___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.mvectorCellGPtr___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.mvectorCellGPtr___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mvectorCellGPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.mvectorCellGPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mvectorCellGPtr___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.mvectorCellGPtr_pop(self, *args)

    def append(self, *args):
        return _CompuCell.mvectorCellGPtr_append(self, *args)

    def empty(self, *args):
        return _CompuCell.mvectorCellGPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mvectorCellGPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mvectorCellGPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mvectorCellGPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mvectorCellGPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mvectorCellGPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mvectorCellGPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mvectorCellGPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mvectorCellGPtr_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.mvectorCellGPtr_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.mvectorCellGPtr_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.mvectorCellGPtr_swiginit(self, _CompuCell.new_mvectorCellGPtr(*args))

    def push_back(self, *args):
        return _CompuCell.mvectorCellGPtr_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.mvectorCellGPtr_front(self, *args)

    def back(self, *args):
        return _CompuCell.mvectorCellGPtr_back(self, *args)

    def assign(self, *args):
        return _CompuCell.mvectorCellGPtr_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.mvectorCellGPtr_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.mvectorCellGPtr_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.mvectorCellGPtr_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.mvectorCellGPtr_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_mvectorCellGPtr

# Register mvectorCellGPtr in _CompuCell:
_CompuCell.mvectorCellGPtr_swigregister(mvectorCellGPtr)
class mapLongCellGPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mapLongCellGPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mapLongCellGPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mapLongCellGPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mapLongCellGPtr___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.mapLongCellGPtr___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mapLongCellGPtr___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.mapLongCellGPtr_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.mapLongCellGPtr_keys(self, *args)

    def values(self, *args):
        return _CompuCell.mapLongCellGPtr_values(self, *args)

    def items(self, *args):
        return _CompuCell.mapLongCellGPtr_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.mapLongCellGPtr___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.mapLongCellGPtr_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.mapLongCellGPtr_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mapLongCellGPtr___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.mapLongCellGPtr_asdict(self, *args)

    def __init__(self, *args):
        _CompuCell.mapLongCellGPtr_swiginit(self, _CompuCell.new_mapLongCellGPtr(*args))

    def empty(self, *args):
        return _CompuCell.mapLongCellGPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mapLongCellGPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mapLongCellGPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mapLongCellGPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mapLongCellGPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mapLongCellGPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mapLongCellGPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mapLongCellGPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mapLongCellGPtr_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.mapLongCellGPtr_count(self, *args)

    def erase(self, *args):
        return _CompuCell.mapLongCellGPtr_erase(self, *args)

    def find(self, *args):
        return _CompuCell.mapLongCellGPtr_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.mapLongCellGPtr_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.mapLongCellGPtr_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongCellGPtr

# Register mapLongCellGPtr in _CompuCell:
_CompuCell.mapLongCellGPtr_swigregister(mapLongCellGPtr)
class mapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mapLongFloat_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mapLongFloat___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mapLongFloat___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mapLongFloat___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.mapLongFloat___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mapLongFloat___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.mapLongFloat_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.mapLongFloat_keys(self, *args)

    def values(self, *args):
        return _CompuCell.mapLongFloat_values(self, *args)

    def items(self, *args):
        return _CompuCell.mapLongFloat_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.mapLongFloat___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.mapLongFloat_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.mapLongFloat_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mapLongFloat___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.mapLongFloat_asdict(self, *args)

    def __init__(self, *args):
        _CompuCell.mapLongFloat_swiginit(self, _CompuCell.new_mapLongFloat(*args))

    def empty(self, *args):
        return _CompuCell.mapLongFloat_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mapLongFloat_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mapLongFloat_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mapLongFloat_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mapLongFloat_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mapLongFloat_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mapLongFloat_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mapLongFloat_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mapLongFloat_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.mapLongFloat_count(self, *args)

    def erase(self, *args):
        return _CompuCell.mapLongFloat_erase(self, *args)

    def find(self, *args):
        return _CompuCell.mapLongFloat_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.mapLongFloat_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.mapLongFloat_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongFloat

# Register mapLongFloat in _CompuCell:
_CompuCell.mapLongFloat_swigregister(mapLongFloat)
class mapLongmapLongCellGPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_keys(self, *args)

    def values(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_values(self, *args)

    def items(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_asdict(self, *args)

    def __init__(self, *args):
        _CompuCell.mapLongmapLongCellGPtr_swiginit(self, _CompuCell.new_mapLongmapLongCellGPtr(*args))

    def empty(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_count(self, *args)

    def erase(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_erase(self, *args)

    def find(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongmapLongCellGPtr

# Register mapLongmapLongCellGPtr in _CompuCell:
_CompuCell.mapLongmapLongCellGPtr_swigregister(mapLongmapLongCellGPtr)
class CellGChangeWatcher(cellgchangewatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_CellGChangeWatcher

# Register CellGChangeWatcher in _CompuCell:
_CompuCell.CellGChangeWatcher_swigregister(CellGChangeWatcher)
class TypeChangeWatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_TypeChangeWatcher

    def typeChange(self, *args):
        return _CompuCell.TypeChangeWatcher_typeChange(self, *args)

# Register TypeChangeWatcher in _CompuCell:
_CompuCell.TypeChangeWatcher_swigregister(TypeChangeWatcher)
class TypeTransition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.TypeTransition_swiginit(self, _CompuCell.new_TypeTransition(*args))
    __swig_destroy__ = _CompuCell.delete_TypeTransition

    def registerTypeChangeWatcher(self, *args):
        return _CompuCell.TypeTransition_registerTypeChangeWatcher(self, *args)

    def setType(self, *args):
        return _CompuCell.TypeTransition_setType(self, *args)

# Register TypeTransition in _CompuCell:
_CompuCell.TypeTransition_swigregister(TypeTransition)
class Automaton(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_Automaton

    def creation(self, *args):
        return _CompuCell.Automaton_creation(self, *args)

    def updateVariables(self, *args):
        return _CompuCell.Automaton_updateVariables(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.Automaton_field3DChange(self, *args)

    def getCellType(self, *args):
        return _CompuCell.Automaton_getCellType(self, *args)

    def getTypeName(self, *args):
        return _CompuCell.Automaton_getTypeName(self, *args)

    def getTypeId(self, *args):
        return _CompuCell.Automaton_getTypeId(self, *args)

    def getMaxTypeId(self, *args):
        return _CompuCell.Automaton_getMaxTypeId(self, *args)

    def getTypeIds(self, *args):
        return _CompuCell.Automaton_getTypeIds(self, *args)

# Register Automaton in _CompuCell:
_CompuCell.Automaton_swigregister(Automaton)
class CellInventoryWatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def onCellAdd(self, *args):
        return _CompuCell.CellInventoryWatcher_onCellAdd(self, *args)

    def onCellRemove(self, *args):
        return _CompuCell.CellInventoryWatcher_onCellRemove(self, *args)

    def __init__(self, *args):
        _CompuCell.CellInventoryWatcher_swiginit(self, _CompuCell.new_CellInventoryWatcher(*args))
    __swig_destroy__ = _CompuCell.delete_CellInventoryWatcher

# Register CellInventoryWatcher in _CompuCell:
_CompuCell.CellInventoryWatcher_swigregister(CellInventoryWatcher)
class CC3DCellList(mvectorCellGPtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_CC3DCellList

    def getBaseClass(self, *args):
        return _CompuCell.CC3DCellList_getBaseClass(self, *args)

    def __init__(self, *args):
        _CompuCell.CC3DCellList_swiginit(self, _CompuCell.new_CC3DCellList(*args))

# Register CC3DCellList in _CompuCell:
_CompuCell.CC3DCellList_swigregister(CC3DCellList)
class CompartmentInventory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CompartmentInventory_swiginit(self, _CompuCell.new_CompartmentInventory(*args))
    __swig_destroy__ = _CompuCell.delete_CompartmentInventory

    def setPotts3DPtr(self, *args):
        return _CompuCell.CompartmentInventory_setPotts3DPtr(self, *args)

    def getClusterCells(self, *args):
        return _CompuCell.CompartmentInventory_getClusterCells(self, *args)

    def addToInventory(self, *args):
        return _CompuCell.CompartmentInventory_addToInventory(self, *args)

    def removeClusterFromInventory(self, *args):
        return _CompuCell.CompartmentInventory_removeClusterFromInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell.CompartmentInventory_removeFromInventory(self, *args)

    def getContainer(self, *args):
        return _CompuCell.CompartmentInventory_getContainer(self, *args)

    def getInventorySize(self, *args):
        return _CompuCell.CompartmentInventory_getInventorySize(self, *args)

    def getSize(self, *args):
        return _CompuCell.CompartmentInventory_getSize(self, *args)

    def inventoryBegin(self, *args):
        return _CompuCell.CompartmentInventory_inventoryBegin(self, *args)

    def inventoryEnd(self, *args):
        return _CompuCell.CompartmentInventory_inventoryEnd(self, *args)

    def incrementIterator(self, *args):
        return _CompuCell.CompartmentInventory_incrementIterator(self, *args)

    def decrementIterator(self, *args):
        return _CompuCell.CompartmentInventory_decrementIterator(self, *args)

# Register CompartmentInventory in _CompuCell:
_CompuCell.CompartmentInventory_swigregister(CompartmentInventory)
class CellIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CellIdentifier_swiginit(self, _CompuCell.new_CellIdentifier(*args))
    cellId = property(_CompuCell.CellIdentifier_cellId_get, _CompuCell.CellIdentifier_cellId_set)
    clusterId = property(_CompuCell.CellIdentifier_clusterId_get, _CompuCell.CellIdentifier_clusterId_set)

    def __lt__(self, *args):
        return _CompuCell.CellIdentifier___lt__(self, *args)
    __swig_destroy__ = _CompuCell.delete_CellIdentifier

# Register CellIdentifier in _CompuCell:
_CompuCell.CellIdentifier_swigregister(CellIdentifier)
class CellInventory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CellInventory_swiginit(self, _CompuCell.new_CellInventory(*args))
    __swig_destroy__ = _CompuCell.delete_CellInventory

    def addToInventory(self, *args):
        return _CompuCell.CellInventory_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell.CellInventory_removeFromInventory(self, *args)

    def getCellInventorySize(self, *args):
        return _CompuCell.CellInventory_getCellInventorySize(self, *args)

    def getSize(self, *args):
        return _CompuCell.CellInventory_getSize(self, *args)

    def cellInventoryBegin(self, *args):
        return _CompuCell.CellInventory_cellInventoryBegin(self, *args)

    def cellInventoryEnd(self, *args):
        return _CompuCell.CellInventory_cellInventoryEnd(self, *args)

    def incrementIterator(self, *args):
        return _CompuCell.CellInventory_incrementIterator(self, *args)

    def decrementIterator(self, *args):
        return _CompuCell.CellInventory_decrementIterator(self, *args)

    def reassignClusterId(self, *args):
        return _CompuCell.CellInventory_reassignClusterId(self, *args)

    def find(self, *args):
        return _CompuCell.CellInventory_find(self, *args)

    def getContainer(self, *args):
        return _CompuCell.CellInventory_getContainer(self, *args)

    def setPotts3DPtr(self, *args):
        return _CompuCell.CellInventory_setPotts3DPtr(self, *args)

    def getCellById(self, *args):
        return _CompuCell.CellInventory_getCellById(self, *args)

    def getCellByIds(self, *args):
        return _CompuCell.CellInventory_getCellByIds(self, *args)

    def attemptFetchingCellById(self, *args):
        return _CompuCell.CellInventory_attemptFetchingCellById(self, *args)

    def getCell(self, *args):
        return _CompuCell.CellInventory_getCell(self, *args)

    def getClusterCells(self, *args):
        return _CompuCell.CellInventory_getClusterCells(self, *args)

    def initCellInventoryByType(self, *args):
        return _CompuCell.CellInventory_initCellInventoryByType(self, *args)

    def initCellInventoryByMultiType(self, *args):
        return _CompuCell.CellInventory_initCellInventoryByMultiType(self, *args)

    def getClusterInventory(self, *args):
        return _CompuCell.CellInventory_getClusterInventory(self, *args)

    def cleanInventory(self, *args):
        return _CompuCell.CellInventory_cleanInventory(self, *args)

    def registerWatcher(self, *args):
        return _CompuCell.CellInventory_registerWatcher(self, *args)

    def unregisterWatcher(self, *args):
        return _CompuCell.CellInventory_unregisterWatcher(self, *args)

# Register CellInventory in _CompuCell:
_CompuCell.CellInventory_swigregister(CellInventory)
class EnergyFunctionCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.EnergyFunctionCalculator_swiginit(self, _CompuCell.new_EnergyFunctionCalculator(*args))
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionCalculator

    def init(self, *args):
        return _CompuCell.EnergyFunctionCalculator_init(self, *args)

    def registerEnergyFunction(self, *args):
        return _CompuCell.EnergyFunctionCalculator_registerEnergyFunction(self, *args)

    def registerEnergyFunctionWithName(self, *args):
        return _CompuCell.EnergyFunctionCalculator_registerEnergyFunctionWithName(self, *args)

    def unregisterEnergyFunction(self, *args):
        return _CompuCell.EnergyFunctionCalculator_unregisterEnergyFunction(self, *args)

    def configureEnergyCalculator(self, *args):
        return _CompuCell.EnergyFunctionCalculator_configureEnergyCalculator(self, *args)

    def get_number_energy_fcn_calculations(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_number_energy_fcn_calculations(self, *args)

    def range(self, *args):
        return _CompuCell.EnergyFunctionCalculator_range(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.EnergyFunctionCalculator_changeEnergy(self, *args)

    def setPotts(self, *args):
        return _CompuCell.EnergyFunctionCalculator_setPotts(self, *args)

    def setSimulator(self, *args):
        return _CompuCell.EnergyFunctionCalculator_setSimulator(self, *args)

    def get_current_mcs_accepted_mask_npy_array(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_current_mcs_accepted_mask_npy_array(self, *args)

    def get_current_mcs_prob_npy_array(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_current_mcs_prob_npy_array(self, *args)

    def get_current_mcs_flip_attempt_points_npy_array(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_current_mcs_flip_attempt_points_npy_array(self, *args)

    def setLastFlipAccepted(self, *args):
        return _CompuCell.EnergyFunctionCalculator_setLastFlipAccepted(self, *args)

    def set_acceptance_probability(self, *args):
        return _CompuCell.EnergyFunctionCalculator_set_acceptance_probability(self, *args)

    def getEnergyFunctionNames(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getEnergyFunctionNames(self, *args)

    def getCurrentEnergyChanges(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getCurrentEnergyChanges(self, *args)

    def getCurrentFlipResults(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getCurrentFlipResults(self, *args)

    def getEnergyFunctionNameToValueMap(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getEnergyFunctionNameToValueMap(self, *args)

    def log_output(self, *args):
        return _CompuCell.EnergyFunctionCalculator_log_output(self, *args)

# Register EnergyFunctionCalculator in _CompuCell:
_CompuCell.EnergyFunctionCalculator_swigregister(EnergyFunctionCalculator)
class Point3DHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _CompuCell.Point3DHasher___call__(self, *args)

    def __init__(self, *args):
        _CompuCell.Point3DHasher_swiginit(self, _CompuCell.new_Point3DHasher(*args))
    __swig_destroy__ = _CompuCell.delete_Point3DHasher

# Register Point3DHasher in _CompuCell:
_CompuCell.Point3DHasher_swigregister(Point3DHasher)
class Point3DComparator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _CompuCell.Point3DComparator___call__(self, *args)

    def __init__(self, *args):
        _CompuCell.Point3DComparator_swiginit(self, _CompuCell.new_Point3DComparator(*args))
    __swig_destroy__ = _CompuCell.delete_Point3DComparator

# Register Point3DComparator in _CompuCell:
_CompuCell.Point3DComparator_swigregister(Point3DComparator)
class Potts3D(object):
    r"""Potts3D class used for getting information about the lattice and cells"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""Potts3D class used for getting information about the lattice and cellsPotts3D class used for getting information about the lattice and cells"""
        _CompuCell.Potts3D_swiginit(self, _CompuCell.new_Potts3D(*args))
    __swig_destroy__ = _CompuCell.delete_Potts3D

    def createCellField(self, *args):
        return _CompuCell.Potts3D_createCellField(self, *args)

    def resizeCellField(self, *args):
        return _CompuCell.Potts3D_resizeCellField(self, *args)

    def getTemperature(self, *args):
        return _CompuCell.Potts3D_getTemperature(self, *args)

    def getCurrentAttempt(self, *args):
        return _CompuCell.Potts3D_getCurrentAttempt(self, *args)

    def getNumberOfAttempts(self, *args):
        r"""Returns the number of attempted flips in a Monte Carlo step"""
        return _CompuCell.Potts3D_getNumberOfAttempts(self, *args)

    def getNumberOfAttemptedEnergyCalculations(self, *args):
        r"""I don't know"""
        return _CompuCell.Potts3D_getNumberOfAttemptedEnergyCalculations(self, *args)

    def getNumberOfAcceptedSpinFlips(self, *args):
        return _CompuCell.Potts3D_getNumberOfAcceptedSpinFlips(self, *args)

    def registerConnectivityConstraint(self, *args):
        return _CompuCell.Potts3D_registerConnectivityConstraint(self, *args)

    def getConnectivityConstraint(self, *args):
        return _CompuCell.Potts3D_getConnectivityConstraint(self, *args)

    def checkIfFrozen(self, *args):
        return _CompuCell.Potts3D_checkIfFrozen(self, *args)

    def getBoundaryPixelSetPtr(self, *args):
        return _CompuCell.Potts3D_getBoundaryPixelSetPtr(self, *args)

    def getJustInsertedBoundaryPixelSetPtr(self, *args):
        return _CompuCell.Potts3D_getJustInsertedBoundaryPixelSetPtr(self, *args)

    def getJustDeletedBoundaryPixelSetPtr(self, *args):
        return _CompuCell.Potts3D_getJustDeletedBoundaryPixelSetPtr(self, *args)

    def getBoundaryPixelVectorPtr(self, *args):
        return _CompuCell.Potts3D_getBoundaryPixelVectorPtr(self, *args)

    def add_step_output(self, *args):
        return _CompuCell.Potts3D_add_step_output(self, *args)

    def get_step_output(self, *args):
        return _CompuCell.Potts3D_get_step_output(self, *args)

    def getLatticeType(self, *args):
        return _CompuCell.Potts3D_getLatticeType(self, *args)

    def getDepth(self, *args):
        r"""Return the Depth"""
        return _CompuCell.Potts3D_getDepth(self, *args)

    def setDepth(self, *args):
        r"""Function to set the Depth (neighbor distance)"""
        return _CompuCell.Potts3D_setDepth(self, *args)

    def setNeighborOrder(self, *args):
        return _CompuCell.Potts3D_setNeighborOrder(self, *args)

    def set_test_output_generate_flag(self, *args):
        return _CompuCell.Potts3D_set_test_output_generate_flag(self, *args)

    def get_test_output_generate_flag(self, *args):
        return _CompuCell.Potts3D_get_test_output_generate_flag(self, *args)

    def set_test_run_flag(self, *args):
        return _CompuCell.Potts3D_set_test_run_flag(self, *args)

    def get_test_run_flag(self, *args):
        return _CompuCell.Potts3D_get_test_run_flag(self, *args)

    def set_simulation_input_dir(self, *args):
        return _CompuCell.Potts3D_set_simulation_input_dir(self, *args)

    def get_simulation_input_dir(self, *args):
        return _CompuCell.Potts3D_get_simulation_input_dir(self, *args)

    def initializeCellTypeMotility(self, *args):
        return _CompuCell.Potts3D_initializeCellTypeMotility(self, *args)

    def hasCellTypeMotility(self, *args):
        return _CompuCell.Potts3D_hasCellTypeMotility(self, *args)

    def getCellTypeMotility(self, *args):
        return _CompuCell.Potts3D_getCellTypeMotility(self, *args)

    def setCellTypeMotility(self, *args):
        return _CompuCell.Potts3D_setCellTypeMotility(self, *args)

    def setDebugOutputFrequency(self, *args):
        r"""Function to set output frequency of debug statements"""
        return _CompuCell.Potts3D_setDebugOutputFrequency(self, *args)

    def setSimulator(self, *args):
        return _CompuCell.Potts3D_setSimulator(self, *args)

    def setFrozenTypeVector(self, *args):
        return _CompuCell.Potts3D_setFrozenTypeVector(self, *args)

    def getFrozenTypeVector(self, *args):
        return _CompuCell.Potts3D_getFrozenTypeVector(self, *args)

    def getFlipNeighbor(self, *args):
        return _CompuCell.Potts3D_getFlipNeighbor(self, *args)

    def setBoundaryXName(self, *args):
        return _CompuCell.Potts3D_setBoundaryXName(self, *args)

    def setBoundaryYName(self, *args):
        return _CompuCell.Potts3D_setBoundaryYName(self, *args)

    def setBoundaryZName(self, *args):
        return _CompuCell.Potts3D_setBoundaryZName(self, *args)

    def getBoundaryXName(self, *args):
        return _CompuCell.Potts3D_getBoundaryXName(self, *args)

    def getBoundaryYName(self, *args):
        return _CompuCell.Potts3D_getBoundaryYName(self, *args)

    def getBoundaryZName(self, *args):
        return _CompuCell.Potts3D_getBoundaryZName(self, *args)

    def setMinCoordinates(self, *args):
        return _CompuCell.Potts3D_setMinCoordinates(self, *args)

    def setMaxCoordinates(self, *args):
        return _CompuCell.Potts3D_setMaxCoordinates(self, *args)

    def getMinCoordinates(self, *args):
        return _CompuCell.Potts3D_getMinCoordinates(self, *args)

    def getMaxCoordinates(self, *args):
        return _CompuCell.Potts3D_getMaxCoordinates(self, *args)

    def getTypeTransition(self, *args):
        return _CompuCell.Potts3D_getTypeTransition(self, *args)

    def createEnergyFunction(self, *args):
        return _CompuCell.Potts3D_createEnergyFunction(self, *args)

    def getEnergyFunctionCalculator(self, *args):
        return _CompuCell.Potts3D_getEnergyFunctionCalculator(self, *args)

    def getCellInventory(self, *args):
        r"""Returns a list of all the cells in the simulation"""
        return _CompuCell.Potts3D_getCellInventory(self, *args)

    def clean_cell_field(self, *args):
        return _CompuCell.Potts3D_clean_cell_field(self, *args)

    def registerAttributeAdder(self, *args):
        return _CompuCell.Potts3D_registerAttributeAdder(self, *args)

    def registerEnergyFunction(self, *args):
        return _CompuCell.Potts3D_registerEnergyFunction(self, *args)

    def registerEnergyFunctionWithName(self, *args):
        return _CompuCell.Potts3D_registerEnergyFunctionWithName(self, *args)

    def unregisterEnergyFunction(self, *args):
        return _CompuCell.Potts3D_unregisterEnergyFunction(self, *args)

    def getNewNumber(self, *args):
        return _CompuCell.Potts3D_getNewNumber(self, *args)

    def registerAutomaton(self, *args):
        return _CompuCell.Potts3D_registerAutomaton(self, *args)

    def getAutomaton(self, *args):
        return _CompuCell.Potts3D_getAutomaton(self, *args)

    def setParallelUtils(self, *args):
        return _CompuCell.Potts3D_setParallelUtils(self, *args)

    def registerAcceptanceFunction(self, *args):
        return _CompuCell.Potts3D_registerAcceptanceFunction(self, *args)

    def setAcceptanceFunctionByName(self, *args):
        return _CompuCell.Potts3D_setAcceptanceFunctionByName(self, *args)

    def getAcceptanceFunction(self, *args):
        return _CompuCell.Potts3D_getAcceptanceFunction(self, *args)

    def setFluctuationAmplitudeFunctionByName(self, *args):
        return _CompuCell.Potts3D_setFluctuationAmplitudeFunctionByName(self, *args)

    def registerCellGChangeWatcher(self, *args):
        return _CompuCell.Potts3D_registerCellGChangeWatcher(self, *args)

    def registerClassAccessor(self, *args):
        return _CompuCell.Potts3D_registerClassAccessor(self, *args)

    def registerStepper(self, *args):
        return _CompuCell.Potts3D_registerStepper(self, *args)

    def registerFixedStepper(self, *args):
        return _CompuCell.Potts3D_registerFixedStepper(self, *args)

    def unregisterFixedStepper(self, *args):
        return _CompuCell.Potts3D_unregisterFixedStepper(self, *args)

    def getEnergy(self, *args):
        return _CompuCell.Potts3D_getEnergy(self, *args)

    def getEnergyFunctionNames(self, *args):
        return _CompuCell.Potts3D_getEnergyFunctionNames(self, *args)

    def getCurrentEnergyChanges(self, *args):
        return _CompuCell.Potts3D_getCurrentEnergyChanges(self, *args)

    def getCurrentFlipResults(self, *args):
        return _CompuCell.Potts3D_getCurrentFlipResults(self, *args)

    def createCellG(self, *args):
        return _CompuCell.Potts3D_createCellG(self, *args)

    def createCellGSpecifiedIds(self, *args):
        return _CompuCell.Potts3D_createCellGSpecifiedIds(self, *args)

    def createCell(self, *args):
        return _CompuCell.Potts3D_createCell(self, *args)

    def createCellSpecifiedIds(self, *args):
        return _CompuCell.Potts3D_createCellSpecifiedIds(self, *args)

    def destroyCellG(self, *args):
        return _CompuCell.Potts3D_destroyCellG(self, *args)

    def getCellFactoryGroupPtr(self, *args):
        return _CompuCell.Potts3D_getCellFactoryGroupPtr(self, *args)

    def getNumCells(self, *args):
        return _CompuCell.Potts3D_getNumCells(self, *args)

    def totalEnergy(self, *args):
        return _CompuCell.Potts3D_totalEnergy(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.Potts3D_changeEnergy(self, *args)

    def metropolis(self, *args):
        return _CompuCell.Potts3D_metropolis(self, *args)
    metropolisFcnPtr = property(_CompuCell.Potts3D_metropolisFcnPtr_get, _CompuCell.Potts3D_metropolisFcnPtr_set)

    def metropolisList(self, *args):
        return _CompuCell.Potts3D_metropolisList(self, *args)

    def metropolisFast(self, *args):
        return _CompuCell.Potts3D_metropolisFast(self, *args)

    def metropolisBoundaryWalker(self, *args):
        return _CompuCell.Potts3D_metropolisBoundaryWalker(self, *args)

    def metropolisTestRun(self, *args):
        return _CompuCell.Potts3D_metropolisTestRun(self, *args)

    def setMetropolisAlgorithm(self, *args):
        return _CompuCell.Potts3D_setMetropolisAlgorithm(self, *args)

    def getCellFieldG(self, *args):
        return _CompuCell.Potts3D_getCellFieldG(self, *args)

    def getCellFieldGImpl(self, *args):
        return _CompuCell.Potts3D_getCellFieldGImpl(self, *args)

    def update(self, *args):
        return _CompuCell.Potts3D_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.Potts3D_steerableName(self, *args)

    def runSteppers(self, *args):
        return _CompuCell.Potts3D_runSteppers(self, *args)

    def getRecentlyCreatedClusterId(self, *args):
        return _CompuCell.Potts3D_getRecentlyCreatedClusterId(self, *args)

    def getRecentlyCreatedCellId(self, *args):
        return _CompuCell.Potts3D_getRecentlyCreatedCellId(self, *args)

# Register Potts3D in _CompuCell:
_CompuCell.Potts3D_swigregister(Potts3D)
class Steppable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frequency = property(_CompuCell.Steppable_frequency_get, _CompuCell.Steppable_frequency_set)

    def __init__(self, *args):
        _CompuCell.Steppable_swiginit(self, _CompuCell.new_Steppable(*args))
    __swig_destroy__ = _CompuCell.delete_Steppable

    def start(self, *args):
        return _CompuCell.Steppable_start(self, *args)

    def step(self, *args):
        return _CompuCell.Steppable_step(self, *args)

    def finish(self, *args):
        return _CompuCell.Steppable_finish(self, *args)

    def toString(self, *args):
        return _CompuCell.Steppable_toString(self, *args)

# Register Steppable in _CompuCell:
_CompuCell.Steppable_swigregister(Steppable)
class ClassRegistry(Steppable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ClassRegistry_swiginit(self, _CompuCell.new_ClassRegistry(*args))
    __swig_destroy__ = _CompuCell.delete_ClassRegistry

    def getStepper(self, *args):
        return _CompuCell.ClassRegistry_getStepper(self, *args)

    def addStepper(self, *args):
        return _CompuCell.ClassRegistry_addStepper(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ClassRegistry_extraInit(self, *args)

    def start(self, *args):
        return _CompuCell.ClassRegistry_start(self, *args)

    def step(self, *args):
        return _CompuCell.ClassRegistry_step(self, *args)

    def finish(self, *args):
        return _CompuCell.ClassRegistry_finish(self, *args)

    def initModules(self, *args):
        return _CompuCell.ClassRegistry_initModules(self, *args)

# Register ClassRegistry in _CompuCell:
_CompuCell.ClassRegistry_swigregister(ClassRegistry)
class SteerableObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.SteerableObject_swiginit(self, _CompuCell.new_SteerableObject(*args))
    __swig_destroy__ = _CompuCell.delete_SteerableObject

    def update(self, *args):
        return _CompuCell.SteerableObject_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.SteerableObject_steerableName(self, *args)

# Register SteerableObject in _CompuCell:
_CompuCell.SteerableObject_swigregister(SteerableObject)
class Simulator(Steppable):
    r"""Simulation class used for getting information about the simulation"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ps = property(_CompuCell.Simulator_ps_get, _CompuCell.Simulator_ps_set)
    ppdCC3DPtr = property(_CompuCell.Simulator_ppdCC3DPtr_get, _CompuCell.Simulator_ppdCC3DPtr_set)
    ppd = property(_CompuCell.Simulator_ppd_get, _CompuCell.Simulator_ppd_set)
    ppdPtr = property(_CompuCell.Simulator_ppdPtr_get, _CompuCell.Simulator_ppdPtr_set)
    pUtils = property(_CompuCell.Simulator_pUtils_get, _CompuCell.Simulator_pUtils_set)
    pUtilsSingle = property(_CompuCell.Simulator_pUtilsSingle_get, _CompuCell.Simulator_pUtilsSingle_set)
    output_directory = property(_CompuCell.Simulator_output_directory_get, _CompuCell.Simulator_output_directory_set)
    simValue = property(_CompuCell.Simulator_simValue_get, _CompuCell.Simulator_simValue_set)

    def setOutputDirectory(self, *args):
        return _CompuCell.Simulator_setOutputDirectory(self, *args)

    def getOutputDirectory(self, *args):
        return _CompuCell.Simulator_getOutputDirectory(self, *args)

    def getRNGSeed(self, *args):
        return _CompuCell.Simulator_getRNGSeed(self, *args)

    def setOutputRedirectionTarget(self, *args):
        return _CompuCell.Simulator_setOutputRedirectionTarget(self, *args)

    def getCerrStreamBufOrig(self, *args):
        return _CompuCell.Simulator_getCerrStreamBufOrig(self, *args)

    def restoreCerrStreamBufOrig(self, *args):
        return _CompuCell.Simulator_restoreCerrStreamBufOrig(self, *args)

    def setRestartEnabled(self, *args):
        return _CompuCell.Simulator_setRestartEnabled(self, *args)

    def getRestartEnabled(self, *args):
        return _CompuCell.Simulator_getRestartEnabled(self, *args)
    pluginManager = property(_CompuCell.Simulator_pluginManager_get, _CompuCell.Simulator_pluginManager_set)
    steppableManager = property(_CompuCell.Simulator_steppableManager_get, _CompuCell.Simulator_steppableManager_set)
    pluginBaseManager = property(_CompuCell.Simulator_pluginBaseManager_get, _CompuCell.Simulator_pluginBaseManager_set)

    def __init__(self, *args):
        r"""Simulation class used for getting information about the simulation"""
        _CompuCell.Simulator_swiginit(self, _CompuCell.new_Simulator(*args))
    __swig_destroy__ = _CompuCell.delete_Simulator

    def add_step_output(self, *args):
        return _CompuCell.Simulator_add_step_output(self, *args)

    def get_step_output(self, *args):
        return _CompuCell.Simulator_get_step_output(self, *args)

    def getRecentErrorMessage(self, *args):
        return _CompuCell.Simulator_getRecentErrorMessage(self, *args)

    def setNewPlayerFlag(self, *args):
        return _CompuCell.Simulator_setNewPlayerFlag(self, *args)

    def getNewPlayerFlag(self, *args):
        return _CompuCell.Simulator_getNewPlayerFlag(self, *args)

    def getBasePath(self, *args):
        return _CompuCell.Simulator_getBasePath(self, *args)

    def setBasePath(self, *args):
        return _CompuCell.Simulator_setBasePath(self, *args)

    def getParallelUtils(self, *args):
        return _CompuCell.Simulator_getParallelUtils(self, *args)

    def getParallelUtilsSingleThread(self, *args):
        return _CompuCell.Simulator_getParallelUtilsSingleThread(self, *args)

    def getBoundaryStrategy(self, *args):
        return _CompuCell.Simulator_getBoundaryStrategy(self, *args)

    def registerSteerableObject(self, *args):
        return _CompuCell.Simulator_registerSteerableObject(self, *args)

    def unregisterSteerableObject(self, *args):
        return _CompuCell.Simulator_unregisterSteerableObject(self, *args)

    def getSteerableObject(self, *args):
        return _CompuCell.Simulator_getSteerableObject(self, *args)

    def setNumSteps(self, *args):
        return _CompuCell.Simulator_setNumSteps(self, *args)

    def getNumSteps(self, *args):
        r"""Returns the number of Monte Carlo steps the simulation will perform"""
        return _CompuCell.Simulator_getNumSteps(self, *args)

    def getStep(self, *args):
        r"""Returns the current Monte Carlo step"""
        return _CompuCell.Simulator_getStep(self, *args)

    def setStep(self, *args):
        return _CompuCell.Simulator_setStep(self, *args)

    def isStepping(self, *args):
        r"""Returns a bool value on the condition of whether the simulation is currently running"""
        return _CompuCell.Simulator_isStepping(self, *args)

    def getFlip2DimRatio(self, *args):
        return _CompuCell.Simulator_getFlip2DimRatio(self, *args)

    def setRandomSeed(self, *args):
        return _CompuCell.Simulator_setRandomSeed(self, *args)

    def getRandomSeed(self, *args):
        return _CompuCell.Simulator_getRandomSeed(self, *args)

    def generateRandomNumberGenerator(self, *args):
        return _CompuCell.Simulator_generateRandomNumberGenerator(self, *args)

    def getRandomNumberGeneratorInstance(self, *args):
        return _CompuCell.Simulator_getRandomNumberGeneratorInstance(self, *args)

    def getPotts(self, *args):
        r"""Returns a pointer to the Potts class"""
        return _CompuCell.Simulator_getPotts(self, *args)

    def getSimulatorPtr(self, *args):
        return _CompuCell.Simulator_getSimulatorPtr(self, *args)

    def getClassRegistry(self, *args):
        return _CompuCell.Simulator_getClassRegistry(self, *args)

    def formatErrorMessage(self, *args):
        return _CompuCell.Simulator_formatErrorMessage(self, *args)

    def registerConcentrationField(self, *args):
        return _CompuCell.Simulator_registerConcentrationField(self, *args)

    def getConcentrationFieldNameMap(self, *args):
        return _CompuCell.Simulator_getConcentrationFieldNameMap(self, *args)

    def postEvent(self, *args):
        return _CompuCell.Simulator_postEvent(self, *args)

    def getConcentrationFieldNameVector(self, *args):
        return _CompuCell.Simulator_getConcentrationFieldNameVector(self, *args)

    def getConcentrationFieldByName(self, *args):
        return _CompuCell.Simulator_getConcentrationFieldByName(self, *args)

    def registerSerializer(self, *args):
        return _CompuCell.Simulator_registerSerializer(self, *args)

    def serialize(self, *args):
        return _CompuCell.Simulator_serialize(self, *args)

    def start(self, *args):
        return _CompuCell.Simulator_start(self, *args)

    def extraInit(self, *args):
        return _CompuCell.Simulator_extraInit(self, *args)

    def step(self, *args):
        return _CompuCell.Simulator_step(self, *args)

    def finish(self, *args):
        return _CompuCell.Simulator_finish(self, *args)

    def cleanAfterSimulation(self, *args):
        return _CompuCell.Simulator_cleanAfterSimulation(self, *args)

    def unloadModules(self, *args):
        return _CompuCell.Simulator_unloadModules(self, *args)

    def initializePottsCC3D(self, *args):
        return _CompuCell.Simulator_initializePottsCC3D(self, *args)

    def processMetadataCC3D(self, *args):
        return _CompuCell.Simulator_processMetadataCC3D(self, *args)

    def initializeCC3D(self, *args):
        return _CompuCell.Simulator_initializeCC3D(self, *args)

    def setPottsParseData(self, *args):
        return _CompuCell.Simulator_setPottsParseData(self, *args)

    def getCC3DModuleData(self, *args):
        return _CompuCell.Simulator_getCC3DModuleData(self, *args)

    def updateCC3DModule(self, *args):
        return _CompuCell.Simulator_updateCC3DModule(self, *args)

    def steer(self, *args):
        return _CompuCell.Simulator_steer(self, *args)

# Register Simulator in _CompuCell:
_CompuCell.Simulator_swigregister(Simulator)
BASE = _CompuCell.BASE
LATTICE_RESIZE = _CompuCell.LATTICE_RESIZE
CHANGE_NUMBER_OF_WORK_NODES = _CompuCell.CHANGE_NUMBER_OF_WORK_NODES
class CC3DEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CC3DEvent_swiginit(self, _CompuCell.new_CC3DEvent(*args))
    id = property(_CompuCell.CC3DEvent_id_get, _CompuCell.CC3DEvent_id_set)
    __swig_destroy__ = _CompuCell.delete_CC3DEvent

# Register CC3DEvent in _CompuCell:
_CompuCell.CC3DEvent_swigregister(CC3DEvent)
class CC3DEventLatticeResize(CC3DEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CC3DEventLatticeResize_swiginit(self, _CompuCell.new_CC3DEventLatticeResize(*args))
    newDim = property(_CompuCell.CC3DEventLatticeResize_newDim_get, _CompuCell.CC3DEventLatticeResize_newDim_set)
    oldDim = property(_CompuCell.CC3DEventLatticeResize_oldDim_get, _CompuCell.CC3DEventLatticeResize_oldDim_set)
    shiftVec = property(_CompuCell.CC3DEventLatticeResize_shiftVec_get, _CompuCell.CC3DEventLatticeResize_shiftVec_set)
    __swig_destroy__ = _CompuCell.delete_CC3DEventLatticeResize

# Register CC3DEventLatticeResize in _CompuCell:
_CompuCell.CC3DEventLatticeResize_swigregister(CC3DEventLatticeResize)
class CC3DEventChangeNumberOfWorkNodes(CC3DEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CC3DEventChangeNumberOfWorkNodes_swiginit(self, _CompuCell.new_CC3DEventChangeNumberOfWorkNodes(*args))
    oldNumberOfNodes = property(_CompuCell.CC3DEventChangeNumberOfWorkNodes_oldNumberOfNodes_get, _CompuCell.CC3DEventChangeNumberOfWorkNodes_oldNumberOfNodes_set)
    newNumberOfNodes = property(_CompuCell.CC3DEventChangeNumberOfWorkNodes_newNumberOfNodes_get, _CompuCell.CC3DEventChangeNumberOfWorkNodes_newNumberOfNodes_set)
    __swig_destroy__ = _CompuCell.delete_CC3DEventChangeNumberOfWorkNodes

# Register CC3DEventChangeNumberOfWorkNodes in _CompuCell:
_CompuCell.CC3DEventChangeNumberOfWorkNodes_swigregister(CC3DEventChangeNumberOfWorkNodes)
class ParseData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ParseData_swiginit(self, _CompuCell.new_ParseData(*args))
    moduleName = property(_CompuCell.ParseData_moduleName_get, _CompuCell.ParseData_moduleName_set)
    frequency = property(_CompuCell.ParseData_frequency_get, _CompuCell.ParseData_frequency_set)

    def Frequency(self, *args):
        return _CompuCell.ParseData_Frequency(self, *args)

    def ModuleName(self, *args):
        return _CompuCell.ParseData_ModuleName(self, *args)
    __swig_destroy__ = _CompuCell.delete_ParseData

# Register ParseData in _CompuCell:
_CompuCell.ParseData_swigregister(ParseData)
class ParserStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ParserStorage_swiginit(self, _CompuCell.new_ParserStorage(*args))
    steppableCC3DXMLElementVector = property(_CompuCell.ParserStorage_steppableCC3DXMLElementVector_get, _CompuCell.ParserStorage_steppableCC3DXMLElementVector_set)
    pluginCC3DXMLElementVector = property(_CompuCell.ParserStorage_pluginCC3DXMLElementVector_get, _CompuCell.ParserStorage_pluginCC3DXMLElementVector_set)
    pottsCC3DXMLElement = property(_CompuCell.ParserStorage_pottsCC3DXMLElement_get, _CompuCell.ParserStorage_pottsCC3DXMLElement_set)
    metadataCC3DXMLElement = property(_CompuCell.ParserStorage_metadataCC3DXMLElement_get, _CompuCell.ParserStorage_metadataCC3DXMLElement_set)
    updateSteppableCC3DXMLElementVector = property(_CompuCell.ParserStorage_updateSteppableCC3DXMLElementVector_get, _CompuCell.ParserStorage_updateSteppableCC3DXMLElementVector_set)
    updatePluginCC3DXMLElementVector = property(_CompuCell.ParserStorage_updatePluginCC3DXMLElementVector_get, _CompuCell.ParserStorage_updatePluginCC3DXMLElementVector_set)
    updatePottsCC3DXMLElement = property(_CompuCell.ParserStorage_updatePottsCC3DXMLElement_get, _CompuCell.ParserStorage_updatePottsCC3DXMLElement_set)
    updateMetadataCC3DXMLElement = property(_CompuCell.ParserStorage_updateMetadataCC3DXMLElement_get, _CompuCell.ParserStorage_updateMetadataCC3DXMLElement_set)

    def addPottsDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addPottsDataCC3D(self, *args)

    def addMetadataDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addMetadataDataCC3D(self, *args)

    def addPluginDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addPluginDataCC3D(self, *args)

    def addSteppableDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addSteppableDataCC3D(self, *args)
    __swig_destroy__ = _CompuCell.delete_ParserStorage

# Register ParserStorage in _CompuCell:
_CompuCell.ParserStorage_swigregister(ParserStorage)
class EnergyFunctionCalculatorParseData(ParseData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.EnergyFunctionCalculatorParseData_swiginit(self, _CompuCell.new_EnergyFunctionCalculatorParseData(*args))
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionCalculatorParseData

# Register EnergyFunctionCalculatorParseData in _CompuCell:
_CompuCell.EnergyFunctionCalculatorParseData_swigregister(EnergyFunctionCalculatorParseData)
class EnergyFunctionCalculatorStatisticsParseData(EnergyFunctionCalculatorParseData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.EnergyFunctionCalculatorStatisticsParseData_swiginit(self, _CompuCell.new_EnergyFunctionCalculatorStatisticsParseData(*args))
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionCalculatorStatisticsParseData

    def OutputFileName(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputFileName(self, *args)

    def OutputCoreFileNameSpinFlips(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputCoreFileNameSpinFlips(self, *args)

    def GatherResults(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_GatherResults(self, *args)

    def OutputAccepted(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputAccepted(self, *args)

    def OutputRejected(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputRejected(self, *args)

    def OutputTotal(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputTotal(self, *args)
    outFileName = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileName_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileName_set)
    analysisFrequency = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_analysisFrequency_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_analysisFrequency_set)
    singleSpinFrequency = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_singleSpinFrequency_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_singleSpinFrequency_set)
    gatherResultsSpinFlip = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_gatherResultsSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_gatherResultsSpinFlip_set)
    outputAcceptedSpinFlip = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputAcceptedSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputAcceptedSpinFlip_set)
    outputRejectedSpinFlip = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputRejectedSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputRejectedSpinFlip_set)
    outputTotalSpinFlip = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputTotalSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputTotalSpinFlip_set)
    outputEverySpinFlip = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputEverySpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputEverySpinFlip_set)
    outFileCoreNameSpinFlips = property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileCoreNameSpinFlips_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileCoreNameSpinFlips_set)

# Register EnergyFunctionCalculatorStatisticsParseData in _CompuCell:
_CompuCell.EnergyFunctionCalculatorStatisticsParseData_swigregister(EnergyFunctionCalculatorStatisticsParseData)
class PottsParseData(ParseData):
    r"""
    Class used for defining lattice and simulation.  Gives access to public member variables: Frequency, acceptanceFunctionName, 
    algorithmName, anneal, boundary_x, boundary_y, boundary_z, debugOutputFrequency, depth, depthFlag, dim, energyFcnParseDataPtr, 
    flip2DimRatio, frequency, getEnergyFunctionCalculatorStatisticsParseData, kBoltzman, latticeType, moduleName, neighborOrder, 
    numSteps, offset, seed, shapeAlgorithm, shapeFlag,   shapeIndex, shapeInputfile, shapeReg, shapeSize, temperature
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Class used for defining lattice and simulation.  Gives access to public member variables: Frequency, acceptanceFunctionName, 
        algorithmName, anneal, boundary_x, boundary_y, boundary_z, debugOutputFrequency, depth, depthFlag, dim, energyFcnParseDataPtr, 
        flip2DimRatio, frequency, getEnergyFunctionCalculatorStatisticsParseData, kBoltzman, latticeType, moduleName, neighborOrder, 
        numSteps, offset, seed, shapeAlgorithm, shapeFlag,   shapeIndex, shapeInputfile, shapeReg, shapeSize, temperature
        """
        _CompuCell.PottsParseData_swiginit(self, _CompuCell.new_PottsParseData(*args))
    __swig_destroy__ = _CompuCell.delete_PottsParseData

    def getEnergyFunctionCalculatorStatisticsParseData(self, *args):
        return _CompuCell.PottsParseData_getEnergyFunctionCalculatorStatisticsParseData(self, *args)
    numSteps = property(_CompuCell.PottsParseData_numSteps_get, _CompuCell.PottsParseData_numSteps_set)
    anneal = property(_CompuCell.PottsParseData_anneal_get, _CompuCell.PottsParseData_anneal_set)
    flip2DimRatio = property(_CompuCell.PottsParseData_flip2DimRatio_get, _CompuCell.PottsParseData_flip2DimRatio_set)
    temperature = property(_CompuCell.PottsParseData_temperature_get, _CompuCell.PottsParseData_temperature_set)
    depth = property(_CompuCell.PottsParseData_depth_get, _CompuCell.PottsParseData_depth_set)
    depthFlag = property(_CompuCell.PottsParseData_depthFlag_get, _CompuCell.PottsParseData_depthFlag_set)
    seed = property(_CompuCell.PottsParseData_seed_get, _CompuCell.PottsParseData_seed_set)
    debugOutputFrequency = property(_CompuCell.PottsParseData_debugOutputFrequency_get, _CompuCell.PottsParseData_debugOutputFrequency_set)
    boundary_x = property(_CompuCell.PottsParseData_boundary_x_get, _CompuCell.PottsParseData_boundary_x_set)
    boundary_y = property(_CompuCell.PottsParseData_boundary_y_get, _CompuCell.PottsParseData_boundary_y_set)
    boundary_z = property(_CompuCell.PottsParseData_boundary_z_get, _CompuCell.PottsParseData_boundary_z_set)
    algorithmName = property(_CompuCell.PottsParseData_algorithmName_get, _CompuCell.PottsParseData_algorithmName_set)
    latticeType = property(_CompuCell.PottsParseData_latticeType_get, _CompuCell.PottsParseData_latticeType_set)
    acceptanceFunctionName = property(_CompuCell.PottsParseData_acceptanceFunctionName_get, _CompuCell.PottsParseData_acceptanceFunctionName_set)
    fluctuationAmplitudeFunctionName = property(_CompuCell.PottsParseData_fluctuationAmplitudeFunctionName_get, _CompuCell.PottsParseData_fluctuationAmplitudeFunctionName_set)
    shapeFlag = property(_CompuCell.PottsParseData_shapeFlag_get, _CompuCell.PottsParseData_shapeFlag_set)
    shapeAlgorithm = property(_CompuCell.PottsParseData_shapeAlgorithm_get, _CompuCell.PottsParseData_shapeAlgorithm_set)
    shapeIndex = property(_CompuCell.PottsParseData_shapeIndex_get, _CompuCell.PottsParseData_shapeIndex_set)
    shapeSize = property(_CompuCell.PottsParseData_shapeSize_get, _CompuCell.PottsParseData_shapeSize_set)
    shapeInputfile = property(_CompuCell.PottsParseData_shapeInputfile_get, _CompuCell.PottsParseData_shapeInputfile_set)
    shapeReg = property(_CompuCell.PottsParseData_shapeReg_get, _CompuCell.PottsParseData_shapeReg_set)
    offset = property(_CompuCell.PottsParseData_offset_get, _CompuCell.PottsParseData_offset_set)
    kBoltzman = property(_CompuCell.PottsParseData_kBoltzman_get, _CompuCell.PottsParseData_kBoltzman_set)
    neighborOrder = property(_CompuCell.PottsParseData_neighborOrder_get, _CompuCell.PottsParseData_neighborOrder_set)
    cellTypeMotilityVector = property(_CompuCell.PottsParseData_cellTypeMotilityVector_get, _CompuCell.PottsParseData_cellTypeMotilityVector_set)
    dim = property(_CompuCell.PottsParseData_dim_get, _CompuCell.PottsParseData_dim_set)
    energyFcnParseDataPtr = property(_CompuCell.PottsParseData_energyFcnParseDataPtr_get, _CompuCell.PottsParseData_energyFcnParseDataPtr_set)

    def Dimensions(self, *args):
        return _CompuCell.PottsParseData_Dimensions(self, *args)

    def Steps(self, *args):
        return _CompuCell.PottsParseData_Steps(self, *args)

    def Anneal(self, *args):
        return _CompuCell.PottsParseData_Anneal(self, *args)

    def FlipNeighborMaxDistance(self, *args):
        return _CompuCell.PottsParseData_FlipNeighborMaxDistance(self, *args)

    def Flip2DimRatio(self, *args):
        return _CompuCell.PottsParseData_Flip2DimRatio(self, *args)

    def Temperature(self, *args):
        return _CompuCell.PottsParseData_Temperature(self, *args)

    def KBoltzman(self, *args):
        return _CompuCell.PottsParseData_KBoltzman(self, *args)

    def Offset(self, *args):
        return _CompuCell.PottsParseData_Offset(self, *args)

    def NeighborOrder(self, *args):
        return _CompuCell.PottsParseData_NeighborOrder(self, *args)

    def LatticeType(self, *args):
        return _CompuCell.PottsParseData_LatticeType(self, *args)

    def AcceptanceFunctionName(self, *args):
        return _CompuCell.PottsParseData_AcceptanceFunctionName(self, *args)

    def FluctuationAmplitudeFunctionName(self, *args):
        return _CompuCell.PottsParseData_FluctuationAmplitudeFunctionName(self, *args)

    def RandomSeed(self, *args):
        return _CompuCell.PottsParseData_RandomSeed(self, *args)

    def DebugOutputFrequency(self, *args):
        return _CompuCell.PottsParseData_DebugOutputFrequency(self, *args)

    def Boundary_x(self, *args):
        return _CompuCell.PottsParseData_Boundary_x(self, *args)

    def Boundary_y(self, *args):
        return _CompuCell.PottsParseData_Boundary_y(self, *args)

    def Boundary_z(self, *args):
        return _CompuCell.PottsParseData_Boundary_z(self, *args)

    def MetropolisAlgorithm(self, *args):
        return _CompuCell.PottsParseData_MetropolisAlgorithm(self, *args)

    def Shape(self, *args):
        return _CompuCell.PottsParseData_Shape(self, *args)

# Register PottsParseData in _CompuCell:
_CompuCell.PottsParseData_swigregister(PottsParseData)

def findMin(*args):
    return _CompuCell.findMin(*args)

def dist(*args):
    return _CompuCell.dist(*args)

def solveCubicEquationRealCoeeficients(*args):
    return _CompuCell.solveCubicEquationRealCoeeficients(*args)

def RandomUnitVector2D(*args):
    return _CompuCell.RandomUnitVector2D(*args)

def RandomUnitVector3D(*args):
    return _CompuCell.RandomUnitVector3D(*args)
class InertiaTensorComponents(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.InertiaTensorComponents_swiginit(self, _CompuCell.new_InertiaTensorComponents(*args))
    iXX = property(_CompuCell.InertiaTensorComponents_iXX_get, _CompuCell.InertiaTensorComponents_iXX_set)
    iYY = property(_CompuCell.InertiaTensorComponents_iYY_get, _CompuCell.InertiaTensorComponents_iYY_set)
    iZZ = property(_CompuCell.InertiaTensorComponents_iZZ_get, _CompuCell.InertiaTensorComponents_iZZ_set)
    iXY = property(_CompuCell.InertiaTensorComponents_iXY_get, _CompuCell.InertiaTensorComponents_iXY_set)
    iXZ = property(_CompuCell.InertiaTensorComponents_iXZ_get, _CompuCell.InertiaTensorComponents_iXZ_set)
    iYZ = property(_CompuCell.InertiaTensorComponents_iYZ_get, _CompuCell.InertiaTensorComponents_iYZ_set)
    __swig_destroy__ = _CompuCell.delete_InertiaTensorComponents

# Register InertiaTensorComponents in _CompuCell:
_CompuCell.InertiaTensorComponents_swigregister(InertiaTensorComponents)

def precalculateCentroid(*args):
    return _CompuCell.precalculateCentroid(*args)

def distInvariantCM(*args):
    return _CompuCell.distInvariantCM(*args)

def distanceVectorInvariant(*args):
    return _CompuCell.distanceVectorInvariant(*args)

def distanceVectorCoordinatesInvariant(*args):
    return _CompuCell.distanceVectorCoordinatesInvariant(*args)

def unconditionalDistanceVectorInvariant(*args):
    return _CompuCell.unconditionalDistanceVectorInvariant(*args)

def unconditionalDistanceVectorCoordinatesInvariant(*args):
    return _CompuCell.unconditionalDistanceVectorCoordinatesInvariant(*args)

def precalculateInertiaTensorComponentsAfterFlip(*args):
    return _CompuCell.precalculateInertiaTensorComponentsAfterFlip(*args)

def precalculateAfterFlipCM(*args):
    return _CompuCell.precalculateAfterFlipCM(*args)

def cellVelocity(*args):
    return _CompuCell.cellVelocity(*args)
class Vector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Vector3_swiginit(self, _CompuCell.new_Vector3(*args))
    __swig_destroy__ = _CompuCell.delete_Vector3

    def __call__(self, *args):
        return _CompuCell.Vector3___call__(self, *args)

    def Perp(self, *args):
        return _CompuCell.Vector3_Perp(self, *args)

    def Perp2(self, *args):
        return _CompuCell.Vector3_Perp2(self, *args)

    def SetXYZ(self, *args):
        return _CompuCell.Vector3_SetXYZ(self, *args)

    def Phi(self, *args):
        return _CompuCell.Vector3_Phi(self, *args)

    def Theta(self, *args):
        return _CompuCell.Vector3_Theta(self, *args)

    def CosTheta(self, *args):
        return _CompuCell.Vector3_CosTheta(self, *args)

    def Mag2(self, *args):
        return _CompuCell.Vector3_Mag2(self, *args)

    def Mag(self, *args):
        return _CompuCell.Vector3_Mag(self, *args)

    def SetPhi(self, *args):
        return _CompuCell.Vector3_SetPhi(self, *args)

    def SetTheta(self, *args):
        return _CompuCell.Vector3_SetTheta(self, *args)

    def SetMag(self, *args):
        return _CompuCell.Vector3_SetMag(self, *args)

    def SetMagThetaPhi(self, *args):
        return _CompuCell.Vector3_SetMagThetaPhi(self, *args)

    def __eq__(self, *args):
        return _CompuCell.Vector3___eq__(self, *args)

    def __ne__(self, *args):
        return _CompuCell.Vector3___ne__(self, *args)

    def __iadd__(self, *args):
        return _CompuCell.Vector3___iadd__(self, *args)

    def __isub__(self, *args):
        return _CompuCell.Vector3___isub__(self, *args)

    def __neg__(self, *args):
        return _CompuCell.Vector3___neg__(self, *args)

    def __imul__(self, *args):
        return _CompuCell.Vector3___imul__(self, *args)

    def Unit(self, *args):
        return _CompuCell.Vector3_Unit(self, *args)

    def Orthogonal(self, *args):
        return _CompuCell.Vector3_Orthogonal(self, *args)

    def Dot(self, *args):
        return _CompuCell.Vector3_Dot(self, *args)

    def Cross(self, *args):
        return _CompuCell.Vector3_Cross(self, *args)

    def Angle(self, *args):
        return _CompuCell.Vector3_Angle(self, *args)

    def RotateX(self, *args):
        return _CompuCell.Vector3_RotateX(self, *args)

    def RotateY(self, *args):
        return _CompuCell.Vector3_RotateY(self, *args)

    def RotateZ(self, *args):
        return _CompuCell.Vector3_RotateZ(self, *args)

    def RotateUz(self, *args):
        return _CompuCell.Vector3_RotateUz(self, *args)
    fX = property(_CompuCell.Vector3_fX_get, _CompuCell.Vector3_fX_set)
    fY = property(_CompuCell.Vector3_fY_get, _CompuCell.Vector3_fY_set)
    fZ = property(_CompuCell.Vector3_fZ_get, _CompuCell.Vector3_fZ_set)

# Register Vector3 in _CompuCell:
_CompuCell.Vector3_swigregister(Vector3)
class CellInventoryWatcherDir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    forwarder = property(_CompuCell.CellInventoryWatcherDir_forwarder_get, _CompuCell.CellInventoryWatcherDir_forwarder_set)

    def __init__(self, *args):
        if self.__class__ == CellInventoryWatcherDir:
            _self = None
        else:
            _self = self
        _CompuCell.CellInventoryWatcherDir_swiginit(self, _CompuCell.new_CellInventoryWatcherDir(_self, *args))

    def onCellAdd(self, *args):
        return _CompuCell.CellInventoryWatcherDir_onCellAdd(self, *args)

    def onCellRemove(self, *args):
        return _CompuCell.CellInventoryWatcherDir_onCellRemove(self, *args)
    __swig_destroy__ = _CompuCell.delete_CellInventoryWatcherDir
    def __disown__(self):
        self.this.disown()
        _CompuCell.disown_CellInventoryWatcherDir(self)
        return weakref.proxy(self)

# Register CellInventoryWatcherDir in _CompuCell:
_CompuCell.CellInventoryWatcherDir_swigregister(CellInventoryWatcherDir)

def makeCellInventoryWatcher(*args):
    return _CompuCell.makeCellInventoryWatcher(*args)

def getConcentrationField(*args):
    return _CompuCell.getConcentrationField(*args)

def getConcentrationFieldNames(*args):
    return _CompuCell.getConcentrationFieldNames(*args)

def updateFluctuationCompensators(*args):
    return _CompuCell.updateFluctuationCompensators(*args)

def areCellsDifferent(*args):
    return _CompuCell.areCellsDifferent(*args)

def getMediumCell(*args):
    return _CompuCell.getMediumCell(*args)
class cellInvPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.cellInvPyItr_current_get, _CompuCell.cellInvPyItr_current_set)
    begin = property(_CompuCell.cellInvPyItr_begin_get, _CompuCell.cellInvPyItr_begin_set)
    end = property(_CompuCell.cellInvPyItr_end_get, _CompuCell.cellInvPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.cellInvPyItr_swiginit(self, _CompuCell.new_cellInvPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.cellInvPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.cellInvPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.cellInvPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.cellInvPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.cellInvPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.cellInvPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.cellInvPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.cellInvPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.cellInvPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_cellInvPyItr

# Register cellInvPyItr in _CompuCell:
_CompuCell.cellInvPyItr_swigregister(cellInvPyItr)
class pairLongCellGPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.pairLongCellGPtr_swiginit(self, _CompuCell.new_pairLongCellGPtr(*args))
    first = property(_CompuCell.pairLongCellGPtr_first_get)
    second = property(_CompuCell.pairLongCellGPtr_second_get, _CompuCell.pairLongCellGPtr_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CompuCell.delete_pairLongCellGPtr

# Register pairLongCellGPtr in _CompuCell:
_CompuCell.pairLongCellGPtr_swigregister(pairLongCellGPtr)
class mapLongCellGPtrPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.mapLongCellGPtrPyItr_current_get, _CompuCell.mapLongCellGPtrPyItr_current_set)
    begin = property(_CompuCell.mapLongCellGPtrPyItr_begin_get, _CompuCell.mapLongCellGPtrPyItr_begin_set)
    end = property(_CompuCell.mapLongCellGPtrPyItr_end_get, _CompuCell.mapLongCellGPtrPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.mapLongCellGPtrPyItr_swiginit(self, _CompuCell.new_mapLongCellGPtrPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongCellGPtrPyItr

# Register mapLongCellGPtrPyItr in _CompuCell:
_CompuCell.mapLongCellGPtrPyItr_swigregister(mapLongCellGPtrPyItr)
class compartmentinventoryPtrPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.compartmentinventoryPtrPyItr_current_get, _CompuCell.compartmentinventoryPtrPyItr_current_set)
    begin = property(_CompuCell.compartmentinventoryPtrPyItr_begin_get, _CompuCell.compartmentinventoryPtrPyItr_begin_set)
    end = property(_CompuCell.compartmentinventoryPtrPyItr_end_get, _CompuCell.compartmentinventoryPtrPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.compartmentinventoryPtrPyItr_swiginit(self, _CompuCell.new_compartmentinventoryPtrPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_compartmentinventoryPtrPyItr

# Register compartmentinventoryPtrPyItr in _CompuCell:
_CompuCell.compartmentinventoryPtrPyItr_swigregister(compartmentinventoryPtrPyItr)
class STLPyIteratorCINV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.STLPyIteratorCINV_current_get, _CompuCell.STLPyIteratorCINV_current_set)
    begin = property(_CompuCell.STLPyIteratorCINV_begin_get, _CompuCell.STLPyIteratorCINV_begin_set)
    end = property(_CompuCell.STLPyIteratorCINV_end_get, _CompuCell.STLPyIteratorCINV_end_set)

    def __init__(self, *args):
        _CompuCell.STLPyIteratorCINV_swiginit(self, _CompuCell.new_STLPyIteratorCINV(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.STLPyIteratorCINV_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.STLPyIteratorCINV_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.STLPyIteratorCINV_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.STLPyIteratorCINV_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.STLPyIteratorCINV_setToBegin(self, *args)

    def previous(self, *args):
        return _CompuCell.STLPyIteratorCINV_previous(self, *args)

    def next(self, *args):
        return _CompuCell.STLPyIteratorCINV_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_STLPyIteratorCINV

# Register STLPyIteratorCINV in _CompuCell:
_CompuCell.STLPyIteratorCINV_swigregister(STLPyIteratorCINV)
class STLPyIteratorCOMPARTMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.STLPyIteratorCOMPARTMENT_current_get, _CompuCell.STLPyIteratorCOMPARTMENT_current_set)
    begin = property(_CompuCell.STLPyIteratorCOMPARTMENT_begin_get, _CompuCell.STLPyIteratorCOMPARTMENT_begin_set)
    end = property(_CompuCell.STLPyIteratorCOMPARTMENT_end_get, _CompuCell.STLPyIteratorCOMPARTMENT_end_set)

    def __init__(self, *args):
        _CompuCell.STLPyIteratorCOMPARTMENT_swiginit(self, _CompuCell.new_STLPyIteratorCOMPARTMENT(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_setToBegin(self, *args)

    def previous(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_previous(self, *args)

    def next(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_STLPyIteratorCOMPARTMENT

# Register STLPyIteratorCOMPARTMENT in _CompuCell:
_CompuCell.STLPyIteratorCOMPARTMENT_swigregister(STLPyIteratorCOMPARTMENT)

def initializePlugins(*args):
    return _CompuCell.initializePlugins(*args)

def assignParseDataPtr(*args):
    return _CompuCell.assignParseDataPtr(*args)

def printModuleName(*args):
    return _CompuCell.printModuleName(*args)
class Array3DLinearFortranField3DAdapter(floatfieldImpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Array3DLinearFortranField3DAdapter_swiginit(self, _CompuCell.new_Array3DLinearFortranField3DAdapter(*args))
    __swig_destroy__ = _CompuCell.delete_Array3DLinearFortranField3DAdapter

    def allocateMemory(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_allocateMemory(self, *args)

    def setDim(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_resizeAndShift(self, *args)

    def getContainerRef(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getContainerRef(self, *args)

    def getContainerArrayPtr(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getContainerArrayPtr(self, *args)

    def index(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_index(self, *args)

    def getDim(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_isValid(self, *args)

    def set(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_set(self, *args)

    def get(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_get(self, *args)

    def setQuick(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_setQuick(self, *args)

    def getQuick(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getQuick(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_setByIndex(self, *args)

# Register Array3DLinearFortranField3DAdapter in _CompuCell:
_CompuCell.Array3DLinearFortranField3DAdapter_swigregister(Array3DLinearFortranField3DAdapter)
class Array2DLinearFortranField3DAdapter(floatfieldImpl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Array2DLinearFortranField3DAdapter_swiginit(self, _CompuCell.new_Array2DLinearFortranField3DAdapter(*args))
    __swig_destroy__ = _CompuCell.delete_Array2DLinearFortranField3DAdapter

    def allocateMemory(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_allocateMemory(self, *args)

    def setDim(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_resizeAndShift(self, *args)

    def getContainerRef(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getContainerRef(self, *args)

    def getContainerArrayPtr(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getContainerArrayPtr(self, *args)

    def index(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_index(self, *args)

    def getDim(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_isValid(self, *args)

    def set(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_set(self, *args)

    def get(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_get(self, *args)

    def setQuick(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_setQuick(self, *args)

    def getQuick(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getQuick(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_setByIndex(self, *args)

# Register Array2DLinearFortranField3DAdapter in _CompuCell:
_CompuCell.Array2DLinearFortranField3DAdapter_swigregister(Array2DLinearFortranField3DAdapter)
class PyCompuCellObjAdapter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PyCompuCellObjAdapter_swiginit(self, _CompuCell.new_PyCompuCellObjAdapter(*args))
    __swig_destroy__ = _CompuCell.delete_PyCompuCellObjAdapter

    def setPotts(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_setPotts(self, *args)

    def setSimulator(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_setSimulator(self, *args)

    def registerPyObject(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_registerPyObject(self, *args)

    def isNewCellValid(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_isNewCellValid(self, *args)

    def isOldCellValid(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_isOldCellValid(self, *args)

    def isCellMedium(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_isCellMedium(self, *args)

    def getNewCell(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getNewCell(self, *args)

    def getOldCell(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getOldCell(self, *args)

    def getFlipNeighbor(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getFlipNeighbor(self, *args)

    def getChangePoint(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getChangePoint(self, *args)

    def getNewType(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getNewType(self, *args)
    sim = property(_CompuCell.PyCompuCellObjAdapter_sim_get, _CompuCell.PyCompuCellObjAdapter_sim_set)
    potts = property(_CompuCell.PyCompuCellObjAdapter_potts_get, _CompuCell.PyCompuCellObjAdapter_potts_set)

# Register PyCompuCellObjAdapter in _CompuCell:
_CompuCell.PyCompuCellObjAdapter_swigregister(PyCompuCellObjAdapter)
class EnergyFunctionPyWrapper(PyCompuCellObjAdapter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.EnergyFunctionPyWrapper_swiginit(self, _CompuCell.new_EnergyFunctionPyWrapper(*args))
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionPyWrapper

    def getEnergyFunctionPyWrapperPtr(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_getEnergyFunctionPyWrapperPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_changeEnergy(self, *args)

    def localEnergy(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_localEnergy(self, *args)

    def registerPyEnergyFunction(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_registerPyEnergyFunction(self, *args)

# Register EnergyFunctionPyWrapper in _CompuCell:
_CompuCell.EnergyFunctionPyWrapper_swigregister(EnergyFunctionPyWrapper)
class ChangeWatcherPyWrapper(PyCompuCellObjAdapter, CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ChangeWatcherPyWrapper_swiginit(self, _CompuCell.new_ChangeWatcherPyWrapper(*args))
    __swig_destroy__ = _CompuCell.delete_ChangeWatcherPyWrapper

    def field3DChange(self, *args):
        return _CompuCell.ChangeWatcherPyWrapper_field3DChange(self, *args)

    def getChangeWatcherPyWrapperPtr(self, *args):
        return _CompuCell.ChangeWatcherPyWrapper_getChangeWatcherPyWrapperPtr(self, *args)

    def registerPyChangeWatcher(self, *args):
        return _CompuCell.ChangeWatcherPyWrapper_registerPyChangeWatcher(self, *args)

# Register ChangeWatcherPyWrapper in _CompuCell:
_CompuCell.ChangeWatcherPyWrapper_swigregister(ChangeWatcherPyWrapper)
class TypeChangeWatcherPyWrapper(PyCompuCellObjAdapter, TypeChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.TypeChangeWatcherPyWrapper_swiginit(self, _CompuCell.new_TypeChangeWatcherPyWrapper(*args))
    __swig_destroy__ = _CompuCell.delete_TypeChangeWatcherPyWrapper

    def typeChange(self, *args):
        return _CompuCell.TypeChangeWatcherPyWrapper_typeChange(self, *args)

    def getTypeChangeWatcherPyWrapperPtr(self, *args):
        return _CompuCell.TypeChangeWatcherPyWrapper_getTypeChangeWatcherPyWrapperPtr(self, *args)

    def registerPyTypeChangeWatcher(self, *args):
        return _CompuCell.TypeChangeWatcherPyWrapper_registerPyTypeChangeWatcher(self, *args)

# Register TypeChangeWatcherPyWrapper in _CompuCell:
_CompuCell.TypeChangeWatcherPyWrapper_swigregister(TypeChangeWatcherPyWrapper)
class StepperPyWrapper(PyCompuCellObjAdapter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.StepperPyWrapper_swiginit(self, _CompuCell.new_StepperPyWrapper(*args))
    __swig_destroy__ = _CompuCell.delete_StepperPyWrapper

    def step(self, *args):
        return _CompuCell.StepperPyWrapper_step(self, *args)

    def getStepperPyWrapperPtr(self, *args):
        return _CompuCell.StepperPyWrapper_getStepperPyWrapperPtr(self, *args)

    def registerPyStepper(self, *args):
        return _CompuCell.StepperPyWrapper_registerPyStepper(self, *args)

# Register StepperPyWrapper in _CompuCell:
_CompuCell.StepperPyWrapper_swigregister(StepperPyWrapper)
class DiffusableVectorFloat(Steppable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.DiffusableVectorFloat_swiginit(self, _CompuCell.new_DiffusableVectorFloat(*args))
    __swig_destroy__ = _CompuCell.delete_DiffusableVectorFloat

    def getConcentrationField(self, *args):
        return _CompuCell.DiffusableVectorFloat_getConcentrationField(self, *args)

    def allocateDiffusableFieldVector(self, *args):
        return _CompuCell.DiffusableVectorFloat_allocateDiffusableFieldVector(self, *args)

    def getConcentrationFieldNameVector(self, *args):
        return _CompuCell.DiffusableVectorFloat_getConcentrationFieldNameVector(self, *args)

    def getConcentrationFieldVector(self, *args):
        return _CompuCell.DiffusableVectorFloat_getConcentrationFieldVector(self, *args)

# Register DiffusableVectorFloat in _CompuCell:
_CompuCell.DiffusableVectorFloat_swigregister(DiffusableVectorFloat)
class PyAttributeAdder(PyCompuCellObjAdapter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PyAttributeAdder_swiginit(self, _CompuCell.new_PyAttributeAdder(*args))

    def addAttribute(self, *args):
        return _CompuCell.PyAttributeAdder_addAttribute(self, *args)

    def destroyAttribute(self, *args):
        return _CompuCell.PyAttributeAdder_destroyAttribute(self, *args)

    def getPyAttributeAdderPtr(self, *args):
        return _CompuCell.PyAttributeAdder_getPyAttributeAdderPtr(self, *args)

    def registerAdder(self, *args):
        return _CompuCell.PyAttributeAdder_registerAdder(self, *args)

    def registerRefChecker(self, *args):
        return _CompuCell.PyAttributeAdder_registerRefChecker(self, *args)

    def registerDestroyer(self, *args):
        return _CompuCell.PyAttributeAdder_registerDestroyer(self, *args)
    refChecker = property(_CompuCell.PyAttributeAdder_refChecker_get, _CompuCell.PyAttributeAdder_refChecker_set)
    destroyer = property(_CompuCell.PyAttributeAdder_destroyer_get, _CompuCell.PyAttributeAdder_destroyer_set)
    __swig_destroy__ = _CompuCell.delete_PyAttributeAdder

# Register PyAttributeAdder in _CompuCell:
_CompuCell.PyAttributeAdder_swigregister(PyAttributeAdder)
class VectorParseDataPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.VectorParseDataPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.VectorParseDataPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.VectorParseDataPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.VectorParseDataPtr___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.VectorParseDataPtr___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.VectorParseDataPtr___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.VectorParseDataPtr___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.VectorParseDataPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.VectorParseDataPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.VectorParseDataPtr___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.VectorParseDataPtr_pop(self, *args)

    def append(self, *args):
        return _CompuCell.VectorParseDataPtr_append(self, *args)

    def empty(self, *args):
        return _CompuCell.VectorParseDataPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.VectorParseDataPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.VectorParseDataPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.VectorParseDataPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.VectorParseDataPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.VectorParseDataPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.VectorParseDataPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.VectorParseDataPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.VectorParseDataPtr_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.VectorParseDataPtr_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.VectorParseDataPtr_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.VectorParseDataPtr_swiginit(self, _CompuCell.new_VectorParseDataPtr(*args))

    def push_back(self, *args):
        return _CompuCell.VectorParseDataPtr_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.VectorParseDataPtr_front(self, *args)

    def back(self, *args):
        return _CompuCell.VectorParseDataPtr_back(self, *args)

    def assign(self, *args):
        return _CompuCell.VectorParseDataPtr_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.VectorParseDataPtr_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.VectorParseDataPtr_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.VectorParseDataPtr_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.VectorParseDataPtr_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_VectorParseDataPtr

# Register VectorParseDataPtr in _CompuCell:
_CompuCell.VectorParseDataPtr_swigregister(VectorParseDataPtr)

def getPyAttrib(*args):
    return _CompuCell.getPyAttrib(*args)

def isPyAttribValid(*args):
    return _CompuCell.isPyAttribValid(*args)
class ExtraMembersGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ExtraMembersGroup_swiginit(self, _CompuCell.new_ExtraMembersGroup(*args))
    __swig_destroy__ = _CompuCell.delete_ExtraMembersGroup

    def getMember(self, *args):
        return _CompuCell.ExtraMembersGroup_getMember(self, *args)

    def destroy(self, *args):
        return _CompuCell.ExtraMembersGroup_destroy(self, *args)

# Register ExtraMembersGroup in _CompuCell:
_CompuCell.ExtraMembersGroup_swigregister(ExtraMembersGroup)
class ExtraMembersGroupAccessorBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_ExtraMembersGroupAccessorBase

# Register ExtraMembersGroupAccessorBase in _CompuCell:
_CompuCell.ExtraMembersGroupAccessorBase_swigregister(ExtraMembersGroupAccessorBase)
class ExtraMembersGroupFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_ExtraMembersGroupFactory

    def registerClass(self, *args):
        return _CompuCell.ExtraMembersGroupFactory_registerClass(self, *args)

    def create(self, *args):
        return _CompuCell.ExtraMembersGroupFactory_create(self, *args)

    def destroy(self, *args):
        return _CompuCell.ExtraMembersGroupFactory_destroy(self, *args)

    def __init__(self, *args):
        _CompuCell.ExtraMembersGroupFactory_swiginit(self, _CompuCell.new_ExtraMembersGroupFactory(*args))

# Register ExtraMembersGroupFactory in _CompuCell:
_CompuCell.ExtraMembersGroupFactory_swigregister(ExtraMembersGroupFactory)

def getPlugin(*args):
    return _CompuCell.getPlugin(*args)

def getSteppable(*args):
    return _CompuCell.getSteppable(*args)
class ConnectivityLocalFlexData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ConnectivityLocalFlexData_swiginit(self, _CompuCell.new_ConnectivityLocalFlexData(*args))
    connectivityStrength = property(_CompuCell.ConnectivityLocalFlexData_connectivityStrength_get, _CompuCell.ConnectivityLocalFlexData_connectivityStrength_set)
    __swig_destroy__ = _CompuCell.delete_ConnectivityLocalFlexData

# Register ConnectivityLocalFlexData in _CompuCell:
_CompuCell.ConnectivityLocalFlexData_swigregister(ConnectivityLocalFlexData)
class connectivitylocalflexaccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.connectivitylocalflexaccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.connectivitylocalflexaccessor_swiginit(self, _CompuCell.new_connectivitylocalflexaccessor(*args))
    __swig_destroy__ = _CompuCell.delete_connectivitylocalflexaccessor

# Register connectivitylocalflexaccessor in _CompuCell:
_CompuCell.connectivitylocalflexaccessor_swigregister(connectivitylocalflexaccessor)
class ConnectivityLocalFlexPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ConnectivityLocalFlexPlugin_swiginit(self, _CompuCell.new_ConnectivityLocalFlexPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ConnectivityLocalFlexPlugin

    def changeEnergy(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_init(self, *args)

    def getConnectivityLocalFlexDataPtr(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_getConnectivityLocalFlexDataPtr(self, *args)

    def setConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_setConnectivityStrength(self, *args)

    def getConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_getConnectivityStrength(self, *args)

    def update(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_toString(self, *args)

# Register ConnectivityLocalFlexPlugin in _CompuCell:
_CompuCell.ConnectivityLocalFlexPlugin_swigregister(ConnectivityLocalFlexPlugin)

def getConnectivityLocalFlexPlugin(*args):
    return _CompuCell.getConnectivityLocalFlexPlugin(*args)
class ConnectivityGlobalData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ConnectivityGlobalData_swiginit(self, _CompuCell.new_ConnectivityGlobalData(*args))
    connectivityStrength = property(_CompuCell.ConnectivityGlobalData_connectivityStrength_get, _CompuCell.ConnectivityGlobalData_connectivityStrength_set)
    __swig_destroy__ = _CompuCell.delete_ConnectivityGlobalData

# Register ConnectivityGlobalData in _CompuCell:
_CompuCell.ConnectivityGlobalData_swigregister(ConnectivityGlobalData)
class connectivityGlobalaccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.connectivityGlobalaccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.connectivityGlobalaccessor_swiginit(self, _CompuCell.new_connectivityGlobalaccessor(*args))
    __swig_destroy__ = _CompuCell.delete_connectivityGlobalaccessor

# Register connectivityGlobalaccessor in _CompuCell:
_CompuCell.connectivityGlobalaccessor_swigregister(connectivityGlobalaccessor)
class ConnectivityGlobalPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ConnectivityGlobalPlugin_swiginit(self, _CompuCell.new_ConnectivityGlobalPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ConnectivityGlobalPlugin

    def init(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_init(self, *args)

    def getConnectivityGlobalDataPtr(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_getConnectivityGlobalDataPtr(self, *args)

    def setConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_setConnectivityStrength(self, *args)

    def getConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_getConnectivityStrength(self, *args)

    def toString(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_toString(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_changeEnergy(self, *args)

    def changeEnergyLegacy(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_changeEnergyLegacy(self, *args)

    def changeEnergyFast(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_changeEnergyFast(self, *args)

    def checkIfCellIsFragmented(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_checkIfCellIsFragmented(self, *args)

    def check_local_connectivity(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_check_local_connectivity(self, *args)

    def update(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_steerableName(self, *args)

# Register ConnectivityGlobalPlugin in _CompuCell:
_CompuCell.ConnectivityGlobalPlugin_swigregister(ConnectivityGlobalPlugin)

def getConnectivityGlobalPlugin(*args):
    return _CompuCell.getConnectivityGlobalPlugin(*args)
class LengthConstraintData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.LengthConstraintData_swiginit(self, _CompuCell.new_LengthConstraintData(*args))
    lambdaLength = property(_CompuCell.LengthConstraintData_lambdaLength_get, _CompuCell.LengthConstraintData_lambdaLength_set)
    targetLength = property(_CompuCell.LengthConstraintData_targetLength_get, _CompuCell.LengthConstraintData_targetLength_set)
    minorTargetLength = property(_CompuCell.LengthConstraintData_minorTargetLength_get, _CompuCell.LengthConstraintData_minorTargetLength_set)
    __swig_destroy__ = _CompuCell.delete_LengthConstraintData

# Register LengthConstraintData in _CompuCell:
_CompuCell.LengthConstraintData_swigregister(LengthConstraintData)
class lengthconstraintccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.lengthconstraintccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.lengthconstraintccessor_swiginit(self, _CompuCell.new_lengthconstraintccessor(*args))
    __swig_destroy__ = _CompuCell.delete_lengthconstraintccessor

# Register lengthconstraintccessor in _CompuCell:
_CompuCell.lengthconstraintccessor_swigregister(lengthconstraintccessor)
class LengthEnergyParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.LengthEnergyParam_swiginit(self, _CompuCell.new_LengthEnergyParam(*args))
    targetLength = property(_CompuCell.LengthEnergyParam_targetLength_get, _CompuCell.LengthEnergyParam_targetLength_set)
    minorTargetLength = property(_CompuCell.LengthEnergyParam_minorTargetLength_get, _CompuCell.LengthEnergyParam_minorTargetLength_set)
    lambdaLength = property(_CompuCell.LengthEnergyParam_lambdaLength_get, _CompuCell.LengthEnergyParam_lambdaLength_set)
    cellTypeName = property(_CompuCell.LengthEnergyParam_cellTypeName_get, _CompuCell.LengthEnergyParam_cellTypeName_set)
    __swig_destroy__ = _CompuCell.delete_LengthEnergyParam

# Register LengthEnergyParam in _CompuCell:
_CompuCell.LengthEnergyParam_swigregister(LengthEnergyParam)
class LengthConstraintPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.LengthConstraintPlugin_swiginit(self, _CompuCell.new_LengthConstraintPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_LengthConstraintPlugin

    def init(self, *args):
        return _CompuCell.LengthConstraintPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.LengthConstraintPlugin_extraInit(self, *args)

    def toString(self, *args):
        return _CompuCell.LengthConstraintPlugin_toString(self, *args)

    def getLengthConstraintDataPtr(self, *args):
        return _CompuCell.LengthConstraintPlugin_getLengthConstraintDataPtr(self, *args)

    def setLengthConstraintData(self, *args):
        return _CompuCell.LengthConstraintPlugin_setLengthConstraintData(self, *args)

    def getLambdaLength(self, *args):
        return _CompuCell.LengthConstraintPlugin_getLambdaLength(self, *args)

    def getTargetLength(self, *args):
        return _CompuCell.LengthConstraintPlugin_getTargetLength(self, *args)

    def getMinorTargetLength(self, *args):
        return _CompuCell.LengthConstraintPlugin_getMinorTargetLength(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy(self, *args)

    def changeEnergy_xz(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_xz(self, *args)

    def changeEnergy_xy(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_xy(self, *args)

    def changeEnergy_yz(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_yz(self, *args)

    def changeEnergy_3D(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_3D(self, *args)
    changeEnergyFcnPtr = property(_CompuCell.LengthConstraintPlugin_changeEnergyFcnPtr_get, _CompuCell.LengthConstraintPlugin_changeEnergyFcnPtr_set)

    def update(self, *args):
        return _CompuCell.LengthConstraintPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.LengthConstraintPlugin_steerableName(self, *args)

# Register LengthConstraintPlugin in _CompuCell:
_CompuCell.LengthConstraintPlugin_swigregister(LengthConstraintPlugin)

def getLengthConstraintPlugin(*args):
    return _CompuCell.getLengthConstraintPlugin(*args)

def getLengthConstraintLocalFlexPlugin(*args):
    return _CompuCell.getLengthConstraintLocalFlexPlugin(*args)
class ChemotaxisData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ChemotaxisData_swiginit(self, _CompuCell.new_ChemotaxisData(*args))
    _lambda = property(_CompuCell.ChemotaxisData__lambda_get, _CompuCell.ChemotaxisData__lambda_set)
    saturationCoef = property(_CompuCell.ChemotaxisData_saturationCoef_get, _CompuCell.ChemotaxisData_saturationCoef_set)
    powerLevel = property(_CompuCell.ChemotaxisData_powerLevel_get, _CompuCell.ChemotaxisData_powerLevel_set)
    concCOM = property(_CompuCell.ChemotaxisData_concCOM_get, _CompuCell.ChemotaxisData_concCOM_set)
    formulaName = property(_CompuCell.ChemotaxisData_formulaName_get, _CompuCell.ChemotaxisData_formulaName_set)
    formulaPtr = property(_CompuCell.ChemotaxisData_formulaPtr_get, _CompuCell.ChemotaxisData_formulaPtr_set)
    chemotaxisFormulaDictPtr = property(_CompuCell.ChemotaxisData_chemotaxisFormulaDictPtr_get, _CompuCell.ChemotaxisData_chemotaxisFormulaDictPtr_set)
    allowChemotaxisBetweenCompartmentsGlobal = property(_CompuCell.ChemotaxisData_allowChemotaxisBetweenCompartmentsGlobal_get, _CompuCell.ChemotaxisData_allowChemotaxisBetweenCompartmentsGlobal_set)
    typeName = property(_CompuCell.ChemotaxisData_typeName_get, _CompuCell.ChemotaxisData_typeName_set)
    chemotactTowardsTypesVec = property(_CompuCell.ChemotaxisData_chemotactTowardsTypesVec_get, _CompuCell.ChemotaxisData_chemotactTowardsTypesVec_set)
    chemotactTowardsTypesString = property(_CompuCell.ChemotaxisData_chemotactTowardsTypesString_get, _CompuCell.ChemotaxisData_chemotactTowardsTypesString_set)
    automaton = property(_CompuCell.ChemotaxisData_automaton_get, _CompuCell.ChemotaxisData_automaton_set)

    def setLambda(self, *args):
        return _CompuCell.ChemotaxisData_setLambda(self, *args)

    def getLambda(self, *args):
        return _CompuCell.ChemotaxisData_getLambda(self, *args)

    def setType(self, *args):
        return _CompuCell.ChemotaxisData_setType(self, *args)

    def setChemotactTowards(self, *args):
        return _CompuCell.ChemotaxisData_setChemotactTowards(self, *args)

    def setChemotaxisFormulaByName(self, *args):
        return _CompuCell.ChemotaxisData_setChemotaxisFormulaByName(self, *args)

    def initializeChemotactTowardsVectorTypes(self, *args):
        return _CompuCell.ChemotaxisData_initializeChemotactTowardsVectorTypes(self, *args)

    def assignChemotactTowardsVectorTypes(self, *args):
        return _CompuCell.ChemotaxisData_assignChemotactTowardsVectorTypes(self, *args)

    def getChemotactTowardsVectorTypes(self, *args):
        return _CompuCell.ChemotaxisData_getChemotactTowardsVectorTypes(self, *args)

    def setSaturationCoef(self, *args):
        return _CompuCell.ChemotaxisData_setSaturationCoef(self, *args)

    def setSaturationLinearCoef(self, *args):
        return _CompuCell.ChemotaxisData_setSaturationLinearCoef(self, *args)

    def setLogScaledCoef(self, *args):
        return _CompuCell.ChemotaxisData_setLogScaledCoef(self, *args)

    def outScr(self, *args):
        return _CompuCell.ChemotaxisData_outScr(self, *args)

    def okToChemotact(self, *args):
        return _CompuCell.ChemotaxisData_okToChemotact(self, *args)
    __swig_destroy__ = _CompuCell.delete_ChemotaxisData

# Register ChemotaxisData in _CompuCell:
_CompuCell.ChemotaxisData_swigregister(ChemotaxisData)
class ChemotaxisFieldData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ChemotaxisFieldData_swiginit(self, _CompuCell.new_ChemotaxisFieldData(*args))
    chemicalFieldSource = property(_CompuCell.ChemotaxisFieldData_chemicalFieldSource_get, _CompuCell.ChemotaxisFieldData_chemicalFieldSource_set)
    chemicalFieldName = property(_CompuCell.ChemotaxisFieldData_chemicalFieldName_get, _CompuCell.ChemotaxisFieldData_chemicalFieldName_set)
    vecChemotaxisData = property(_CompuCell.ChemotaxisFieldData_vecChemotaxisData_get, _CompuCell.ChemotaxisFieldData_vecChemotaxisData_set)

    def ChemotaxisByType(self, *args):
        return _CompuCell.ChemotaxisFieldData_ChemotaxisByType(self, *args)

    def Source(self, *args):
        return _CompuCell.ChemotaxisFieldData_Source(self, *args)

    def Name(self, *args):
        return _CompuCell.ChemotaxisFieldData_Name(self, *args)

    def getChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisFieldData_getChemotaxisData(self, *args)
    __swig_destroy__ = _CompuCell.delete_ChemotaxisFieldData

# Register ChemotaxisFieldData in _CompuCell:
_CompuCell.ChemotaxisFieldData_swigregister(ChemotaxisFieldData)
class ChemotaxisPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ChemotaxisPlugin_swiginit(self, _CompuCell.new_ChemotaxisPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ChemotaxisPlugin

    def init(self, *args):
        return _CompuCell.ChemotaxisPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ChemotaxisPlugin_extraInit(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ChemotaxisPlugin_changeEnergy(self, *args)

    def update(self, *args):
        return _CompuCell.ChemotaxisPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ChemotaxisPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ChemotaxisPlugin_toString(self, *args)

    def regularChemotaxis(self, *args):
        return _CompuCell.ChemotaxisPlugin_regularChemotaxis(self, *args)

    def reciprocatedChemotaxis(self, *args):
        return _CompuCell.ChemotaxisPlugin_reciprocatedChemotaxis(self, *args)

    def merksChemotaxis(self, *args):
        return _CompuCell.ChemotaxisPlugin_merksChemotaxis(self, *args)

    def addChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisPlugin_addChemotaxisData(self, *args)

    def getChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisPlugin_getChemotaxisData(self, *args)

    def getFieldNamesWithChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisPlugin_getFieldNamesWithChemotaxisData(self, *args)

# Register ChemotaxisPlugin in _CompuCell:
_CompuCell.ChemotaxisPlugin_swigregister(ChemotaxisPlugin)

def getChemotaxisPlugin(*args):
    return _CompuCell.getChemotaxisPlugin(*args)
class MitosisPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.MitosisPlugin_swiginit(self, _CompuCell.new_MitosisPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_MitosisPlugin

    def init(self, *args):
        return _CompuCell.MitosisPlugin_init(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.MitosisPlugin_handleEvent(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.MitosisPlugin_field3DChange(self, *args)

    def step(self, *args):
        return _CompuCell.MitosisPlugin_step(self, *args)

    def update(self, *args):
        return _CompuCell.MitosisPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.MitosisPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.MitosisPlugin_toString(self, *args)

    def turnOn(self, *args):
        return _CompuCell.MitosisPlugin_turnOn(self, *args)

    def turnOff(self, *args):
        return _CompuCell.MitosisPlugin_turnOff(self, *args)

    def doMitosis(self, *args):
        return _CompuCell.MitosisPlugin_doMitosis(self, *args)

    def updateAttributes(self, *args):
        return _CompuCell.MitosisPlugin_updateAttributes(self, *args)

    def getChildCell(self, *args):
        return _CompuCell.MitosisPlugin_getChildCell(self, *args)

    def getParentCell(self, *args):
        return _CompuCell.MitosisPlugin_getParentCell(self, *args)

    def setPotts(self, *args):
        return _CompuCell.MitosisPlugin_setPotts(self, *args)

    def getDoublingVolume(self, *args):
        return _CompuCell.MitosisPlugin_getDoublingVolume(self, *args)

    def setDoublingVolume(self, *args):
        return _CompuCell.MitosisPlugin_setDoublingVolume(self, *args)

# Register MitosisPlugin in _CompuCell:
_CompuCell.MitosisPlugin_swigregister(MitosisPlugin)
class OrientationVectorsMitosis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.OrientationVectorsMitosis_swiginit(self, _CompuCell.new_OrientationVectorsMitosis(*args))
    semiminorVec = property(_CompuCell.OrientationVectorsMitosis_semiminorVec_get, _CompuCell.OrientationVectorsMitosis_semiminorVec_set)
    semimajorVec = property(_CompuCell.OrientationVectorsMitosis_semimajorVec_get, _CompuCell.OrientationVectorsMitosis_semimajorVec_set)
    __swig_destroy__ = _CompuCell.delete_OrientationVectorsMitosis

# Register OrientationVectorsMitosis in _CompuCell:
_CompuCell.OrientationVectorsMitosis_swigregister(OrientationVectorsMitosis)
class MitosisSimplePlugin(MitosisPlugin):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    doDirectionalMitosis2DPtr = property(_CompuCell.MitosisSimplePlugin_doDirectionalMitosis2DPtr_get, _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2DPtr_set)
    getOrientationVectorsMitosis2DPtr = property(_CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2DPtr_get, _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2DPtr_set)

    def __init__(self, *args):
        _CompuCell.MitosisSimplePlugin_swiginit(self, _CompuCell.new_MitosisSimplePlugin(*args))
    __swig_destroy__ = _CompuCell.delete_MitosisSimplePlugin
    divideAlongMinorAxisFlag = property(_CompuCell.MitosisSimplePlugin_divideAlongMinorAxisFlag_get, _CompuCell.MitosisSimplePlugin_divideAlongMinorAxisFlag_set)
    divideAlongMajorAxisFlag = property(_CompuCell.MitosisSimplePlugin_divideAlongMajorAxisFlag_get, _CompuCell.MitosisSimplePlugin_divideAlongMajorAxisFlag_set)
    flag3D = property(_CompuCell.MitosisSimplePlugin_flag3D_get, _CompuCell.MitosisSimplePlugin_flag3D_set)
    pixelTrackerAccessorPtr = property(_CompuCell.MitosisSimplePlugin_pixelTrackerAccessorPtr_get, _CompuCell.MitosisSimplePlugin_pixelTrackerAccessorPtr_set)
    pixelTrackerPlugin = property(_CompuCell.MitosisSimplePlugin_pixelTrackerPlugin_get, _CompuCell.MitosisSimplePlugin_pixelTrackerPlugin_set)

    def handleEvent(self, *args):
        return _CompuCell.MitosisSimplePlugin_handleEvent(self, *args)

    def init(self, *args):
        return _CompuCell.MitosisSimplePlugin_init(self, *args)

    def setDivideAlongMinorAxis(self, *args):
        return _CompuCell.MitosisSimplePlugin_setDivideAlongMinorAxis(self, *args)

    def setDivideAlongMajorAxis(self, *args):
        return _CompuCell.MitosisSimplePlugin_setDivideAlongMajorAxis(self, *args)

    def getOrientationVectorsMitosis(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis(self, *args)

    def getOrientationVectorsMitosis2D_xy(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2D_xy(self, *args)

    def getOrientationVectorsMitosis2D_xz(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2D_xz(self, *args)

    def getOrientationVectorsMitosis2D_yz(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2D_yz(self, *args)

    def getOrientationVectorsMitosis3D(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis3D(self, *args)

    def doDirectionalMitosis(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis(self, *args)

    def doDirectionalMitosis2D_xy(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2D_xy(self, *args)

    def doDirectionalMitosis2D_xz(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2D_xz(self, *args)

    def doDirectionalMitosis2D_yz(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2D_yz(self, *args)

    def doDirectionalMitosis3D(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis3D(self, *args)

    def doDirectionalMitosisOrientationVectorBased(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosisOrientationVectorBased(self, *args)

    def setMitosisFlag(self, *args):
        return _CompuCell.MitosisSimplePlugin_setMitosisFlag(self, *args)

    def getMitosisFlag(self, *args):
        return _CompuCell.MitosisSimplePlugin_getMitosisFlag(self, *args)

# Register MitosisSimplePlugin in _CompuCell:
_CompuCell.MitosisSimplePlugin_swigregister(MitosisSimplePlugin)
class VolumeTrackerPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.VolumeTrackerPlugin_swiginit(self, _CompuCell.new_VolumeTrackerPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_VolumeTrackerPlugin

    def initVec(self, *args):
        return _CompuCell.VolumeTrackerPlugin_initVec(self, *args)

    def init(self, *args):
        return _CompuCell.VolumeTrackerPlugin_init(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.VolumeTrackerPlugin_handleEvent(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.VolumeTrackerPlugin_field3DChange(self, *args)

    def checkIfOKToResize(self, *args):
        return _CompuCell.VolumeTrackerPlugin_checkIfOKToResize(self, *args)

    def step(self, *args):
        return _CompuCell.VolumeTrackerPlugin_step(self, *args)

    def toString(self, *args):
        return _CompuCell.VolumeTrackerPlugin_toString(self, *args)

    def steerableName(self, *args):
        return _CompuCell.VolumeTrackerPlugin_steerableName(self, *args)

# Register VolumeTrackerPlugin in _CompuCell:
_CompuCell.VolumeTrackerPlugin_swigregister(VolumeTrackerPlugin)

def getVolumeTrackerPlugin(*args):
    return _CompuCell.getVolumeTrackerPlugin(*args)
class CenterOfMassPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CenterOfMassPlugin_swiginit(self, _CompuCell.new_CenterOfMassPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_CenterOfMassPlugin

    def getCenterOfMass(self, *args):
        return _CompuCell.CenterOfMassPlugin_getCenterOfMass(self, *args)

    def field3DCheck(self, *args):
        return _CompuCell.CenterOfMassPlugin_field3DCheck(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.CenterOfMassPlugin_handleEvent(self, *args)

    def init(self, *args):
        return _CompuCell.CenterOfMassPlugin_init(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.CenterOfMassPlugin_field3DChange(self, *args)

    def toString(self, *args):
        return _CompuCell.CenterOfMassPlugin_toString(self, *args)

    def steerableName(self, *args):
        return _CompuCell.CenterOfMassPlugin_steerableName(self, *args)

# Register CenterOfMassPlugin in _CompuCell:
_CompuCell.CenterOfMassPlugin_swigregister(CenterOfMassPlugin)

def getCenterOfMassPlugin(*args):
    return _CompuCell.getCenterOfMassPlugin(*args)
class NeighborSurfaceData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.NeighborSurfaceData_swiginit(self, _CompuCell.new_NeighborSurfaceData(*args))

    def __lt__(self, *args):
        return _CompuCell.NeighborSurfaceData___lt__(self, *args)

    def incrementCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborSurfaceData_incrementCommonSurfaceArea(self, *args)

    def decrementCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborSurfaceData_decrementCommonSurfaceArea(self, *args)

    def OKToRemove(self, *args):
        return _CompuCell.NeighborSurfaceData_OKToRemove(self, *args)

    def __eq__(self, *args):
        return _CompuCell.NeighborSurfaceData___eq__(self, *args)

    def getCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborSurfaceData_getCommonSurfaceArea(self, *args)
    neighborAddress = property(_CompuCell.NeighborSurfaceData_neighborAddress_get, _CompuCell.NeighborSurfaceData_neighborAddress_set)
    commonSurfaceArea = property(_CompuCell.NeighborSurfaceData_commonSurfaceArea_get, _CompuCell.NeighborSurfaceData_commonSurfaceArea_set)
    __swig_destroy__ = _CompuCell.delete_NeighborSurfaceData

# Register NeighborSurfaceData in _CompuCell:
_CompuCell.NeighborSurfaceData_swigregister(NeighborSurfaceData)
class NeighborTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.NeighborTracker_swiginit(self, _CompuCell.new_NeighborTracker(*args))

    def trackerNumber(self, *args):
        return _CompuCell.NeighborTracker_trackerNumber(self, *args)
    __swig_destroy__ = _CompuCell.delete_NeighborTracker
    cellNeighbors = property(_CompuCell.NeighborTracker_cellNeighbors_get, _CompuCell.NeighborTracker_cellNeighbors_set)

# Register NeighborTracker in _CompuCell:
_CompuCell.NeighborTracker_swigregister(NeighborTracker)
class neighbortrackeraccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.neighbortrackeraccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.neighbortrackeraccessor_swiginit(self, _CompuCell.new_neighbortrackeraccessor(*args))
    __swig_destroy__ = _CompuCell.delete_neighbortrackeraccessor

# Register neighbortrackeraccessor in _CompuCell:
_CompuCell.neighbortrackeraccessor_swigregister(neighbortrackeraccessor)
class nsdSetPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.nsdSetPyItr_current_get, _CompuCell.nsdSetPyItr_current_set)
    begin = property(_CompuCell.nsdSetPyItr_begin_get, _CompuCell.nsdSetPyItr_begin_set)
    end = property(_CompuCell.nsdSetPyItr_end_get, _CompuCell.nsdSetPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.nsdSetPyItr_swiginit(self, _CompuCell.new_nsdSetPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.nsdSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.nsdSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.nsdSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.nsdSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.nsdSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.nsdSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.nsdSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.nsdSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.nsdSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_nsdSetPyItr

# Register nsdSetPyItr in _CompuCell:
_CompuCell.nsdSetPyItr_swigregister(nsdSetPyItr)
class neighborsurfacedataset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.neighborsurfacedataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.neighborsurfacedataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.neighborsurfacedataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.neighborsurfacedataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.neighborsurfacedataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.neighborsurfacedataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.neighborsurfacedataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.neighborsurfacedataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.neighborsurfacedataset_discard(self, *args)

    def __init__(self, *args):
        _CompuCell.neighborsurfacedataset_swiginit(self, _CompuCell.new_neighborsurfacedataset(*args))

    def empty(self, *args):
        return _CompuCell.neighborsurfacedataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.neighborsurfacedataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.neighborsurfacedataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.neighborsurfacedataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.neighborsurfacedataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.neighborsurfacedataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.neighborsurfacedataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.neighborsurfacedataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.neighborsurfacedataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.neighborsurfacedataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.neighborsurfacedataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.neighborsurfacedataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.neighborsurfacedataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.neighborsurfacedataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.neighborsurfacedataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_neighborsurfacedataset

# Register neighborsurfacedataset in _CompuCell:
_CompuCell.neighborsurfacedataset_swigregister(neighborsurfacedataset)
class NeighborTrackerPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.NeighborTrackerPlugin_swiginit(self, _CompuCell.new_NeighborTrackerPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_NeighborTrackerPlugin

    def field3DChange(self, *args):
        return _CompuCell.NeighborTrackerPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.NeighborTrackerPlugin_init(self, *args)

    def toString(self, *args):
        return _CompuCell.NeighborTrackerPlugin_toString(self, *args)

    def getNeighborTrackerAccessorPtr(self, *args):
        return _CompuCell.NeighborTrackerPlugin_getNeighborTrackerAccessorPtr(self, *args)

    def returnNumber(self, *args):
        return _CompuCell.NeighborTrackerPlugin_returnNumber(self, *args)

    def getCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborTrackerPlugin_getCommonSurfaceArea(self, *args)

# Register NeighborTrackerPlugin in _CompuCell:
_CompuCell.NeighborTrackerPlugin_swigregister(NeighborTrackerPlugin)

def getNeighborTrackerPlugin(*args):
    return _CompuCell.getNeighborTrackerPlugin(*args)
class PixelTrackerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PixelTrackerData_swiginit(self, _CompuCell.new_PixelTrackerData(*args))

    def __lt__(self, *args):
        return _CompuCell.PixelTrackerData___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.PixelTrackerData___eq__(self, *args)
    pixel = property(_CompuCell.PixelTrackerData_pixel_get, _CompuCell.PixelTrackerData_pixel_set)
    __swig_destroy__ = _CompuCell.delete_PixelTrackerData

# Register PixelTrackerData in _CompuCell:
_CompuCell.PixelTrackerData_swigregister(PixelTrackerData)
class PixelTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PixelTracker_swiginit(self, _CompuCell.new_PixelTracker(*args))
    __swig_destroy__ = _CompuCell.delete_PixelTracker
    pixelSet = property(_CompuCell.PixelTracker_pixelSet_get, _CompuCell.PixelTracker_pixelSet_set)

# Register PixelTracker in _CompuCell:
_CompuCell.PixelTracker_swigregister(PixelTracker)
class PixelTrackerAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.PixelTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.PixelTrackerAccessor_swiginit(self, _CompuCell.new_PixelTrackerAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_PixelTrackerAccessor

# Register PixelTrackerAccessor in _CompuCell:
_CompuCell.PixelTrackerAccessor_swigregister(PixelTrackerAccessor)
class PixelTrackerDataset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.PixelTrackerDataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.PixelTrackerDataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.PixelTrackerDataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.PixelTrackerDataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.PixelTrackerDataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.PixelTrackerDataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.PixelTrackerDataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.PixelTrackerDataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.PixelTrackerDataset_discard(self, *args)

    def __init__(self, *args):
        _CompuCell.PixelTrackerDataset_swiginit(self, _CompuCell.new_PixelTrackerDataset(*args))

    def empty(self, *args):
        return _CompuCell.PixelTrackerDataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.PixelTrackerDataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.PixelTrackerDataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.PixelTrackerDataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.PixelTrackerDataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.PixelTrackerDataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.PixelTrackerDataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.PixelTrackerDataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.PixelTrackerDataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.PixelTrackerDataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.PixelTrackerDataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.PixelTrackerDataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.PixelTrackerDataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.PixelTrackerDataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.PixelTrackerDataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_PixelTrackerDataset

# Register PixelTrackerDataset in _CompuCell:
_CompuCell.PixelTrackerDataset_swigregister(PixelTrackerDataset)
class pixelSetPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.pixelSetPyItr_current_get, _CompuCell.pixelSetPyItr_current_set)
    begin = property(_CompuCell.pixelSetPyItr_begin_get, _CompuCell.pixelSetPyItr_begin_set)
    end = property(_CompuCell.pixelSetPyItr_end_get, _CompuCell.pixelSetPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.pixelSetPyItr_swiginit(self, _CompuCell.new_pixelSetPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.pixelSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.pixelSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.pixelSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.pixelSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.pixelSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.pixelSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.pixelSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.pixelSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.pixelSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_pixelSetPyItr

# Register pixelSetPyItr in _CompuCell:
_CompuCell.pixelSetPyItr_swigregister(pixelSetPyItr)
class PixelTrackerPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PixelTrackerPlugin_swiginit(self, _CompuCell.new_PixelTrackerPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_PixelTrackerPlugin

    def field3DChange(self, *args):
        return _CompuCell.PixelTrackerPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.PixelTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.PixelTrackerPlugin_extraInit(self, *args)

    def toString(self, *args):
        return _CompuCell.PixelTrackerPlugin_toString(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.PixelTrackerPlugin_handleEvent(self, *args)

    def getPixelTrackerAccessorPtr(self, *args):
        return _CompuCell.PixelTrackerPlugin_getPixelTrackerAccessorPtr(self, *args)

    def getPixelTrackerData(self, *args):
        return _CompuCell.PixelTrackerPlugin_getPixelTrackerData(self, *args)

    def enableMediumTracker(self, *args):
        return _CompuCell.PixelTrackerPlugin_enableMediumTracker(self, *args)

    def mediumTrackerDataInit(self, *args):
        return _CompuCell.PixelTrackerPlugin_mediumTrackerDataInit(self, *args)

    def trackingMedium(self, *args):
        return _CompuCell.PixelTrackerPlugin_trackingMedium(self, *args)

    def getMediumPixelSet(self, *args):
        return _CompuCell.PixelTrackerPlugin_getMediumPixelSet(self, *args)

    def getPixelWorkerSets(self, *args):
        return _CompuCell.PixelTrackerPlugin_getPixelWorkerSets(self, *args)

    def enableFullInitAtStart(self, *args):
        return _CompuCell.PixelTrackerPlugin_enableFullInitAtStart(self, *args)

    def fullyInitialized(self, *args):
        return _CompuCell.PixelTrackerPlugin_fullyInitialized(self, *args)

    def fullTrackerDataInit(self, *args):
        return _CompuCell.PixelTrackerPlugin_fullTrackerDataInit(self, *args)

# Register PixelTrackerPlugin in _CompuCell:
_CompuCell.PixelTrackerPlugin_swigregister(PixelTrackerPlugin)

def getPixelTrackerPlugin(*args):
    return _CompuCell.getPixelTrackerPlugin(*args)
class BoundaryPixelTrackerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.BoundaryPixelTrackerData_swiginit(self, _CompuCell.new_BoundaryPixelTrackerData(*args))

    def __lt__(self, *args):
        return _CompuCell.BoundaryPixelTrackerData___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.BoundaryPixelTrackerData___eq__(self, *args)
    pixel = property(_CompuCell.BoundaryPixelTrackerData_pixel_get, _CompuCell.BoundaryPixelTrackerData_pixel_set)
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerData

# Register BoundaryPixelTrackerData in _CompuCell:
_CompuCell.BoundaryPixelTrackerData_swigregister(BoundaryPixelTrackerData)
class BoundaryPixelTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.BoundaryPixelTracker_swiginit(self, _CompuCell.new_BoundaryPixelTracker(*args))
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTracker
    pixelSet = property(_CompuCell.BoundaryPixelTracker_pixelSet_get, _CompuCell.BoundaryPixelTracker_pixelSet_set)
    pixelSetMap = property(_CompuCell.BoundaryPixelTracker_pixelSetMap_get, _CompuCell.BoundaryPixelTracker_pixelSetMap_set)

# Register BoundaryPixelTracker in _CompuCell:
_CompuCell.BoundaryPixelTracker_swigregister(BoundaryPixelTracker)
class BoundaryPixelTrackerAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.BoundaryPixelTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.BoundaryPixelTrackerAccessor_swiginit(self, _CompuCell.new_BoundaryPixelTrackerAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerAccessor

# Register BoundaryPixelTrackerAccessor in _CompuCell:
_CompuCell.BoundaryPixelTrackerAccessor_swigregister(BoundaryPixelTrackerAccessor)
class BoundaryPixelTrackerDataset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_discard(self, *args)

    def __init__(self, *args):
        _CompuCell.BoundaryPixelTrackerDataset_swiginit(self, _CompuCell.new_BoundaryPixelTrackerDataset(*args))

    def empty(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerDataset

# Register BoundaryPixelTrackerDataset in _CompuCell:
_CompuCell.BoundaryPixelTrackerDataset_swigregister(BoundaryPixelTrackerDataset)
class IntBoundaryPixelTrackerDataSetMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_keys(self, *args)

    def values(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_values(self, *args)

    def items(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_asdict(self, *args)

    def __init__(self, *args):
        _CompuCell.IntBoundaryPixelTrackerDataSetMap_swiginit(self, _CompuCell.new_IntBoundaryPixelTrackerDataSetMap(*args))

    def empty(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_empty(self, *args)

    def size(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_size(self, *args)

    def swap(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_begin(self, *args)

    def end(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_count(self, *args)

    def erase(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_erase(self, *args)

    def find(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_IntBoundaryPixelTrackerDataSetMap

# Register IntBoundaryPixelTrackerDataSetMap in _CompuCell:
_CompuCell.IntBoundaryPixelTrackerDataSetMap_swigregister(IntBoundaryPixelTrackerDataSetMap)
class boundaryPixelSetPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.boundaryPixelSetPyItr_current_get, _CompuCell.boundaryPixelSetPyItr_current_set)
    begin = property(_CompuCell.boundaryPixelSetPyItr_begin_get, _CompuCell.boundaryPixelSetPyItr_begin_set)
    end = property(_CompuCell.boundaryPixelSetPyItr_end_get, _CompuCell.boundaryPixelSetPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.boundaryPixelSetPyItr_swiginit(self, _CompuCell.new_boundaryPixelSetPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_boundaryPixelSetPyItr

# Register boundaryPixelSetPyItr in _CompuCell:
_CompuCell.boundaryPixelSetPyItr_swigregister(boundaryPixelSetPyItr)
class BoundaryPixelTrackerPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.BoundaryPixelTrackerPlugin_swiginit(self, _CompuCell.new_BoundaryPixelTrackerPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerPlugin

    def field3DChange(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_field3DChange(self, *args)

    def updateBoundaryPixels(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_updateBoundaryPixels(self, *args)

    def init(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_toString(self, *args)

    def getPixelSetForNeighborOrderPtr(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_getPixelSetForNeighborOrderPtr(self, *args)

    def getBoundaryPixelTrackerAccessorPtr(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_getBoundaryPixelTrackerAccessorPtr(self, *args)

    def getBoundaryPixelTrackerData(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_getBoundaryPixelTrackerData(self, *args)

# Register BoundaryPixelTrackerPlugin in _CompuCell:
_CompuCell.BoundaryPixelTrackerPlugin_swigregister(BoundaryPixelTrackerPlugin)

def getBoundaryPixelTrackerPlugin(*args):
    return _CompuCell.getBoundaryPixelTrackerPlugin(*args)
class ContactLocalFlexData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactLocalFlexData_swiginit(self, _CompuCell.new_ContactLocalFlexData(*args))

    def __lt__(self, *args):
        return _CompuCell.ContactLocalFlexData___lt__(self, *args)
    neighborAddress = property(_CompuCell.ContactLocalFlexData_neighborAddress_get, _CompuCell.ContactLocalFlexData_neighborAddress_set)
    J = property(_CompuCell.ContactLocalFlexData_J_get, _CompuCell.ContactLocalFlexData_J_set)
    __swig_destroy__ = _CompuCell.delete_ContactLocalFlexData

# Register ContactLocalFlexData in _CompuCell:
_CompuCell.ContactLocalFlexData_swigregister(ContactLocalFlexData)
class ContactLocalFlexDataContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactLocalFlexDataContainer_swiginit(self, _CompuCell.new_ContactLocalFlexDataContainer(*args))
    __swig_destroy__ = _CompuCell.delete_ContactLocalFlexDataContainer
    contactDataContainer = property(_CompuCell.ContactLocalFlexDataContainer_contactDataContainer_get, _CompuCell.ContactLocalFlexDataContainer_contactDataContainer_set)
    localDefaultContactEnergies = property(_CompuCell.ContactLocalFlexDataContainer_localDefaultContactEnergies_get, _CompuCell.ContactLocalFlexDataContainer_localDefaultContactEnergies_set)

# Register ContactLocalFlexDataContainer in _CompuCell:
_CompuCell.ContactLocalFlexDataContainer_swigregister(ContactLocalFlexDataContainer)
class contactlocalflexcontainerccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.contactlocalflexcontainerccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.contactlocalflexcontainerccessor_swiginit(self, _CompuCell.new_contactlocalflexcontainerccessor(*args))
    __swig_destroy__ = _CompuCell.delete_contactlocalflexcontainerccessor

# Register contactlocalflexcontainerccessor in _CompuCell:
_CompuCell.contactlocalflexcontainerccessor_swigregister(contactlocalflexcontainerccessor)
class clfdSetPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.clfdSetPyItr_current_get, _CompuCell.clfdSetPyItr_current_set)
    begin = property(_CompuCell.clfdSetPyItr_begin_get, _CompuCell.clfdSetPyItr_begin_set)
    end = property(_CompuCell.clfdSetPyItr_end_get, _CompuCell.clfdSetPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.clfdSetPyItr_swiginit(self, _CompuCell.new_clfdSetPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.clfdSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.clfdSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.clfdSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.clfdSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.clfdSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.clfdSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.clfdSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.clfdSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.clfdSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_clfdSetPyItr

# Register clfdSetPyItr in _CompuCell:
_CompuCell.clfdSetPyItr_swigregister(clfdSetPyItr)
class contactlocalflexdataset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.contactlocalflexdataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.contactlocalflexdataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.contactlocalflexdataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.contactlocalflexdataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.contactlocalflexdataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.contactlocalflexdataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.contactlocalflexdataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.contactlocalflexdataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.contactlocalflexdataset_discard(self, *args)

    def __init__(self, *args):
        _CompuCell.contactlocalflexdataset_swiginit(self, _CompuCell.new_contactlocalflexdataset(*args))

    def empty(self, *args):
        return _CompuCell.contactlocalflexdataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.contactlocalflexdataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.contactlocalflexdataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.contactlocalflexdataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.contactlocalflexdataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.contactlocalflexdataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.contactlocalflexdataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.contactlocalflexdataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.contactlocalflexdataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.contactlocalflexdataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.contactlocalflexdataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.contactlocalflexdataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.contactlocalflexdataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.contactlocalflexdataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.contactlocalflexdataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_contactlocalflexdataset

# Register contactlocalflexdataset in _CompuCell:
_CompuCell.contactlocalflexdataset_swigregister(contactlocalflexdataset)
class ContactLocalFlexPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactLocalFlexPlugin_swiginit(self, _CompuCell.new_ContactLocalFlexPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ContactLocalFlexPlugin

    def getContactDataContainerAccessorPtr(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_getContactDataContainerAccessorPtr(self, *args)

    def initializeContactLocalFlexData(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_initializeContactLocalFlexData(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_field3DChange(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_extraInit(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_toString(self, *args)

    def update(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_steerableName(self, *args)

    def contactEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_contactEnergy(self, *args)

    def defaultContactEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_defaultContactEnergy(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_setContactEnergy(self, *args)

# Register ContactLocalFlexPlugin in _CompuCell:
_CompuCell.ContactLocalFlexPlugin_swigregister(ContactLocalFlexPlugin)

def getContactLocalFlexPlugin(*args):
    return _CompuCell.getContactLocalFlexPlugin(*args)
class ContactLocalProductData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactLocalProductData_swiginit(self, _CompuCell.new_ContactLocalProductData(*args))
    jVec = property(_CompuCell.ContactLocalProductData_jVec_get, _CompuCell.ContactLocalProductData_jVec_set)
    __swig_destroy__ = _CompuCell.delete_ContactLocalProductData

# Register ContactLocalProductData in _CompuCell:
_CompuCell.ContactLocalProductData_swigregister(ContactLocalProductData)
class contactproductflexccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.contactproductflexccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.contactproductflexccessor_swiginit(self, _CompuCell.new_contactproductflexccessor(*args))
    __swig_destroy__ = _CompuCell.delete_contactproductflexccessor

# Register contactproductflexccessor in _CompuCell:
_CompuCell.contactproductflexccessor_swigregister(contactproductflexccessor)
class jVecPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.jVecPyItr_current_get, _CompuCell.jVecPyItr_current_set)
    begin = property(_CompuCell.jVecPyItr_begin_get, _CompuCell.jVecPyItr_begin_set)
    end = property(_CompuCell.jVecPyItr_end_get, _CompuCell.jVecPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.jVecPyItr_swiginit(self, _CompuCell.new_jVecPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.jVecPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.jVecPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.jVecPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.jVecPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.jVecPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.jVecPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.jVecPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.jVecPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.jVecPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_jVecPyItr

# Register jVecPyItr in _CompuCell:
_CompuCell.jVecPyItr_swigregister(jVecPyItr)
class contactproductdatacontainertype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.contactproductdatacontainertype_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.contactproductdatacontainertype___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.contactproductdatacontainertype___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.contactproductdatacontainertype___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.contactproductdatacontainertype___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.contactproductdatacontainertype___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.contactproductdatacontainertype___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.contactproductdatacontainertype___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.contactproductdatacontainertype___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.contactproductdatacontainertype___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.contactproductdatacontainertype_pop(self, *args)

    def append(self, *args):
        return _CompuCell.contactproductdatacontainertype_append(self, *args)

    def empty(self, *args):
        return _CompuCell.contactproductdatacontainertype_empty(self, *args)

    def size(self, *args):
        return _CompuCell.contactproductdatacontainertype_size(self, *args)

    def swap(self, *args):
        return _CompuCell.contactproductdatacontainertype_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.contactproductdatacontainertype_begin(self, *args)

    def end(self, *args):
        return _CompuCell.contactproductdatacontainertype_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.contactproductdatacontainertype_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.contactproductdatacontainertype_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.contactproductdatacontainertype_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.contactproductdatacontainertype_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.contactproductdatacontainertype_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.contactproductdatacontainertype_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.contactproductdatacontainertype_swiginit(self, _CompuCell.new_contactproductdatacontainertype(*args))

    def push_back(self, *args):
        return _CompuCell.contactproductdatacontainertype_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.contactproductdatacontainertype_front(self, *args)

    def back(self, *args):
        return _CompuCell.contactproductdatacontainertype_back(self, *args)

    def assign(self, *args):
        return _CompuCell.contactproductdatacontainertype_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.contactproductdatacontainertype_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.contactproductdatacontainertype_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.contactproductdatacontainertype_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.contactproductdatacontainertype_capacity(self, *args)

    def set(self, *args):
        return _CompuCell.contactproductdatacontainertype_set(self, *args)

    def get(self, *args):
        return _CompuCell.contactproductdatacontainertype_get(self, *args)
    __swig_destroy__ = _CompuCell.delete_contactproductdatacontainertype

# Register contactproductdatacontainertype in _CompuCell:
_CompuCell.contactproductdatacontainertype_swigregister(contactproductdatacontainertype)
class ContactLocalProductPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactLocalProductPlugin_swiginit(self, _CompuCell.new_ContactLocalProductPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ContactLocalProductPlugin

    def getContactProductDataAccessorPtr(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getContactProductDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactLocalProductPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactLocalProductPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactLocalProductPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.ContactLocalProductPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.ContactLocalProductPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactLocalProductPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactLocalProductPlugin_toString(self, *args)

    def setJVecValue(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setJVecValue(self, *args)

    def getJVecValue(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getJVecValue(self, *args)

    def setCadherinConcentration(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setCadherinConcentration(self, *args)

    def getCadherinConcentration(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getCadherinConcentration(self, *args)

    def setCadherinConcentrationVec(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setCadherinConcentrationVec(self, *args)

    def getCadherinConcentrationVec(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getCadherinConcentrationVec(self, *args)

    def contactSpecificity(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactSpecificity(self, *args)

    def contactEnergyLinear(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyLinear(self, *args)

    def contactEnergyQuadratic(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyQuadratic(self, *args)

    def contactEnergyMin(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyMin(self, *args)

    def contactEnergyCustom(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyCustom(self, *args)

    def contactEnergyLinearMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyLinearMediumLocal(self, *args)

    def contactEnergyQuadraticMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyQuadraticMediumLocal(self, *args)

    def contactEnergyMinMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyMinMediumLocal(self, *args)

    def contactEnergyCustomMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyCustomMediumLocal(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setContactEnergy(self, *args)

    def getIndex(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getIndex(self, *args)

# Register ContactLocalProductPlugin in _CompuCell:
_CompuCell.ContactLocalProductPlugin_swigregister(ContactLocalProductPlugin)

def getContactLocalProductPlugin(*args):
    return _CompuCell.getContactLocalProductPlugin(*args)
class ContactMultiCadData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactMultiCadData_swiginit(self, _CompuCell.new_ContactMultiCadData(*args))
    jVec = property(_CompuCell.ContactMultiCadData_jVec_get, _CompuCell.ContactMultiCadData_jVec_set)

    def assignValue(self, *args):
        return _CompuCell.ContactMultiCadData_assignValue(self, *args)

    def getValue(self, *args):
        return _CompuCell.ContactMultiCadData_getValue(self, *args)
    __swig_destroy__ = _CompuCell.delete_ContactMultiCadData

# Register ContactMultiCadData in _CompuCell:
_CompuCell.ContactMultiCadData_swigregister(ContactMultiCadData)
class CadherinData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CadherinData_swiginit(self, _CompuCell.new_CadherinData(*args))
    cad1Name = property(_CompuCell.CadherinData_cad1Name_get, _CompuCell.CadherinData_cad1Name_set)
    cad2Name = property(_CompuCell.CadherinData_cad2Name_get, _CompuCell.CadherinData_cad2Name_set)
    specificity = property(_CompuCell.CadherinData_specificity_get, _CompuCell.CadherinData_specificity_set)
    __swig_destroy__ = _CompuCell.delete_CadherinData

# Register CadherinData in _CompuCell:
_CompuCell.CadherinData_swigregister(CadherinData)
class ContactMultiCadSpecificityCadherin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactMultiCadSpecificityCadherin_swiginit(self, _CompuCell.new_ContactMultiCadSpecificityCadherin(*args))
    cadherinNameLocalSet = property(_CompuCell.ContactMultiCadSpecificityCadherin_cadherinNameLocalSet_get, _CompuCell.ContactMultiCadSpecificityCadherin_cadherinNameLocalSet_set)
    specificityCadherinTuppleVec = property(_CompuCell.ContactMultiCadSpecificityCadherin_specificityCadherinTuppleVec_get, _CompuCell.ContactMultiCadSpecificityCadherin_specificityCadherinTuppleVec_set)

    def Specificity(self, *args):
        return _CompuCell.ContactMultiCadSpecificityCadherin_Specificity(self, *args)

    def getSpecificity(self, *args):
        return _CompuCell.ContactMultiCadSpecificityCadherin_getSpecificity(self, *args)
    __swig_destroy__ = _CompuCell.delete_ContactMultiCadSpecificityCadherin

# Register ContactMultiCadSpecificityCadherin in _CompuCell:
_CompuCell.ContactMultiCadSpecificityCadherin_swigregister(ContactMultiCadSpecificityCadherin)
class contactmulticaddataaccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.contactmulticaddataaccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.contactmulticaddataaccessor_swiginit(self, _CompuCell.new_contactmulticaddataaccessor(*args))
    __swig_destroy__ = _CompuCell.delete_contactmulticaddataaccessor

# Register contactmulticaddataaccessor in _CompuCell:
_CompuCell.contactmulticaddataaccessor_swigregister(contactmulticaddataaccessor)
class ContactMultiCadPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactMultiCadPlugin_swiginit(self, _CompuCell.new_ContactMultiCadPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ContactMultiCadPlugin

    def getContactMultiCadDataAccessorPtr(self, *args):
        return _CompuCell.ContactMultiCadPlugin_getContactMultiCadDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactMultiCadPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactMultiCadPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactMultiCadPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ContactMultiCadPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactMultiCadPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactMultiCadPlugin_toString(self, *args)

    def contactEnergy(self, *args):
        return _CompuCell.ContactMultiCadPlugin_contactEnergy(self, *args)

    def contactEnergyLinear(self, *args):
        return _CompuCell.ContactMultiCadPlugin_contactEnergyLinear(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactMultiCadPlugin_setContactEnergy(self, *args)

# Register ContactMultiCadPlugin in _CompuCell:
_CompuCell.ContactMultiCadPlugin_swigregister(ContactMultiCadPlugin)

def getContactMultiCadPlugin(*args):
    return _CompuCell.getContactMultiCadPlugin(*args)
class AdhesionFlexData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.AdhesionFlexData_swiginit(self, _CompuCell.new_AdhesionFlexData(*args))
    adhesionMoleculeDensityVec = property(_CompuCell.AdhesionFlexData_adhesionMoleculeDensityVec_get, _CompuCell.AdhesionFlexData_adhesionMoleculeDensityVec_set)

    def assignValue(self, *args):
        return _CompuCell.AdhesionFlexData_assignValue(self, *args)

    def assignAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexData_assignAdhesionMoleculeDensityVector(self, *args)

    def getValue(self, *args):
        return _CompuCell.AdhesionFlexData_getValue(self, *args)
    __swig_destroy__ = _CompuCell.delete_AdhesionFlexData

# Register AdhesionFlexData in _CompuCell:
_CompuCell.AdhesionFlexData_swigregister(AdhesionFlexData)
class AdhesionMoleculeDensityData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.AdhesionMoleculeDensityData_swiginit(self, _CompuCell.new_AdhesionMoleculeDensityData(*args))
    molecule = property(_CompuCell.AdhesionMoleculeDensityData_molecule_get, _CompuCell.AdhesionMoleculeDensityData_molecule_set)
    density = property(_CompuCell.AdhesionMoleculeDensityData_density_get, _CompuCell.AdhesionMoleculeDensityData_density_set)
    __swig_destroy__ = _CompuCell.delete_AdhesionMoleculeDensityData

# Register AdhesionMoleculeDensityData in _CompuCell:
_CompuCell.AdhesionMoleculeDensityData_swigregister(AdhesionMoleculeDensityData)
class adhesionflexdataaccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.adhesionflexdataaccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.adhesionflexdataaccessor_swiginit(self, _CompuCell.new_adhesionflexdataaccessor(*args))
    __swig_destroy__ = _CompuCell.delete_adhesionflexdataaccessor

# Register adhesionflexdataaccessor in _CompuCell:
_CompuCell.adhesionflexdataaccessor_swigregister(adhesionflexdataaccessor)
class AdhesionFlexPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.AdhesionFlexPlugin_swiginit(self, _CompuCell.new_AdhesionFlexPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_AdhesionFlexPlugin

    def getAdhesionFlexDataAccessorPtr(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionFlexDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.AdhesionFlexPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.AdhesionFlexPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.AdhesionFlexPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.AdhesionFlexPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.AdhesionFlexPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.AdhesionFlexPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.AdhesionFlexPlugin_toString(self, *args)

    def adhesionFlexEnergyCustom(self, *args):
        return _CompuCell.AdhesionFlexPlugin_adhesionFlexEnergyCustom(self, *args)

    def setBindingParameter(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setBindingParameter(self, *args)

    def setBindingParameterDirect(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setBindingParameterDirect(self, *args)

    def setBindingParameterByIndexDirect(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setBindingParameterByIndexDirect(self, *args)

    def getBindingParameterArray(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getBindingParameterArray(self, *args)

    def getAdhesionMoleculeNameVec(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeNameVec(self, *args)

    def setAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setAdhesionMoleculeDensity(self, *args)

    def setAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setAdhesionMoleculeDensityByIndex(self, *args)

    def setAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setAdhesionMoleculeDensityVector(self, *args)

    def assignNewAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_assignNewAdhesionMoleculeDensityVector(self, *args)

    def setMediumAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setMediumAdhesionMoleculeDensity(self, *args)

    def setMediumAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setMediumAdhesionMoleculeDensityByIndex(self, *args)

    def setMediumAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setMediumAdhesionMoleculeDensityVector(self, *args)

    def assignNewMediumAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_assignNewMediumAdhesionMoleculeDensityVector(self, *args)

    def getAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeDensity(self, *args)

    def getAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeDensityByIndex(self, *args)

    def getAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeDensityVector(self, *args)

    def getMediumAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getMediumAdhesionMoleculeDensity(self, *args)

    def getMediumAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getMediumAdhesionMoleculeDensityByIndex(self, *args)

    def getMediumAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getMediumAdhesionMoleculeDensityVector(self, *args)

    def overrideInitialization(self, *args):
        return _CompuCell.AdhesionFlexPlugin_overrideInitialization(self, *args)

# Register AdhesionFlexPlugin in _CompuCell:
_CompuCell.AdhesionFlexPlugin_swigregister(AdhesionFlexPlugin)

def getAdhesionFlexPlugin(*args):
    return _CompuCell.getAdhesionFlexPlugin(*args)
class CellOrientationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CellOrientationVector_swiginit(self, _CompuCell.new_CellOrientationVector(*args))
    x = property(_CompuCell.CellOrientationVector_x_get, _CompuCell.CellOrientationVector_x_set)
    y = property(_CompuCell.CellOrientationVector_y_get, _CompuCell.CellOrientationVector_y_set)
    z = property(_CompuCell.CellOrientationVector_z_get, _CompuCell.CellOrientationVector_z_set)
    __swig_destroy__ = _CompuCell.delete_CellOrientationVector

# Register CellOrientationVector in _CompuCell:
_CompuCell.CellOrientationVector_swigregister(CellOrientationVector)
class cellOrientationVectorAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.cellOrientationVectorAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.cellOrientationVectorAccessor_swiginit(self, _CompuCell.new_cellOrientationVectorAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_cellOrientationVectorAccessor

# Register cellOrientationVectorAccessor in _CompuCell:
_CompuCell.cellOrientationVectorAccessor_swigregister(cellOrientationVectorAccessor)
class LambdaCellOrientationAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.LambdaCellOrientationAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.LambdaCellOrientationAccessor_swiginit(self, _CompuCell.new_LambdaCellOrientationAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_LambdaCellOrientationAccessor

# Register LambdaCellOrientationAccessor in _CompuCell:
_CompuCell.LambdaCellOrientationAccessor_swigregister(LambdaCellOrientationAccessor)
class LambdaCellOrientation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.LambdaCellOrientation_swiginit(self, _CompuCell.new_LambdaCellOrientation(*args))
    lambdaVal = property(_CompuCell.LambdaCellOrientation_lambdaVal_get, _CompuCell.LambdaCellOrientation_lambdaVal_set)
    __swig_destroy__ = _CompuCell.delete_LambdaCellOrientation

# Register LambdaCellOrientation in _CompuCell:
_CompuCell.LambdaCellOrientation_swigregister(LambdaCellOrientation)
class CellOrientationPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CellOrientationPlugin_swiginit(self, _CompuCell.new_CellOrientationPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_CellOrientationPlugin

    def init(self, *args):
        return _CompuCell.CellOrientationPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.CellOrientationPlugin_extraInit(self, *args)
    changeEnergyFcnPtr = property(_CompuCell.CellOrientationPlugin_changeEnergyFcnPtr_get, _CompuCell.CellOrientationPlugin_changeEnergyFcnPtr_set)

    def changeEnergy(self, *args):
        return _CompuCell.CellOrientationPlugin_changeEnergy(self, *args)

    def changeEnergyCOMBased(self, *args):
        return _CompuCell.CellOrientationPlugin_changeEnergyCOMBased(self, *args)

    def changeEnergyPixelBased(self, *args):
        return _CompuCell.CellOrientationPlugin_changeEnergyPixelBased(self, *args)

    def getPolarizationVectorAccessorPtr(self, *args):
        return _CompuCell.CellOrientationPlugin_getPolarizationVectorAccessorPtr(self, *args)

    def getLambdaCellOrientationAccessorPtr(self, *args):
        return _CompuCell.CellOrientationPlugin_getLambdaCellOrientationAccessorPtr(self, *args)

    def setLambdaCellOrientation(self, *args):
        return _CompuCell.CellOrientationPlugin_setLambdaCellOrientation(self, *args)

    def getLambdaCellOrientation(self, *args):
        return _CompuCell.CellOrientationPlugin_getLambdaCellOrientation(self, *args)

    def update(self, *args):
        return _CompuCell.CellOrientationPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.CellOrientationPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.CellOrientationPlugin_toString(self, *args)

# Register CellOrientationPlugin in _CompuCell:
_CompuCell.CellOrientationPlugin_swigregister(CellOrientationPlugin)

def getCellOrientationPlugin(*args):
    return _CompuCell.getCellOrientationPlugin(*args)
class PolarizationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PolarizationVector_swiginit(self, _CompuCell.new_PolarizationVector(*args))
    x = property(_CompuCell.PolarizationVector_x_get, _CompuCell.PolarizationVector_x_set)
    y = property(_CompuCell.PolarizationVector_y_get, _CompuCell.PolarizationVector_y_set)
    z = property(_CompuCell.PolarizationVector_z_get, _CompuCell.PolarizationVector_z_set)
    __swig_destroy__ = _CompuCell.delete_PolarizationVector

# Register PolarizationVector in _CompuCell:
_CompuCell.PolarizationVector_swigregister(PolarizationVector)
class polarizationVectorAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.polarizationVectorAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.polarizationVectorAccessor_swiginit(self, _CompuCell.new_polarizationVectorAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_polarizationVectorAccessor

# Register polarizationVectorAccessor in _CompuCell:
_CompuCell.polarizationVectorAccessor_swigregister(polarizationVectorAccessor)
class PolarizationVectorPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PolarizationVectorPlugin_swiginit(self, _CompuCell.new_PolarizationVectorPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_PolarizationVectorPlugin

    def getPolarizationVectorAccessorPtr(self, *args):
        return _CompuCell.PolarizationVectorPlugin_getPolarizationVectorAccessorPtr(self, *args)

    def init(self, *args):
        return _CompuCell.PolarizationVectorPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.PolarizationVectorPlugin_extraInit(self, *args)

    def setPolarizationVector(self, *args):
        return _CompuCell.PolarizationVectorPlugin_setPolarizationVector(self, *args)

    def getPolarizationVector(self, *args):
        return _CompuCell.PolarizationVectorPlugin_getPolarizationVector(self, *args)

# Register PolarizationVectorPlugin in _CompuCell:
_CompuCell.PolarizationVectorPlugin_swigregister(PolarizationVectorPlugin)

def getPolarizationVectorPlugin(*args):
    return _CompuCell.getPolarizationVectorPlugin(*args)
class ElasticityTrackerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ElasticityTrackerData_swiginit(self, _CompuCell.new_ElasticityTrackerData(*args))

    def __lt__(self, *args):
        return _CompuCell.ElasticityTrackerData___lt__(self, *args)
    neighborAddress = property(_CompuCell.ElasticityTrackerData_neighborAddress_get, _CompuCell.ElasticityTrackerData_neighborAddress_set)
    lambdaLength = property(_CompuCell.ElasticityTrackerData_lambdaLength_get, _CompuCell.ElasticityTrackerData_lambdaLength_set)
    targetLength = property(_CompuCell.ElasticityTrackerData_targetLength_get, _CompuCell.ElasticityTrackerData_targetLength_set)
    maxLengthElasticity = property(_CompuCell.ElasticityTrackerData_maxLengthElasticity_get, _CompuCell.ElasticityTrackerData_maxLengthElasticity_set)
    __swig_destroy__ = _CompuCell.delete_ElasticityTrackerData

# Register ElasticityTrackerData in _CompuCell:
_CompuCell.ElasticityTrackerData_swigregister(ElasticityTrackerData)
class ElasticityTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ElasticityTracker_swiginit(self, _CompuCell.new_ElasticityTracker(*args))
    __swig_destroy__ = _CompuCell.delete_ElasticityTracker
    elasticityNeighbors = property(_CompuCell.ElasticityTracker_elasticityNeighbors_get, _CompuCell.ElasticityTracker_elasticityNeighbors_set)

# Register ElasticityTracker in _CompuCell:
_CompuCell.ElasticityTracker_swigregister(ElasticityTracker)
class elasticityTrackerAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.elasticityTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.elasticityTrackerAccessor_swiginit(self, _CompuCell.new_elasticityTrackerAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_elasticityTrackerAccessor

# Register elasticityTrackerAccessor in _CompuCell:
_CompuCell.elasticityTrackerAccessor_swigregister(elasticityTrackerAccessor)
class elasticitySetPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.elasticitySetPyItr_current_get, _CompuCell.elasticitySetPyItr_current_set)
    begin = property(_CompuCell.elasticitySetPyItr_begin_get, _CompuCell.elasticitySetPyItr_begin_set)
    end = property(_CompuCell.elasticitySetPyItr_end_get, _CompuCell.elasticitySetPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.elasticitySetPyItr_swiginit(self, _CompuCell.new_elasticitySetPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.elasticitySetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.elasticitySetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.elasticitySetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.elasticitySetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.elasticitySetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.elasticitySetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.elasticitySetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.elasticitySetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.elasticitySetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_elasticitySetPyItr

# Register elasticitySetPyItr in _CompuCell:
_CompuCell.elasticitySetPyItr_swigregister(elasticitySetPyItr)
class elasticityTrackerDataSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.elasticityTrackerDataSet_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___len__(self, *args)

    def append(self, *args):
        return _CompuCell.elasticityTrackerDataSet_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.elasticityTrackerDataSet_add(self, *args)

    def discard(self, *args):
        return _CompuCell.elasticityTrackerDataSet_discard(self, *args)

    def __init__(self, *args):
        _CompuCell.elasticityTrackerDataSet_swiginit(self, _CompuCell.new_elasticityTrackerDataSet(*args))

    def empty(self, *args):
        return _CompuCell.elasticityTrackerDataSet_empty(self, *args)

    def size(self, *args):
        return _CompuCell.elasticityTrackerDataSet_size(self, *args)

    def clear(self, *args):
        return _CompuCell.elasticityTrackerDataSet_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.elasticityTrackerDataSet_swap(self, *args)

    def count(self, *args):
        return _CompuCell.elasticityTrackerDataSet_count(self, *args)

    def begin(self, *args):
        return _CompuCell.elasticityTrackerDataSet_begin(self, *args)

    def end(self, *args):
        return _CompuCell.elasticityTrackerDataSet_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.elasticityTrackerDataSet_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.elasticityTrackerDataSet_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.elasticityTrackerDataSet_erase(self, *args)

    def find(self, *args):
        return _CompuCell.elasticityTrackerDataSet_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.elasticityTrackerDataSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.elasticityTrackerDataSet_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.elasticityTrackerDataSet_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.elasticityTrackerDataSet_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_elasticityTrackerDataSet

# Register elasticityTrackerDataSet in _CompuCell:
_CompuCell.elasticityTrackerDataSet_swigregister(elasticityTrackerDataSet)
class ElasticityTrackerPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ElasticityTrackerPlugin_swiginit(self, _CompuCell.new_ElasticityTrackerPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ElasticityTrackerPlugin

    def init(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_extraInit(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_field3DChange(self, *args)

    def getElasticityTrackerAccessorPtr(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_getElasticityTrackerAccessorPtr(self, *args)

    def getElasticityTrackerData(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_getElasticityTrackerData(self, *args)

    def findTrackerData(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_findTrackerData(self, *args)

    def assignElasticityPair(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_assignElasticityPair(self, *args)

    def addNewElasticLink(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_addNewElasticLink(self, *args)

    def removeElasticityPair(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_removeElasticityPair(self, *args)

    def initializeElasticityNeighborList(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_initializeElasticityNeighborList(self, *args)

# Register ElasticityTrackerPlugin in _CompuCell:
_CompuCell.ElasticityTrackerPlugin_swigregister(ElasticityTrackerPlugin)

def getElasticityTrackerPlugin(*args):
    return _CompuCell.getElasticityTrackerPlugin(*args)
class PlasticityTrackerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PlasticityTrackerData_swiginit(self, _CompuCell.new_PlasticityTrackerData(*args))

    def __lt__(self, *args):
        return _CompuCell.PlasticityTrackerData___lt__(self, *args)
    neighborAddress = property(_CompuCell.PlasticityTrackerData_neighborAddress_get, _CompuCell.PlasticityTrackerData_neighborAddress_set)
    lambdaLength = property(_CompuCell.PlasticityTrackerData_lambdaLength_get, _CompuCell.PlasticityTrackerData_lambdaLength_set)
    targetLength = property(_CompuCell.PlasticityTrackerData_targetLength_get, _CompuCell.PlasticityTrackerData_targetLength_set)
    __swig_destroy__ = _CompuCell.delete_PlasticityTrackerData

# Register PlasticityTrackerData in _CompuCell:
_CompuCell.PlasticityTrackerData_swigregister(PlasticityTrackerData)
class PlasticityTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PlasticityTracker_swiginit(self, _CompuCell.new_PlasticityTracker(*args))
    __swig_destroy__ = _CompuCell.delete_PlasticityTracker
    plasticityNeighbors = property(_CompuCell.PlasticityTracker_plasticityNeighbors_get, _CompuCell.PlasticityTracker_plasticityNeighbors_set)

# Register PlasticityTracker in _CompuCell:
_CompuCell.PlasticityTracker_swigregister(PlasticityTracker)
class plasticityTrackerAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.plasticityTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.plasticityTrackerAccessor_swiginit(self, _CompuCell.new_plasticityTrackerAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_plasticityTrackerAccessor

# Register plasticityTrackerAccessor in _CompuCell:
_CompuCell.plasticityTrackerAccessor_swigregister(plasticityTrackerAccessor)
class plasticitySetPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.plasticitySetPyItr_current_get, _CompuCell.plasticitySetPyItr_current_set)
    begin = property(_CompuCell.plasticitySetPyItr_begin_get, _CompuCell.plasticitySetPyItr_begin_set)
    end = property(_CompuCell.plasticitySetPyItr_end_get, _CompuCell.plasticitySetPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.plasticitySetPyItr_swiginit(self, _CompuCell.new_plasticitySetPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.plasticitySetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.plasticitySetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.plasticitySetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.plasticitySetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.plasticitySetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.plasticitySetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.plasticitySetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.plasticitySetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.plasticitySetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_plasticitySetPyItr

# Register plasticitySetPyItr in _CompuCell:
_CompuCell.plasticitySetPyItr_swigregister(plasticitySetPyItr)
class plasticityTrackerDataSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.plasticityTrackerDataSet_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___len__(self, *args)

    def append(self, *args):
        return _CompuCell.plasticityTrackerDataSet_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.plasticityTrackerDataSet_add(self, *args)

    def discard(self, *args):
        return _CompuCell.plasticityTrackerDataSet_discard(self, *args)

    def __init__(self, *args):
        _CompuCell.plasticityTrackerDataSet_swiginit(self, _CompuCell.new_plasticityTrackerDataSet(*args))

    def empty(self, *args):
        return _CompuCell.plasticityTrackerDataSet_empty(self, *args)

    def size(self, *args):
        return _CompuCell.plasticityTrackerDataSet_size(self, *args)

    def clear(self, *args):
        return _CompuCell.plasticityTrackerDataSet_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.plasticityTrackerDataSet_swap(self, *args)

    def count(self, *args):
        return _CompuCell.plasticityTrackerDataSet_count(self, *args)

    def begin(self, *args):
        return _CompuCell.plasticityTrackerDataSet_begin(self, *args)

    def end(self, *args):
        return _CompuCell.plasticityTrackerDataSet_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.plasticityTrackerDataSet_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.plasticityTrackerDataSet_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.plasticityTrackerDataSet_erase(self, *args)

    def find(self, *args):
        return _CompuCell.plasticityTrackerDataSet_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.plasticityTrackerDataSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.plasticityTrackerDataSet_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.plasticityTrackerDataSet_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.plasticityTrackerDataSet_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_plasticityTrackerDataSet

# Register plasticityTrackerDataSet in _CompuCell:
_CompuCell.plasticityTrackerDataSet_swigregister(plasticityTrackerDataSet)
class PlasticityTrackerPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.PlasticityTrackerPlugin_swiginit(self, _CompuCell.new_PlasticityTrackerPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_PlasticityTrackerPlugin

    def init(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_extraInit(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_field3DChange(self, *args)

    def getPlasticityTrackerAccessorPtr(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_getPlasticityTrackerAccessorPtr(self, *args)

    def getPlasticityTrackerData(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_getPlasticityTrackerData(self, *args)

    def initializePlasticityNeighborList(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_initializePlasticityNeighborList(self, *args)

    def addPlasticityNeighborList(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_addPlasticityNeighborList(self, *args)

# Register PlasticityTrackerPlugin in _CompuCell:
_CompuCell.PlasticityTrackerPlugin_swigregister(PlasticityTrackerPlugin)

def getPlasticityTrackerPlugin(*args):
    return _CompuCell.getPlasticityTrackerPlugin(*args)
class FocalPointPlasticityTrackerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityTrackerData_swiginit(self, _CompuCell.new_FocalPointPlasticityTrackerData(*args))

    def __lt__(self, *args):
        return _CompuCell.FocalPointPlasticityTrackerData___lt__(self, *args)
    neighborAddress = property(_CompuCell.FocalPointPlasticityTrackerData_neighborAddress_get, _CompuCell.FocalPointPlasticityTrackerData_neighborAddress_set)
    lambdaDistance = property(_CompuCell.FocalPointPlasticityTrackerData_lambdaDistance_get, _CompuCell.FocalPointPlasticityTrackerData_lambdaDistance_set)
    targetDistance = property(_CompuCell.FocalPointPlasticityTrackerData_targetDistance_get, _CompuCell.FocalPointPlasticityTrackerData_targetDistance_set)
    maxDistance = property(_CompuCell.FocalPointPlasticityTrackerData_maxDistance_get, _CompuCell.FocalPointPlasticityTrackerData_maxDistance_set)
    maxNumberOfJunctions = property(_CompuCell.FocalPointPlasticityTrackerData_maxNumberOfJunctions_get, _CompuCell.FocalPointPlasticityTrackerData_maxNumberOfJunctions_set)
    activationEnergy = property(_CompuCell.FocalPointPlasticityTrackerData_activationEnergy_get, _CompuCell.FocalPointPlasticityTrackerData_activationEnergy_set)
    neighborOrder = property(_CompuCell.FocalPointPlasticityTrackerData_neighborOrder_get, _CompuCell.FocalPointPlasticityTrackerData_neighborOrder_set)
    anchor = property(_CompuCell.FocalPointPlasticityTrackerData_anchor_get, _CompuCell.FocalPointPlasticityTrackerData_anchor_set)
    anchorPoint = property(_CompuCell.FocalPointPlasticityTrackerData_anchorPoint_get, _CompuCell.FocalPointPlasticityTrackerData_anchorPoint_set)
    isInitiator = property(_CompuCell.FocalPointPlasticityTrackerData_isInitiator_get, _CompuCell.FocalPointPlasticityTrackerData_isInitiator_set)
    initMCS = property(_CompuCell.FocalPointPlasticityTrackerData_initMCS_get, _CompuCell.FocalPointPlasticityTrackerData_initMCS_set)
    anchorId = property(_CompuCell.FocalPointPlasticityTrackerData_anchorId_get, _CompuCell.FocalPointPlasticityTrackerData_anchorId_set)
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityTrackerData

# Register FocalPointPlasticityTrackerData in _CompuCell:
_CompuCell.FocalPointPlasticityTrackerData_swigregister(FocalPointPlasticityTrackerData)
class FocalPointPlasticityTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityTracker_swiginit(self, _CompuCell.new_FocalPointPlasticityTracker(*args))
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityTracker
    focalPointPlasticityNeighbors = property(_CompuCell.FocalPointPlasticityTracker_focalPointPlasticityNeighbors_get, _CompuCell.FocalPointPlasticityTracker_focalPointPlasticityNeighbors_set)
    internalFocalPointPlasticityNeighbors = property(_CompuCell.FocalPointPlasticityTracker_internalFocalPointPlasticityNeighbors_get, _CompuCell.FocalPointPlasticityTracker_internalFocalPointPlasticityNeighbors_set)
    anchors = property(_CompuCell.FocalPointPlasticityTracker_anchors_get, _CompuCell.FocalPointPlasticityTracker_anchors_set)
    fpptd = property(_CompuCell.FocalPointPlasticityTracker_fpptd_get, _CompuCell.FocalPointPlasticityTracker_fpptd_set)

# Register FocalPointPlasticityTracker in _CompuCell:
_CompuCell.FocalPointPlasticityTracker_swigregister(FocalPointPlasticityTracker)
class FocalPointPlasticityJunctionCounter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityJunctionCounter_swiginit(self, _CompuCell.new_FocalPointPlasticityJunctionCounter(*args))

    def __call__(self, *args):
        return _CompuCell.FocalPointPlasticityJunctionCounter___call__(self, *args)
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityJunctionCounter

# Register FocalPointPlasticityJunctionCounter in _CompuCell:
_CompuCell.FocalPointPlasticityJunctionCounter_swigregister(FocalPointPlasticityJunctionCounter)
class focalPointPlasticityTrackerAccessor(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.focalPointPlasticityTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        _CompuCell.focalPointPlasticityTrackerAccessor_swiginit(self, _CompuCell.new_focalPointPlasticityTrackerAccessor(*args))
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticityTrackerAccessor

# Register focalPointPlasticityTrackerAccessor in _CompuCell:
_CompuCell.focalPointPlasticityTrackerAccessor_swigregister(focalPointPlasticityTrackerAccessor)
class focalPointPlasticitySetPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.focalPointPlasticitySetPyItr_current_get, _CompuCell.focalPointPlasticitySetPyItr_current_set)
    begin = property(_CompuCell.focalPointPlasticitySetPyItr_begin_get, _CompuCell.focalPointPlasticitySetPyItr_begin_set)
    end = property(_CompuCell.focalPointPlasticitySetPyItr_end_get, _CompuCell.focalPointPlasticitySetPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.focalPointPlasticitySetPyItr_swiginit(self, _CompuCell.new_focalPointPlasticitySetPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticitySetPyItr

# Register focalPointPlasticitySetPyItr in _CompuCell:
_CompuCell.focalPointPlasticitySetPyItr_swigregister(focalPointPlasticitySetPyItr)
class focalPointPlasticityTrackerDataSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___len__(self, *args)

    def append(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_add(self, *args)

    def discard(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_discard(self, *args)

    def __init__(self, *args):
        _CompuCell.focalPointPlasticityTrackerDataSet_swiginit(self, _CompuCell.new_focalPointPlasticityTrackerDataSet(*args))

    def empty(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_empty(self, *args)

    def size(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_size(self, *args)

    def clear(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_swap(self, *args)

    def count(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_count(self, *args)

    def begin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_begin(self, *args)

    def end(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_erase(self, *args)

    def find(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticityTrackerDataSet

# Register focalPointPlasticityTrackerDataSet in _CompuCell:
_CompuCell.focalPointPlasticityTrackerDataSet_swigregister(focalPointPlasticityTrackerDataSet)
class focalPointPlasticityTrackerDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_pop(self, *args)

    def append(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_append(self, *args)

    def empty(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_empty(self, *args)

    def size(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_size(self, *args)

    def swap(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_begin(self, *args)

    def end(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_erase(self, *args)

    def __init__(self, *args):
        _CompuCell.focalPointPlasticityTrackerDataVector_swiginit(self, _CompuCell.new_focalPointPlasticityTrackerDataVector(*args))

    def push_back(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_front(self, *args)

    def back(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_back(self, *args)

    def assign(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticityTrackerDataVector

# Register focalPointPlasticityTrackerDataVector in _CompuCell:
_CompuCell.focalPointPlasticityTrackerDataVector_swigregister(focalPointPlasticityTrackerDataVector)
class FocalPointPlasticityLinkBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityLinkBase_swiginit(self, _CompuCell.new_FocalPointPlasticityLinkBase(*args))
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityLinkBase

    def getType(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getType(self, *args)

    def getFPPTrackerData(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getFPPTrackerData(self, *args)

    def getDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getDistance(self, *args)

    def getTension(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getTension(self, *args)
    length = property(_CompuCell.FocalPointPlasticityLinkBase_length_get, _CompuCell.FocalPointPlasticityLinkBase_length_set)
    tension = property(_CompuCell.FocalPointPlasticityLinkBase_tension_get, _CompuCell.FocalPointPlasticityLinkBase_tension_set)

    def setConstitutiveLaw(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setConstitutiveLaw(self, *args)

    def hasLocalLaw(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_hasLocalLaw(self, *args)

    def getOtherCell(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getOtherCell(self, *args)

    def isInitiator(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_isInitiator(self, *args)

    def constitutiveLaw(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_constitutiveLaw(self, *args)

    def getLambdaDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getLambdaDistance(self, *args)

    def setLambdaDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setLambdaDistance(self, *args)

    def getTargetDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getTargetDistance(self, *args)

    def setTargetDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setTargetDistance(self, *args)

    def getMaxDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getMaxDistance(self, *args)

    def setMaxDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setMaxDistance(self, *args)

    def getMaxNumberOfJunctions(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getMaxNumberOfJunctions(self, *args)

    def setMaxNumberOfJunctions(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setMaxNumberOfJunctions(self, *args)

    def getActivationEnergy(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getActivationEnergy(self, *args)

    def setActivationEnergy(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setActivationEnergy(self, *args)

    def getNeighborOrder(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getNeighborOrder(self, *args)

    def setNeighborOrder(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setNeighborOrder(self, *args)

    def isAnchor(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_isAnchor(self, *args)

    def getInitMCS(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getInitMCS(self, *args)

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getId1(self, *args)

    def getObj0(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getObj0(self, *args)

    def getObj1(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getObj1(self, *args)
    pyAttrib = property(_CompuCell.FocalPointPlasticityLinkBase_pyAttrib_get, _CompuCell.FocalPointPlasticityLinkBase_pyAttrib_set)

    def getPyAttrib(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getPyAttrib(self, *args)

    def get_dict(self):
        return getLinkPyAttrib(self)

    def set_dict(self, _dict):
        raise AttributeError('ASSIGNMENT link.dict=%s is illegal. Dictionary "dict" can only be modified but not replaced'%(_dict))

    dict = property(get_dict, set_dict)

    __sbml__ = '__sbml__'

    def setsbml(self, sbml) :
        raise AttributeError('ASSIGNMENT link.sbml = %s is illegal. '
                            '"sbml" attribute can only be modified but not replaced' % (sbml))

    def getsbml(self):
        link_dict = self.dict
        class LinkSBMLFetcher:
            def __getattr__(self, item):
                if FocalPointPlasticityLinkBase.__sbml__ not in link_dict.keys():
                    raise KeyError('Link has no SBML solvers')
                elif item not in link_dict[FocalPointPlasticityLinkBase.__sbml__].keys():
                    raise KeyError(f'Cound not find SBML model with name {item}.')
                return link_dict[FocalPointPlasticityLinkBase.__sbml__][item]
        return LinkSBMLFetcher()

    sbml = property(getsbml, setsbml)


    def derived_property_getlength(self):
        return self.getDistance()

    def derived_property_setlength(self, _val):
        raise AttributeError('Assignment of derived property length is illegal.')

    length = property(derived_property_getlength, derived_property_setlength)



    def derived_property_gettension(self):
        return self.getTension()

    def derived_property_settension(self, _val):
        raise AttributeError('Assignment of derived property tension is illegal.')

    tension = property(derived_property_gettension, derived_property_settension)



# Register FocalPointPlasticityLinkBase in _CompuCell:
_CompuCell.FocalPointPlasticityLinkBase_swigregister(FocalPointPlasticityLinkBase)
class FocalPointPlasticityLink(FocalPointPlasticityLinkBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityLink_swiginit(self, _CompuCell.new_FocalPointPlasticityLink(*args))

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityLink_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityLink_getId1(self, *args)

    def getCellPair(self, *args):
        return _CompuCell.FocalPointPlasticityLink_getCellPair(self, *args)
    cellPair = property(_CompuCell.FocalPointPlasticityLink_cellPair_get, _CompuCell.FocalPointPlasticityLink_cellPair_set)

    def derived_property_getcellPair(self):
        return self.getCellPair()

    def derived_property_setcellPair(self, _val):
        raise AttributeError('Assignment of derived property cellPair is illegal.')

    cellPair = property(derived_property_getcellPair, derived_property_setcellPair)


    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityLink

# Register FocalPointPlasticityLink in _CompuCell:
_CompuCell.FocalPointPlasticityLink_swigregister(FocalPointPlasticityLink)
class FocalPointPlasticityInternalLink(FocalPointPlasticityLinkBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityInternalLink_swiginit(self, _CompuCell.new_FocalPointPlasticityInternalLink(*args))

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityInternalLink_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityInternalLink_getId1(self, *args)

    def getCellPair(self, *args):
        return _CompuCell.FocalPointPlasticityInternalLink_getCellPair(self, *args)
    cellPair = property(_CompuCell.FocalPointPlasticityInternalLink_cellPair_get, _CompuCell.FocalPointPlasticityInternalLink_cellPair_set)

    def derived_property_getcellPair(self):
        return self.getCellPair()

    def derived_property_setcellPair(self, _val):
        raise AttributeError('Assignment of derived property cellPair is illegal.')

    cellPair = property(derived_property_getcellPair, derived_property_setcellPair)


    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityInternalLink

# Register FocalPointPlasticityInternalLink in _CompuCell:
_CompuCell.FocalPointPlasticityInternalLink_swigregister(FocalPointPlasticityInternalLink)
class FocalPointPlasticityAnchor(FocalPointPlasticityLinkBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityAnchor_swiginit(self, _CompuCell.new_FocalPointPlasticityAnchor(*args))

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getId1(self, *args)

    def getAnchorPoint(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getAnchorPoint(self, *args)

    def setAnchorPoint(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_setAnchorPoint(self, *args)

    def getAnchorId(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getAnchorId(self, *args)
    cell = property(_CompuCell.FocalPointPlasticityAnchor_cell_get, _CompuCell.FocalPointPlasticityAnchor_cell_set)

    def derived_property_getcell(self):
        return self.getObj0()

    def derived_property_setcell(self, _val):
        raise AttributeError('Assignment of derived property cell is illegal.')

    cell = property(derived_property_getcell, derived_property_setcell)


    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityAnchor

# Register FocalPointPlasticityAnchor in _CompuCell:
_CompuCell.FocalPointPlasticityAnchor_swigregister(FocalPointPlasticityAnchor)
class _FPPLinkList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell._FPPLinkList_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell._FPPLinkList___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell._FPPLinkList___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell._FPPLinkList___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell._FPPLinkList___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell._FPPLinkList___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell._FPPLinkList___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell._FPPLinkList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell._FPPLinkList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell._FPPLinkList___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell._FPPLinkList_pop(self, *args)

    def append(self, *args):
        return _CompuCell._FPPLinkList_append(self, *args)

    def empty(self, *args):
        return _CompuCell._FPPLinkList_empty(self, *args)

    def size(self, *args):
        return _CompuCell._FPPLinkList_size(self, *args)

    def swap(self, *args):
        return _CompuCell._FPPLinkList_swap(self, *args)

    def begin(self, *args):
        return _CompuCell._FPPLinkList_begin(self, *args)

    def end(self, *args):
        return _CompuCell._FPPLinkList_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell._FPPLinkList_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell._FPPLinkList_rend(self, *args)

    def clear(self, *args):
        return _CompuCell._FPPLinkList_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell._FPPLinkList_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell._FPPLinkList_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell._FPPLinkList_erase(self, *args)

    def __init__(self, *args):
        _CompuCell._FPPLinkList_swiginit(self, _CompuCell.new__FPPLinkList(*args))

    def push_back(self, *args):
        return _CompuCell._FPPLinkList_push_back(self, *args)

    def front(self, *args):
        return _CompuCell._FPPLinkList_front(self, *args)

    def back(self, *args):
        return _CompuCell._FPPLinkList_back(self, *args)

    def assign(self, *args):
        return _CompuCell._FPPLinkList_assign(self, *args)

    def resize(self, *args):
        return _CompuCell._FPPLinkList_resize(self, *args)

    def insert(self, *args):
        return _CompuCell._FPPLinkList_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell._FPPLinkList_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell._FPPLinkList_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete__FPPLinkList

# Register _FPPLinkList in _CompuCell:
_CompuCell._FPPLinkList_swigregister(_FPPLinkList)
class _FPPInternalLinkList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell._FPPInternalLinkList_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell._FPPInternalLinkList___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell._FPPInternalLinkList___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell._FPPInternalLinkList___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell._FPPInternalLinkList___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell._FPPInternalLinkList___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell._FPPInternalLinkList___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell._FPPInternalLinkList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell._FPPInternalLinkList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell._FPPInternalLinkList___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell._FPPInternalLinkList_pop(self, *args)

    def append(self, *args):
        return _CompuCell._FPPInternalLinkList_append(self, *args)

    def empty(self, *args):
        return _CompuCell._FPPInternalLinkList_empty(self, *args)

    def size(self, *args):
        return _CompuCell._FPPInternalLinkList_size(self, *args)

    def swap(self, *args):
        return _CompuCell._FPPInternalLinkList_swap(self, *args)

    def begin(self, *args):
        return _CompuCell._FPPInternalLinkList_begin(self, *args)

    def end(self, *args):
        return _CompuCell._FPPInternalLinkList_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell._FPPInternalLinkList_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell._FPPInternalLinkList_rend(self, *args)

    def clear(self, *args):
        return _CompuCell._FPPInternalLinkList_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell._FPPInternalLinkList_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell._FPPInternalLinkList_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell._FPPInternalLinkList_erase(self, *args)

    def __init__(self, *args):
        _CompuCell._FPPInternalLinkList_swiginit(self, _CompuCell.new__FPPInternalLinkList(*args))

    def push_back(self, *args):
        return _CompuCell._FPPInternalLinkList_push_back(self, *args)

    def front(self, *args):
        return _CompuCell._FPPInternalLinkList_front(self, *args)

    def back(self, *args):
        return _CompuCell._FPPInternalLinkList_back(self, *args)

    def assign(self, *args):
        return _CompuCell._FPPInternalLinkList_assign(self, *args)

    def resize(self, *args):
        return _CompuCell._FPPInternalLinkList_resize(self, *args)

    def insert(self, *args):
        return _CompuCell._FPPInternalLinkList_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell._FPPInternalLinkList_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell._FPPInternalLinkList_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete__FPPInternalLinkList

# Register _FPPInternalLinkList in _CompuCell:
_CompuCell._FPPInternalLinkList_swigregister(_FPPInternalLinkList)
class _FPPAnchorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell._FPPAnchorList_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell._FPPAnchorList___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell._FPPAnchorList___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell._FPPAnchorList___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell._FPPAnchorList___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell._FPPAnchorList___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell._FPPAnchorList___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell._FPPAnchorList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell._FPPAnchorList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell._FPPAnchorList___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell._FPPAnchorList_pop(self, *args)

    def append(self, *args):
        return _CompuCell._FPPAnchorList_append(self, *args)

    def empty(self, *args):
        return _CompuCell._FPPAnchorList_empty(self, *args)

    def size(self, *args):
        return _CompuCell._FPPAnchorList_size(self, *args)

    def swap(self, *args):
        return _CompuCell._FPPAnchorList_swap(self, *args)

    def begin(self, *args):
        return _CompuCell._FPPAnchorList_begin(self, *args)

    def end(self, *args):
        return _CompuCell._FPPAnchorList_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell._FPPAnchorList_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell._FPPAnchorList_rend(self, *args)

    def clear(self, *args):
        return _CompuCell._FPPAnchorList_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell._FPPAnchorList_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell._FPPAnchorList_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell._FPPAnchorList_erase(self, *args)

    def __init__(self, *args):
        _CompuCell._FPPAnchorList_swiginit(self, _CompuCell.new__FPPAnchorList(*args))

    def push_back(self, *args):
        return _CompuCell._FPPAnchorList_push_back(self, *args)

    def front(self, *args):
        return _CompuCell._FPPAnchorList_front(self, *args)

    def back(self, *args):
        return _CompuCell._FPPAnchorList_back(self, *args)

    def assign(self, *args):
        return _CompuCell._FPPAnchorList_assign(self, *args)

    def resize(self, *args):
        return _CompuCell._FPPAnchorList_resize(self, *args)

    def insert(self, *args):
        return _CompuCell._FPPAnchorList_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell._FPPAnchorList_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell._FPPAnchorList_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete__FPPAnchorList

# Register _FPPAnchorList in _CompuCell:
_CompuCell._FPPAnchorList_swigregister(_FPPAnchorList)
class FPPLinkID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id0 = property(_CompuCell.FPPLinkID_id0_get, _CompuCell.FPPLinkID_id0_set)
    id1 = property(_CompuCell.FPPLinkID_id1_get, _CompuCell.FPPLinkID_id1_set)

    def __init__(self, *args):
        _CompuCell.FPPLinkID_swiginit(self, _CompuCell.new_FPPLinkID(*args))
    __swig_destroy__ = _CompuCell.delete_FPPLinkID

    def __lt__(self, *args):
        return _CompuCell.FPPLinkID___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.FPPLinkID___eq__(self, *args)

    def __ne__(self, *args):
        return _CompuCell.FPPLinkID___ne__(self, *args)

# Register FPPLinkID in _CompuCell:
_CompuCell.FPPLinkID_swigregister(FPPLinkID)
class LinkInventoryHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _CompuCell.LinkInventoryHasher___call__(self, *args)

    def __init__(self, *args):
        _CompuCell.LinkInventoryHasher_swiginit(self, _CompuCell.new_LinkInventoryHasher(*args))
    __swig_destroy__ = _CompuCell.delete_LinkInventoryHasher

# Register LinkInventoryHasher in _CompuCell:
_CompuCell.LinkInventoryHasher_swigregister(LinkInventoryHasher)
class FPPLinkList(_FPPLinkList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_FPPLinkList

    def __init__(self, *args):
        _CompuCell.FPPLinkList_swiginit(self, _CompuCell.new_FPPLinkList(*args))

# Register FPPLinkList in _CompuCell:
_CompuCell.FPPLinkList_swigregister(FPPLinkList)
class FPPInternalLinkList(_FPPInternalLinkList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_FPPInternalLinkList

    def __init__(self, *args):
        _CompuCell.FPPInternalLinkList_swiginit(self, _CompuCell.new_FPPInternalLinkList(*args))

# Register FPPInternalLinkList in _CompuCell:
_CompuCell.FPPInternalLinkList_swigregister(FPPInternalLinkList)
class FPPAnchorList(_FPPAnchorList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_FPPAnchorList

    def __init__(self, *args):
        _CompuCell.FPPAnchorList_swiginit(self, _CompuCell.new_FPPAnchorList(*args))

# Register FPPAnchorList in _CompuCell:
_CompuCell.FPPAnchorList_swigregister(FPPAnchorList)
class mapFPPLinkIDFPPLinkPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.mapFPPLinkIDFPPLinkPyItr_current_get, _CompuCell.mapFPPLinkIDFPPLinkPyItr_current_set)
    begin = property(_CompuCell.mapFPPLinkIDFPPLinkPyItr_begin_get, _CompuCell.mapFPPLinkIDFPPLinkPyItr_begin_set)
    end = property(_CompuCell.mapFPPLinkIDFPPLinkPyItr_end_get, _CompuCell.mapFPPLinkIDFPPLinkPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.mapFPPLinkIDFPPLinkPyItr_swiginit(self, _CompuCell.new_mapFPPLinkIDFPPLinkPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapFPPLinkIDFPPLinkPyItr

# Register mapFPPLinkIDFPPLinkPyItr in _CompuCell:
_CompuCell.mapFPPLinkIDFPPLinkPyItr_swigregister(mapFPPLinkIDFPPLinkPyItr)
class mapFPPLinkIDFPPInternalLinkPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_current_get, _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_current_set)
    begin = property(_CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_begin_get, _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_begin_set)
    end = property(_CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_end_get, _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_swiginit(self, _CompuCell.new_mapFPPLinkIDFPPInternalLinkPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapFPPLinkIDFPPInternalLinkPyItr

# Register mapFPPLinkIDFPPInternalLinkPyItr in _CompuCell:
_CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_swigregister(mapFPPLinkIDFPPInternalLinkPyItr)
class mapFPPLinkIDFPPAnchorPyItr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CompuCell.mapFPPLinkIDFPPAnchorPyItr_current_get, _CompuCell.mapFPPLinkIDFPPAnchorPyItr_current_set)
    begin = property(_CompuCell.mapFPPLinkIDFPPAnchorPyItr_begin_get, _CompuCell.mapFPPLinkIDFPPAnchorPyItr_begin_set)
    end = property(_CompuCell.mapFPPLinkIDFPPAnchorPyItr_end_get, _CompuCell.mapFPPLinkIDFPPAnchorPyItr_end_set)

    def __init__(self, *args):
        _CompuCell.mapFPPLinkIDFPPAnchorPyItr_swiginit(self, _CompuCell.new_mapFPPLinkIDFPPAnchorPyItr(*args))

    def getCurrentRef(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapFPPLinkIDFPPAnchorPyItr

# Register mapFPPLinkIDFPPAnchorPyItr in _CompuCell:
_CompuCell.mapFPPLinkIDFPPAnchorPyItr_swigregister(mapFPPLinkIDFPPAnchorPyItr)
class _fppInventoryBaseLink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell._fppInventoryBaseLink_swiginit(self, _CompuCell.new__fppInventoryBaseLink(*args))
    __swig_destroy__ = _CompuCell.delete__fppInventoryBaseLink

    def getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args):
        return _CompuCell._fppInventoryBaseLink_getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args)

    def getFPPTrackerDataSet(self, *args):
        return _CompuCell._fppInventoryBaseLink_getFPPTrackerDataSet(self, *args)

    def getLinkInventorySize(self, *args):
        return _CompuCell._fppInventoryBaseLink_getLinkInventorySize(self, *args)

    def getContainer(self, *args):
        return _CompuCell._fppInventoryBaseLink_getContainer(self, *args)

    def linkInventoryBegin(self, *args):
        return _CompuCell._fppInventoryBaseLink_linkInventoryBegin(self, *args)

    def linkInventoryEnd(self, *args):
        return _CompuCell._fppInventoryBaseLink_linkInventoryEnd(self, *args)

    def addToInventory(self, *args):
        return _CompuCell._fppInventoryBaseLink_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell._fppInventoryBaseLink_removeFromInventory(self, *args)

    def getLinkList(self, *args):
        return _CompuCell._fppInventoryBaseLink_getLinkList(self, *args)

    def getCellLinkInventory(self, *args):
        return _CompuCell._fppInventoryBaseLink_getCellLinkInventory(self, *args)

    def getCellLinkList(self, *args):
        return _CompuCell._fppInventoryBaseLink_getCellLinkList(self, *args)

    def getNumberOfJunctions(self, *args):
        return _CompuCell._fppInventoryBaseLink_getNumberOfJunctions(self, *args)

    def removeCellLinks(self, *args):
        return _CompuCell._fppInventoryBaseLink_removeCellLinks(self, *args)

# Register _fppInventoryBaseLink in _CompuCell:
_CompuCell._fppInventoryBaseLink_swigregister(_fppInventoryBaseLink)
class _fppInventoryBaseInternalLink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell._fppInventoryBaseInternalLink_swiginit(self, _CompuCell.new__fppInventoryBaseInternalLink(*args))
    __swig_destroy__ = _CompuCell.delete__fppInventoryBaseInternalLink

    def getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args)

    def getFPPTrackerDataSet(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getFPPTrackerDataSet(self, *args)

    def getLinkInventorySize(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getLinkInventorySize(self, *args)

    def getContainer(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getContainer(self, *args)

    def linkInventoryBegin(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_linkInventoryBegin(self, *args)

    def linkInventoryEnd(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_linkInventoryEnd(self, *args)

    def addToInventory(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_removeFromInventory(self, *args)

    def getLinkList(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getLinkList(self, *args)

    def getCellLinkInventory(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getCellLinkInventory(self, *args)

    def getCellLinkList(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getCellLinkList(self, *args)

    def getNumberOfJunctions(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getNumberOfJunctions(self, *args)

    def removeCellLinks(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_removeCellLinks(self, *args)

# Register _fppInventoryBaseInternalLink in _CompuCell:
_CompuCell._fppInventoryBaseInternalLink_swigregister(_fppInventoryBaseInternalLink)
class _fppInventoryBaseAnchor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell._fppInventoryBaseAnchor_swiginit(self, _CompuCell.new__fppInventoryBaseAnchor(*args))
    __swig_destroy__ = _CompuCell.delete__fppInventoryBaseAnchor

    def getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args)

    def getFPPTrackerDataSet(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getFPPTrackerDataSet(self, *args)

    def getLinkInventorySize(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getLinkInventorySize(self, *args)

    def getContainer(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getContainer(self, *args)

    def linkInventoryBegin(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_linkInventoryBegin(self, *args)

    def linkInventoryEnd(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_linkInventoryEnd(self, *args)

    def addToInventory(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_removeFromInventory(self, *args)

    def getLinkList(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getLinkList(self, *args)

    def getCellLinkInventory(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getCellLinkInventory(self, *args)

    def getCellLinkList(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getCellLinkList(self, *args)

    def getNumberOfJunctions(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getNumberOfJunctions(self, *args)

    def removeCellLinks(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_removeCellLinks(self, *args)

# Register _fppInventoryBaseAnchor in _CompuCell:
_CompuCell._fppInventoryBaseAnchor_swigregister(_fppInventoryBaseAnchor)
class FPPLinkInventory(_fppInventoryBaseLink):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FPPLinkInventory_swiginit(self, _CompuCell.new_FPPLinkInventory(*args))
    __swig_destroy__ = _CompuCell.delete_FPPLinkInventory

    def getLinkByCells(self, *args):
        return _CompuCell.FPPLinkInventory_getLinkByCells(self, *args)

    def getLinkedCells(self, *args):
        return _CompuCell.FPPLinkInventory_getLinkedCells(self, *args)

    def getNumberOfJunctionsByType(self, *args):
        return _CompuCell.FPPLinkInventory_getNumberOfJunctionsByType(self, *args)

# Register FPPLinkInventory in _CompuCell:
_CompuCell.FPPLinkInventory_swigregister(FPPLinkInventory)
class FPPInternalLinkInventory(_fppInventoryBaseInternalLink):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FPPInternalLinkInventory_swiginit(self, _CompuCell.new_FPPInternalLinkInventory(*args))
    __swig_destroy__ = _CompuCell.delete_FPPInternalLinkInventory

    def getLinkByCells(self, *args):
        return _CompuCell.FPPInternalLinkInventory_getLinkByCells(self, *args)

    def getLinkedCells(self, *args):
        return _CompuCell.FPPInternalLinkInventory_getLinkedCells(self, *args)

    def getNumberOfJunctionsByType(self, *args):
        return _CompuCell.FPPInternalLinkInventory_getNumberOfJunctionsByType(self, *args)

# Register FPPInternalLinkInventory in _CompuCell:
_CompuCell.FPPInternalLinkInventory_swigregister(FPPInternalLinkInventory)
class FPPAnchorInventory(_fppInventoryBaseAnchor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FPPAnchorInventory_swiginit(self, _CompuCell.new_FPPAnchorInventory(*args))
    __swig_destroy__ = _CompuCell.delete_FPPAnchorInventory

    def getAnchor(self, *args):
        return _CompuCell.FPPAnchorInventory_getAnchor(self, *args)

    def getNextAnchorId(self, *args):
        return _CompuCell.FPPAnchorInventory_getNextAnchorId(self, *args)

# Register FPPAnchorInventory in _CompuCell:
_CompuCell.FPPAnchorInventory_swigregister(FPPAnchorInventory)

def getLinkPyAttrib(*args):
    return _CompuCell.getLinkPyAttrib(*args)
class FocalPointPlasticityPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FocalPointPlasticityPlugin_swiginit(self, _CompuCell.new_FocalPointPlasticityPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityPlugin

    def init(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_handleEvent(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_changeEnergy(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_field3DChange(self, *args)

    def setFocalPointPlasticityParameters(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_setFocalPointPlasticityParameters(self, *args)

    def setInternalFocalPointPlasticityParameters(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_setInternalFocalPointPlasticityParameters(self, *args)

    def getPlasticityParametersLambdaDistance(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getPlasticityParametersLambdaDistance(self, *args)

    def getPlasticityParametersTargetDistance(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getPlasticityParametersTargetDistance(self, *args)

    def deleteFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_deleteFocalPointPlasticityLink(self, *args)

    def deleteInternalFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_deleteInternalFocalPointPlasticityLink(self, *args)

    def createFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_createFocalPointPlasticityLink(self, *args)

    def createInternalFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_createInternalFocalPointPlasticityLink(self, *args)

    def getLinkInventory(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getLinkInventory(self, *args)

    def getInternalLinkInventory(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getInternalLinkInventory(self, *args)

    def getAnchorInventory(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getAnchorInventory(self, *args)

    def insertFPPData(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_insertFPPData(self, *args)

    def insertInternalFPPData(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_insertInternalFPPData(self, *args)

    def insertAnchorFPPData(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_insertAnchorFPPData(self, *args)

    def getFPPDataVec(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getFPPDataVec(self, *args)

    def getInternalFPPDataVec(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getInternalFPPDataVec(self, *args)

    def getAnchorFPPDataVec(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getAnchorFPPDataVec(self, *args)

    def createAnchor(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_createAnchor(self, *args)

    def deleteAnchor(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_deleteAnchor(self, *args)

    def setAnchorParameters(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_setAnchorParameters(self, *args)

    def update(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_toString(self, *args)

# Register FocalPointPlasticityPlugin in _CompuCell:
_CompuCell.FocalPointPlasticityPlugin_swigregister(FocalPointPlasticityPlugin)

def getFocalPointPlasticityPlugin(*args):
    return _CompuCell.getFocalPointPlasticityPlugin(*args)

def minMaxComps(*args):
    return _CompuCell.minMaxComps(*args)

def eccFromComps(*args):
    return _CompuCell.eccFromComps(*args)

def cellOrientation_12(*args):
    return _CompuCell.cellOrientation_12(*args)

def getSemiaxes12(*args):
    return _CompuCell.getSemiaxes12(*args)
class MomentOfInertiaPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.MomentOfInertiaPlugin_swiginit(self, _CompuCell.new_MomentOfInertiaPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_MomentOfInertiaPlugin

    def getMomentOfInertia(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getMomentOfInertia(self, *args)

    def init(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_init(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_field3DChange(self, *args)

    def cellOrientation_xy(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_cellOrientation_xy(self, *args)

    def cellOrientation_xz(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_cellOrientation_xz(self, *args)

    def cellOrientation_yz(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_cellOrientation_yz(self, *args)
    cellOrientationFcnPtr = property(_CompuCell.MomentOfInertiaPlugin_cellOrientationFcnPtr_get, _CompuCell.MomentOfInertiaPlugin_cellOrientationFcnPtr_set)
    getSemiaxesFctPtr = property(_CompuCell.MomentOfInertiaPlugin_getSemiaxesFctPtr_get, _CompuCell.MomentOfInertiaPlugin_getSemiaxesFctPtr_set)

    def getSemiaxes(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxes(self, *args)

    def getSemiaxesXY(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxesXY(self, *args)

    def getSemiaxesXZ(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxesXZ(self, *args)

    def getSemiaxesYZ(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxesYZ(self, *args)

    def getSemiaxes3D(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxes3D(self, *args)

    def toString(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_toString(self, *args)

# Register MomentOfInertiaPlugin in _CompuCell:
_CompuCell.MomentOfInertiaPlugin_swigregister(MomentOfInertiaPlugin)

def getMomentOfInertiaPlugin(*args):
    return _CompuCell.getMomentOfInertiaPlugin(*args)
class FieldSecretorResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FieldSecretorResult_swiginit(self, _CompuCell.new_FieldSecretorResult(*args))
    success_flag = property(_CompuCell.FieldSecretorResult_success_flag_get, _CompuCell.FieldSecretorResult_success_flag_set)
    tot_amount = property(_CompuCell.FieldSecretorResult_tot_amount_get, _CompuCell.FieldSecretorResult_tot_amount_set)
    __swig_destroy__ = _CompuCell.delete_FieldSecretorResult

# Register FieldSecretorResult in _CompuCell:
_CompuCell.FieldSecretorResult_swigregister(FieldSecretorResult)
class FieldSecretorPixelData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FieldSecretorPixelData_swiginit(self, _CompuCell.new_FieldSecretorPixelData(*args))

    def __lt__(self, *args):
        return _CompuCell.FieldSecretorPixelData___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.FieldSecretorPixelData___eq__(self, *args)
    pixel = property(_CompuCell.FieldSecretorPixelData_pixel_get, _CompuCell.FieldSecretorPixelData_pixel_set)
    __swig_destroy__ = _CompuCell.delete_FieldSecretorPixelData

# Register FieldSecretorPixelData in _CompuCell:
_CompuCell.FieldSecretorPixelData_swigregister(FieldSecretorPixelData)
class FieldSecretor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.FieldSecretor_swiginit(self, _CompuCell.new_FieldSecretor(*args))
    __swig_destroy__ = _CompuCell.delete_FieldSecretor
    concentrationFieldPtr = property(_CompuCell.FieldSecretor_concentrationFieldPtr_get, _CompuCell.FieldSecretor_concentrationFieldPtr_set)
    boundaryPixelTrackerPlugin = property(_CompuCell.FieldSecretor_boundaryPixelTrackerPlugin_get, _CompuCell.FieldSecretor_boundaryPixelTrackerPlugin_set)
    pixelTrackerPlugin = property(_CompuCell.FieldSecretor_pixelTrackerPlugin_get, _CompuCell.FieldSecretor_pixelTrackerPlugin_set)
    boundaryStrategy = property(_CompuCell.FieldSecretor_boundaryStrategy_get, _CompuCell.FieldSecretor_boundaryStrategy_set)
    maxNeighborIndex = property(_CompuCell.FieldSecretor_maxNeighborIndex_get, _CompuCell.FieldSecretor_maxNeighborIndex_set)
    cellFieldG = property(_CompuCell.FieldSecretor_cellFieldG_get, _CompuCell.FieldSecretor_cellFieldG_set)

    def _secreteInsideCellConstantConcentration(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellConstantConcentration(self, *args)

    def _secreteInsideCellConstantConcentrationTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellConstantConcentrationTotalCount(self, *args)

    def _secreteInsideCell(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCell(self, *args)

    def _secreteInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellTotalCount(self, *args)

    def _secreteInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundary(self, *args)

    def _secreteInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundaryTotalCount(self, *args)

    def _secreteInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundaryOnContactWith(self, *args)

    def _secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def _secreteOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundary(self, *args)

    def _secreteOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundaryTotalCount(self, *args)

    def _secreteOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundaryOnContactWith(self, *args)

    def _secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def secreteInsideCellAtCOM(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtCOM(self, *args)

    def secreteInsideCellAtCOMTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtCOMTotalCount(self, *args)

    def _uptakeInsideCell(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCell(self, *args)

    def _uptakeInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellTotalCount(self, *args)

    def _uptakeInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundary(self, *args)

    def _uptakeInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundaryTotalCount(self, *args)

    def _uptakeInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundaryOnContactWith(self, *args)

    def _uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def _uptakeOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundary(self, *args)

    def _uptakeOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundaryTotalCount(self, *args)

    def _uptakeOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundaryOnContactWith(self, *args)

    def _uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def uptakeInsideCellAtCOM(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtCOM(self, *args)

    def uptakeInsideCellAtCOMTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtCOMTotalCount(self, *args)

    def _amountSeenByCell(self, *args):
        return _CompuCell.FieldSecretor__amountSeenByCell(self, *args)

    def totalFieldIntegral(self, *args):
        return _CompuCell.FieldSecretor_totalFieldIntegral(self, *args)

    def secreteInsideCellConstantConcentration(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellConstantConcentration(self, *args)

    def secreteInsideCellConstantConcentrationTotalAmount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellConstantConcentrationTotalAmount(self, *args)

    def secreteInsideCell(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCell(self, *args)

    def secreteInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellTotalCount(self, *args)

    def secreteInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundary(self, *args)

    def secreteInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundaryTotalCount(self, *args)

    def secreteInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundaryOnContactWith(self, *args)

    def secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def secreteOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundary(self, *args)

    def secreteOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundaryTotalCount(self, *args)

    def secreteOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundaryOnContactWith(self, *args)

    def secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def uptakeInsideCell(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCell(self, *args)

    def uptakeInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellTotalCount(self, *args)

    def uptakeInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundary(self, *args)

    def uptakeInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundaryTotalCount(self, *args)

    def uptakeInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundaryOnContactWith(self, *args)

    def uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def uptakeOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundary(self, *args)

    def uptakeOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundaryTotalCount(self, *args)

    def uptakeOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundaryOnContactWith(self, *args)

    def uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def amountSeenByCell(self, *args):
        return _CompuCell.FieldSecretor_amountSeenByCell(self, *args)

# Register FieldSecretor in _CompuCell:
_CompuCell.FieldSecretor_swigregister(FieldSecretor)
class SecretionPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.SecretionPlugin_swiginit(self, _CompuCell.new_SecretionPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_SecretionPlugin

    def init(self, *args):
        return _CompuCell.SecretionPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.SecretionPlugin_extraInit(self, *args)

    def getConcentrationFieldByName(self, *args):
        return _CompuCell.SecretionPlugin_getConcentrationFieldByName(self, *args)

    def secreteSingleField(self, *args):
        return _CompuCell.SecretionPlugin_secreteSingleField(self, *args)

    def secreteOnContactSingleField(self, *args):
        return _CompuCell.SecretionPlugin_secreteOnContactSingleField(self, *args)

    def secreteConstantConcentrationSingleField(self, *args):
        return _CompuCell.SecretionPlugin_secreteConstantConcentrationSingleField(self, *args)

    def getFieldSecretor(self, *args):
        return _CompuCell.SecretionPlugin_getFieldSecretor(self, *args)

    def step(self, *args):
        return _CompuCell.SecretionPlugin_step(self, *args)

    def update(self, *args):
        return _CompuCell.SecretionPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.SecretionPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.SecretionPlugin_toString(self, *args)

# Register SecretionPlugin in _CompuCell:
_CompuCell.SecretionPlugin_swigregister(SecretionPlugin)

def getSecretionPlugin(*args):
    return _CompuCell.getSecretionPlugin(*args)
class SteppableOrientationVectorsMitosis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.SteppableOrientationVectorsMitosis_swiginit(self, _CompuCell.new_SteppableOrientationVectorsMitosis(*args))
    semiminorVec = property(_CompuCell.SteppableOrientationVectorsMitosis_semiminorVec_get, _CompuCell.SteppableOrientationVectorsMitosis_semiminorVec_set)
    semimajorVec = property(_CompuCell.SteppableOrientationVectorsMitosis_semimajorVec_get, _CompuCell.SteppableOrientationVectorsMitosis_semimajorVec_set)
    __swig_destroy__ = _CompuCell.delete_SteppableOrientationVectorsMitosis

# Register SteppableOrientationVectorsMitosis in _CompuCell:
_CompuCell.SteppableOrientationVectorsMitosis_swigregister(SteppableOrientationVectorsMitosis)
class CompartmentMitosisData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CompartmentMitosisData_swiginit(self, _CompuCell.new_CompartmentMitosisData(*args))
    com = property(_CompuCell.CompartmentMitosisData_com_get, _CompuCell.CompartmentMitosisData_com_set)
    cell = property(_CompuCell.CompartmentMitosisData_cell_get, _CompuCell.CompartmentMitosisData_cell_set)
    type = property(_CompuCell.CompartmentMitosisData_type_get, _CompuCell.CompartmentMitosisData_type_set)
    pt = property(_CompuCell.CompartmentMitosisData_pt_get, _CompuCell.CompartmentMitosisData_pt_set)
    __swig_destroy__ = _CompuCell.delete_CompartmentMitosisData

# Register CompartmentMitosisData in _CompuCell:
_CompuCell.CompartmentMitosisData_swigregister(CompartmentMitosisData)
class MitosisSteppable(Steppable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    doDirectionalMitosis2DPtr = property(_CompuCell.MitosisSteppable_doDirectionalMitosis2DPtr_get, _CompuCell.MitosisSteppable_doDirectionalMitosis2DPtr_set)
    childCell = property(_CompuCell.MitosisSteppable_childCell_get, _CompuCell.MitosisSteppable_childCell_set)
    parentCell = property(_CompuCell.MitosisSteppable_parentCell_get, _CompuCell.MitosisSteppable_parentCell_set)
    boundaryStrategy = property(_CompuCell.MitosisSteppable_boundaryStrategy_get, _CompuCell.MitosisSteppable_boundaryStrategy_set)
    maxNeighborIndex = property(_CompuCell.MitosisSteppable_maxNeighborIndex_get, _CompuCell.MitosisSteppable_maxNeighborIndex_set)
    sim = property(_CompuCell.MitosisSteppable_sim_get, _CompuCell.MitosisSteppable_sim_set)
    potts = property(_CompuCell.MitosisSteppable_potts_get, _CompuCell.MitosisSteppable_potts_set)
    divideAlongMinorAxisFlag = property(_CompuCell.MitosisSteppable_divideAlongMinorAxisFlag_get, _CompuCell.MitosisSteppable_divideAlongMinorAxisFlag_set)
    divideAlongMajorAxisFlag = property(_CompuCell.MitosisSteppable_divideAlongMajorAxisFlag_get, _CompuCell.MitosisSteppable_divideAlongMajorAxisFlag_set)
    flag3D = property(_CompuCell.MitosisSteppable_flag3D_get, _CompuCell.MitosisSteppable_flag3D_set)

    def setParentChildPositionFlag(self, *args):
        return _CompuCell.MitosisSteppable_setParentChildPositionFlag(self, *args)

    def getParentChildPositionFlag(self, *args):
        return _CompuCell.MitosisSteppable_getParentChildPositionFlag(self, *args)
    pixelTrackerAccessorPtr = property(_CompuCell.MitosisSteppable_pixelTrackerAccessorPtr_get, _CompuCell.MitosisSteppable_pixelTrackerAccessorPtr_set)
    pixelTrackerPlugin = property(_CompuCell.MitosisSteppable_pixelTrackerPlugin_get, _CompuCell.MitosisSteppable_pixelTrackerPlugin_set)
    parentBeforeMitosis = property(_CompuCell.MitosisSteppable_parentBeforeMitosis_get, _CompuCell.MitosisSteppable_parentBeforeMitosis_set)
    comOffsetsMitosis = property(_CompuCell.MitosisSteppable_comOffsetsMitosis_get, _CompuCell.MitosisSteppable_comOffsetsMitosis_set)
    parentAfterMitosis = property(_CompuCell.MitosisSteppable_parentAfterMitosis_get, _CompuCell.MitosisSteppable_parentAfterMitosis_set)
    childAfterMitosis = property(_CompuCell.MitosisSteppable_childAfterMitosis_get, _CompuCell.MitosisSteppable_childAfterMitosis_set)
    boundaryConditionIndicator = property(_CompuCell.MitosisSteppable_boundaryConditionIndicator_get, _CompuCell.MitosisSteppable_boundaryConditionIndicator_set)
    fieldDim = property(_CompuCell.MitosisSteppable_fieldDim_get, _CompuCell.MitosisSteppable_fieldDim_set)

    def __init__(self, *args):
        _CompuCell.MitosisSteppable_swiginit(self, _CompuCell.new_MitosisSteppable(*args))
    __swig_destroy__ = _CompuCell.delete_MitosisSteppable

    def init(self, *args):
        return _CompuCell.MitosisSteppable_init(self, *args)

    def start(self, *args):
        return _CompuCell.MitosisSteppable_start(self, *args)

    def step(self, *args):
        return _CompuCell.MitosisSteppable_step(self, *args)

    def finish(self, *args):
        return _CompuCell.MitosisSteppable_finish(self, *args)
    getOrientationVectorsMitosis2DPtr = property(_CompuCell.MitosisSteppable_getOrientationVectorsMitosis2DPtr_get, _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2DPtr_set)

    def getOrientationVectorsMitosisCompartments(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosisCompartments(self, *args)

    def getOrientationVectorsMitosis(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis(self, *args)

    def getOrientationVectorsMitosis2D_xy(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2D_xy(self, *args)

    def getOrientationVectorsMitosis2D_xz(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2D_xz(self, *args)

    def getOrientationVectorsMitosis2D_yz(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2D_yz(self, *args)

    def getOrientationVectorsMitosis3D(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis3D(self, *args)

    def doDirectionalMitosisOrientationVectorBased(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisOrientationVectorBased(self, *args)

    def doDirectionalMitosisAlongMajorAxis(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMajorAxis(self, *args)

    def doDirectionalMitosisAlongMinorAxis(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMinorAxis(self, *args)

    def doDirectionalMitosisRandomOrientation(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisRandomOrientation(self, *args)

    def doDirectionalMitosisOrientationVectorBasedCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisOrientationVectorBasedCompartments(self, *args)

    def doDirectionalMitosisRandomOrientationCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisRandomOrientationCompartments(self, *args)

    def doDirectionalMitosisAlongMajorAxisCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMajorAxisCompartments(self, *args)

    def doDirectionalMitosisAlongMinorAxisCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMinorAxisCompartments(self, *args)

    def getShiftVector(self, *args):
        return _CompuCell.MitosisSteppable_getShiftVector(self, *args)

    def calculateCOMPixels(self, *args):
        return _CompuCell.MitosisSteppable_calculateCOMPixels(self, *args)

    def createChildCell(self, *args):
        return _CompuCell.MitosisSteppable_createChildCell(self, *args)

    def shiftCellPixels(self, *args):
        return _CompuCell.MitosisSteppable_shiftCellPixels(self, *args)

    def divideClusterPixelsOrientationVectorBased(self, *args):
        return _CompuCell.MitosisSteppable_divideClusterPixelsOrientationVectorBased(self, *args)

    def calculateClusterPixelsCOM(self, *args):
        return _CompuCell.MitosisSteppable_calculateClusterPixelsCOM(self, *args)

    def initializeClusters(self, *args):
        return _CompuCell.MitosisSteppable_initializeClusters(self, *args)

# Register MitosisSteppable in _CompuCell:
_CompuCell.MitosisSteppable_swigregister(MitosisSteppable)
class BiasPersistParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.BiasPersistParam_swiginit(self, _CompuCell.new_BiasPersistParam(*args))
    persistentAlpha = property(_CompuCell.BiasPersistParam_persistentAlpha_get, _CompuCell.BiasPersistParam_persistentAlpha_set)
    typeName = property(_CompuCell.BiasPersistParam_typeName_get, _CompuCell.BiasPersistParam_typeName_set)
    __swig_destroy__ = _CompuCell.delete_BiasPersistParam

# Register BiasPersistParam in _CompuCell:
_CompuCell.BiasPersistParam_swigregister(BiasPersistParam)
class BiasVectorSteppable(Steppable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.BiasVectorSteppable_swiginit(self, _CompuCell.new_BiasVectorSteppable(*args))
    __swig_destroy__ = _CompuCell.delete_BiasVectorSteppable

    def init(self, *args):
        return _CompuCell.BiasVectorSteppable_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.BiasVectorSteppable_extraInit(self, *args)

    def start(self, *args):
        return _CompuCell.BiasVectorSteppable_start(self, *args)

    def step(self, *args):
        return _CompuCell.BiasVectorSteppable_step(self, *args)

    def step_white_3d(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_3d(self, *args)

    def step_white_2d_x(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_2d_x(self, *args)

    def step_white_2d_y(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_2d_y(self, *args)

    def step_white_2d_z(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_2d_z(self, *args)

    def step_persistent_bias(self, *args):
        return _CompuCell.BiasVectorSteppable_step_persistent_bias(self, *args)

    def gen_persistent_bias(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias(self, *args)

    def output_test(self, *args):
        return _CompuCell.BiasVectorSteppable_output_test(self, *args)

    def gen_persistent_bias_3d(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_3d(self, *args)

    def gen_persistent_bias_2d_x(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_2d_x(self, *args)

    def gen_persistent_bias_2d_y(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_2d_y(self, *args)

    def gen_persistent_bias_2d_z(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_2d_z(self, *args)

    def noise_vec_generator(self, *args):
        return _CompuCell.BiasVectorSteppable_noise_vec_generator(self, *args)

    def white_noise_2d(self, *args):
        return _CompuCell.BiasVectorSteppable_white_noise_2d(self, *args)

    def white_noise_3d(self, *args):
        return _CompuCell.BiasVectorSteppable_white_noise_3d(self, *args)

    def finish(self, *args):
        return _CompuCell.BiasVectorSteppable_finish(self, *args)

    def determine_bias_type(self, *args):
        return _CompuCell.BiasVectorSteppable_determine_bias_type(self, *args)

    def determine_noise_generator(self, *args):
        return _CompuCell.BiasVectorSteppable_determine_noise_generator(self, *args)

    def determine_field_type(self, *args):
        return _CompuCell.BiasVectorSteppable_determine_field_type(self, *args)

    def set_white_step_function(self, *args):
        return _CompuCell.BiasVectorSteppable_set_white_step_function(self, *args)

    def set_persitent_step_function(self, *args):
        return _CompuCell.BiasVectorSteppable_set_persitent_step_function(self, *args)

    def set_step_function(self, *args):
        return _CompuCell.BiasVectorSteppable_set_step_function(self, *args)

    def update(self, *args):
        return _CompuCell.BiasVectorSteppable_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.BiasVectorSteppable_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.BiasVectorSteppable_toString(self, *args)

# Register BiasVectorSteppable in _CompuCell:
_CompuCell.BiasVectorSteppable_swigregister(BiasVectorSteppable)

def getBiasVectorSteppable(*args):
    return _CompuCell.getBiasVectorSteppable(*args)
class ImplicitMotilityParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ImplicitMotilityParam_swiginit(self, _CompuCell.new_ImplicitMotilityParam(*args))
    lambdaMotility = property(_CompuCell.ImplicitMotilityParam_lambdaMotility_get, _CompuCell.ImplicitMotilityParam_lambdaMotility_set)
    typeName = property(_CompuCell.ImplicitMotilityParam_typeName_get, _CompuCell.ImplicitMotilityParam_typeName_set)
    __swig_destroy__ = _CompuCell.delete_ImplicitMotilityParam

# Register ImplicitMotilityParam in _CompuCell:
_CompuCell.ImplicitMotilityParam_swigregister(ImplicitMotilityParam)
class ImplicitMotilityPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ImplicitMotilityPlugin_swiginit(self, _CompuCell.new_ImplicitMotilityPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ImplicitMotilityPlugin
    changeEnergyFcnPtr = property(_CompuCell.ImplicitMotilityPlugin_changeEnergyFcnPtr_get, _CompuCell.ImplicitMotilityPlugin_changeEnergyFcnPtr_set)

    def changeEnergy(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_changeEnergy(self, *args)

    def changeEnergyByCellType(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_changeEnergyByCellType(self, *args)

    def changeEnergyByCellId(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_changeEnergyByCellId(self, *args)

    def init(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_toString(self, *args)

# Register ImplicitMotilityPlugin in _CompuCell:
_CompuCell.ImplicitMotilityPlugin_swigregister(ImplicitMotilityPlugin)

def getImplicitMotilityPlugin(*args):
    return _CompuCell.getImplicitMotilityPlugin(*args)
class CurvatureCalculatorPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.CurvatureCalculatorPlugin_swiginit(self, _CompuCell.new_CurvatureCalculatorPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_CurvatureCalculatorPlugin

    def getProbabilityByNeighbor(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_getProbabilityByNeighbor(self, *args)

    def getGrowthProbability(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_getGrowthProbability(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_toString(self, *args)

# Register CurvatureCalculatorPlugin in _CompuCell:
_CompuCell.CurvatureCalculatorPlugin_swigregister(CurvatureCalculatorPlugin)

def getCurvatureCalculatorPlugin(*args):
    return _CompuCell.getCurvatureCalculatorPlugin(*args)
class OrientedGrowthData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.OrientedGrowthData_swiginit(self, _CompuCell.new_OrientedGrowthData(*args))
    __swig_destroy__ = _CompuCell.delete_OrientedGrowthData
    array = property(_CompuCell.OrientedGrowthData_array_get, _CompuCell.OrientedGrowthData_array_set)
    x = property(_CompuCell.OrientedGrowthData_x_get, _CompuCell.OrientedGrowthData_x_set)
    elong_x = property(_CompuCell.OrientedGrowthData_elong_x_get, _CompuCell.OrientedGrowthData_elong_x_set)
    elong_y = property(_CompuCell.OrientedGrowthData_elong_y_get, _CompuCell.OrientedGrowthData_elong_y_set)
    elong_targetWidth = property(_CompuCell.OrientedGrowthData_elong_targetWidth_get, _CompuCell.OrientedGrowthData_elong_targetWidth_set)
    elong_enabled = property(_CompuCell.OrientedGrowthData_elong_enabled_get, _CompuCell.OrientedGrowthData_elong_enabled_set)

# Register OrientedGrowthData in _CompuCell:
_CompuCell.OrientedGrowthData_swigregister(OrientedGrowthData)
class OrientedGrowthDataAccessorTemplate(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.OrientedGrowthDataAccessorTemplate_get(self, *args)

    def __init__(self, *args):
        _CompuCell.OrientedGrowthDataAccessorTemplate_swiginit(self, _CompuCell.new_OrientedGrowthDataAccessorTemplate(*args))
    __swig_destroy__ = _CompuCell.delete_OrientedGrowthDataAccessorTemplate

# Register OrientedGrowthDataAccessorTemplate in _CompuCell:
_CompuCell.OrientedGrowthDataAccessorTemplate_swigregister(OrientedGrowthDataAccessorTemplate)
class OrientedGrowthPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.OrientedGrowthPlugin_swiginit(self, _CompuCell.new_OrientedGrowthPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_OrientedGrowthPlugin

    def getOrientedGrowthDataAccessorPtr(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getOrientedGrowthDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.OrientedGrowthPlugin_changeEnergy(self, *args)
    xml_energy_penalty = property(_CompuCell.OrientedGrowthPlugin_xml_energy_penalty_get, _CompuCell.OrientedGrowthPlugin_xml_energy_penalty_set)
    xml_energy_falloff = property(_CompuCell.OrientedGrowthPlugin_xml_energy_falloff_get, _CompuCell.OrientedGrowthPlugin_xml_energy_falloff_set)

    def setConstraintWidth(self, *args):
        return _CompuCell.OrientedGrowthPlugin_setConstraintWidth(self, *args)

    def setElongationAxis(self, *args):
        return _CompuCell.OrientedGrowthPlugin_setElongationAxis(self, *args)

    def setElongationEnabled(self, *args):
        return _CompuCell.OrientedGrowthPlugin_setElongationEnabled(self, *args)

    def getElongationAxis_X(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getElongationAxis_X(self, *args)

    def getElongationAxis_Y(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getElongationAxis_Y(self, *args)

    def getElongationEnabled(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getElongationEnabled(self, *args)

    def step(self, *args):
        return _CompuCell.OrientedGrowthPlugin_step(self, *args)

    def init(self, *args):
        return _CompuCell.OrientedGrowthPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.OrientedGrowthPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.OrientedGrowthPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.OrientedGrowthPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.OrientedGrowthPlugin_toString(self, *args)

# Register OrientedGrowthPlugin in _CompuCell:
_CompuCell.OrientedGrowthPlugin_swigregister(OrientedGrowthPlugin)

def getOrientedGrowthPlugin(*args):
    return _CompuCell.getOrientedGrowthPlugin(*args)
class OrientedGrowth2Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.OrientedGrowth2Data_swiginit(self, _CompuCell.new_OrientedGrowth2Data(*args))
    __swig_destroy__ = _CompuCell.delete_OrientedGrowth2Data
    array = property(_CompuCell.OrientedGrowth2Data_array_get, _CompuCell.OrientedGrowth2Data_array_set)
    x = property(_CompuCell.OrientedGrowth2Data_x_get, _CompuCell.OrientedGrowth2Data_x_set)
    elong_volume = property(_CompuCell.OrientedGrowth2Data_elong_volume_get, _CompuCell.OrientedGrowth2Data_elong_volume_set)
    elong_x = property(_CompuCell.OrientedGrowth2Data_elong_x_get, _CompuCell.OrientedGrowth2Data_elong_x_set)
    elong_y = property(_CompuCell.OrientedGrowth2Data_elong_y_get, _CompuCell.OrientedGrowth2Data_elong_y_set)
    elong_z = property(_CompuCell.OrientedGrowth2Data_elong_z_get, _CompuCell.OrientedGrowth2Data_elong_z_set)
    elong_xCOM = property(_CompuCell.OrientedGrowth2Data_elong_xCOM_get, _CompuCell.OrientedGrowth2Data_elong_xCOM_set)
    elong_yCOM = property(_CompuCell.OrientedGrowth2Data_elong_yCOM_get, _CompuCell.OrientedGrowth2Data_elong_yCOM_set)
    elong_zCOM = property(_CompuCell.OrientedGrowth2Data_elong_zCOM_get, _CompuCell.OrientedGrowth2Data_elong_zCOM_set)
    elong_targetWidth = property(_CompuCell.OrientedGrowth2Data_elong_targetWidth_get, _CompuCell.OrientedGrowth2Data_elong_targetWidth_set)
    elong_targetLength = property(_CompuCell.OrientedGrowth2Data_elong_targetLength_get, _CompuCell.OrientedGrowth2Data_elong_targetLength_set)
    elong_apicalRadius = property(_CompuCell.OrientedGrowth2Data_elong_apicalRadius_get, _CompuCell.OrientedGrowth2Data_elong_apicalRadius_set)
    elong_basalRadius = property(_CompuCell.OrientedGrowth2Data_elong_basalRadius_get, _CompuCell.OrientedGrowth2Data_elong_basalRadius_set)
    elong_enabled = property(_CompuCell.OrientedGrowth2Data_elong_enabled_get, _CompuCell.OrientedGrowth2Data_elong_enabled_set)
    elong_constricted = property(_CompuCell.OrientedGrowth2Data_elong_constricted_get, _CompuCell.OrientedGrowth2Data_elong_constricted_set)

# Register OrientedGrowth2Data in _CompuCell:
_CompuCell.OrientedGrowth2Data_swigregister(OrientedGrowth2Data)
class OrientedGrowth2DataAccessorTemplate(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.OrientedGrowth2DataAccessorTemplate_get(self, *args)

    def __init__(self, *args):
        _CompuCell.OrientedGrowth2DataAccessorTemplate_swiginit(self, _CompuCell.new_OrientedGrowth2DataAccessorTemplate(*args))
    __swig_destroy__ = _CompuCell.delete_OrientedGrowth2DataAccessorTemplate

# Register OrientedGrowth2DataAccessorTemplate in _CompuCell:
_CompuCell.OrientedGrowth2DataAccessorTemplate_swigregister(OrientedGrowth2DataAccessorTemplate)
class OrientedGrowth2Plugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.OrientedGrowth2Plugin_swiginit(self, _CompuCell.new_OrientedGrowth2Plugin(*args))
    __swig_destroy__ = _CompuCell.delete_OrientedGrowth2Plugin

    def getOrientedGrowth2DataAccessorPtr(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getOrientedGrowth2DataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_changeEnergy(self, *args)
    xml_energy_penalty = property(_CompuCell.OrientedGrowth2Plugin_xml_energy_penalty_get, _CompuCell.OrientedGrowth2Plugin_xml_energy_penalty_set)
    xml_energy_falloff = property(_CompuCell.OrientedGrowth2Plugin_xml_energy_falloff_get, _CompuCell.OrientedGrowth2Plugin_xml_energy_falloff_set)

    def setConstraintWidth(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setConstraintWidth(self, *args)

    def setConstraintLength(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setConstraintLength(self, *args)

    def setConstraintVolume(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setConstraintVolume(self, *args)

    def setApicalRadius(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setApicalRadius(self, *args)

    def setBasalRadius(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setBasalRadius(self, *args)

    def setElongationAxis(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setElongationAxis(self, *args)

    def setElongationCOM(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setElongationCOM(self, *args)

    def setElongationEnabled(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setElongationEnabled(self, *args)

    def setConstrictionEnabled(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_setConstrictionEnabled(self, *args)

    def updateElongationAxis(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_updateElongationAxis(self, *args)

    def getConstraintWidth(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getConstraintWidth(self, *args)

    def getConstraintLength(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getConstraintLength(self, *args)

    def getConstraintVolume(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getConstraintVolume(self, *args)

    def getApicalRadius(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getApicalRadius(self, *args)

    def getBasalRadius(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getBasalRadius(self, *args)

    def getElongationAxis_X(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getElongationAxis_X(self, *args)

    def getElongationAxis_Y(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getElongationAxis_Y(self, *args)

    def getElongationAxis_Z(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getElongationAxis_Z(self, *args)

    def getElongationCOM_X(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getElongationCOM_X(self, *args)

    def getElongationCOM_Y(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getElongationCOM_Y(self, *args)

    def getElongationCOM_Z(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getElongationCOM_Z(self, *args)

    def getElongationEnabled(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getElongationEnabled(self, *args)

    def getConstrictionEnabled(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_getConstrictionEnabled(self, *args)

    def step(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_step(self, *args)

    def init(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.OrientedGrowth2Plugin_toString(self, *args)

# Register OrientedGrowth2Plugin in _CompuCell:
_CompuCell.OrientedGrowth2Plugin_swigregister(OrientedGrowth2Plugin)

def getOrientedGrowth2Plugin(*args):
    return _CompuCell.getOrientedGrowth2Plugin(*args)
class ContactOrientationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactOrientationData_swiginit(self, _CompuCell.new_ContactOrientationData(*args))
    __swig_destroy__ = _CompuCell.delete_ContactOrientationData
    oriantationVec = property(_CompuCell.ContactOrientationData_oriantationVec_get, _CompuCell.ContactOrientationData_oriantationVec_set)
    alpha = property(_CompuCell.ContactOrientationData_alpha_get, _CompuCell.ContactOrientationData_alpha_set)

# Register ContactOrientationData in _CompuCell:
_CompuCell.ContactOrientationData_swigregister(ContactOrientationData)
class ContactOrientationDataAccessorTemplate(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.ContactOrientationDataAccessorTemplate_get(self, *args)

    def __init__(self, *args):
        _CompuCell.ContactOrientationDataAccessorTemplate_swiginit(self, _CompuCell.new_ContactOrientationDataAccessorTemplate(*args))
    __swig_destroy__ = _CompuCell.delete_ContactOrientationDataAccessorTemplate

# Register ContactOrientationDataAccessorTemplate in _CompuCell:
_CompuCell.ContactOrientationDataAccessorTemplate_swigregister(ContactOrientationDataAccessorTemplate)
class ContactOrientationPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ContactOrientationPlugin_swiginit(self, _CompuCell.new_ContactOrientationPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ContactOrientationPlugin

    def getContactOrientationDataAccessorPtr(self, *args):
        return _CompuCell.ContactOrientationPlugin_getContactOrientationDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactOrientationPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactOrientationPlugin_init(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.ContactOrientationPlugin_handleEvent(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactOrientationPlugin_extraInit(self, *args)

    def setOriantationVector(self, *args):
        return _CompuCell.ContactOrientationPlugin_setOriantationVector(self, *args)

    def getOriantationVector(self, *args):
        return _CompuCell.ContactOrientationPlugin_getOriantationVector(self, *args)

    def setAlpha(self, *args):
        return _CompuCell.ContactOrientationPlugin_setAlpha(self, *args)

    def getAlpha(self, *args):
        return _CompuCell.ContactOrientationPlugin_getAlpha(self, *args)

    def update(self, *args):
        return _CompuCell.ContactOrientationPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactOrientationPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactOrientationPlugin_toString(self, *args)

    def contactEnergy(self, *args):
        return _CompuCell.ContactOrientationPlugin_contactEnergy(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactOrientationPlugin_setContactEnergy(self, *args)

# Register ContactOrientationPlugin in _CompuCell:
_CompuCell.ContactOrientationPlugin_swigregister(ContactOrientationPlugin)

def getContactOrientationPlugin(*args):
    return _CompuCell.getContactOrientationPlugin(*args)
class Array3DCUDAunsignedchar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Array3DCUDAunsignedchar_swiginit(self, _CompuCell.new_Array3DCUDAunsignedchar(*args))
    __swig_destroy__ = _CompuCell.delete_Array3DCUDAunsignedchar

    def allocateArray(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_allocateArray(self, *args)

    def getContainer(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getContainer(self, *args)

    def getDirect(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getDirect(self, *args)

    def setDirect(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_setDirect(self, *args)

    def isValid(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_isValid(self, *args)

    def set(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_set(self, *args)

    def get(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_setByIndex(self, *args)

    def swapArrays(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_swapArrays(self, *args)

    def getArraySize(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getArraySize(self, *args)

    def getInternalDim(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getInternalDim(self, *args)

    def getDim(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getDim(self, *args)

    def swapQuick(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_swapQuick(self, *args)

# Register Array3DCUDAunsignedchar in _CompuCell:
_CompuCell.Array3DCUDAunsignedchar_swigregister(Array3DCUDAunsignedchar)
class BoundaryMonitorPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.BoundaryMonitorPlugin_swiginit(self, _CompuCell.new_BoundaryMonitorPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_BoundaryMonitorPlugin

    def getBoundaryArray(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_getBoundaryArray(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_toString(self, *args)

# Register BoundaryMonitorPlugin in _CompuCell:
_CompuCell.BoundaryMonitorPlugin_swigregister(BoundaryMonitorPlugin)

def getBoundaryMonitorPlugin(*args):
    return _CompuCell.getBoundaryMonitorPlugin(*args)
class Polarization23Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Polarization23Data_swiginit(self, _CompuCell.new_Polarization23Data(*args))
    __swig_destroy__ = _CompuCell.delete_Polarization23Data
    polarizationVec = property(_CompuCell.Polarization23Data_polarizationVec_get, _CompuCell.Polarization23Data_polarizationVec_set)
    type1 = property(_CompuCell.Polarization23Data_type1_get, _CompuCell.Polarization23Data_type1_set)
    type2 = property(_CompuCell.Polarization23Data_type2_get, _CompuCell.Polarization23Data_type2_set)
    _lambda = property(_CompuCell.Polarization23Data__lambda_get, _CompuCell.Polarization23Data__lambda_set)

# Register Polarization23Data in _CompuCell:
_CompuCell.Polarization23Data_swigregister(Polarization23Data)
class Polarization23DataAccessorTemplate(ExtraMembersGroupAccessorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.Polarization23DataAccessorTemplate_get(self, *args)

    def __init__(self, *args):
        _CompuCell.Polarization23DataAccessorTemplate_swiginit(self, _CompuCell.new_Polarization23DataAccessorTemplate(*args))
    __swig_destroy__ = _CompuCell.delete_Polarization23DataAccessorTemplate

# Register Polarization23DataAccessorTemplate in _CompuCell:
_CompuCell.Polarization23DataAccessorTemplate_swigregister(Polarization23DataAccessorTemplate)
class Polarization23Plugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.Polarization23Plugin_swiginit(self, _CompuCell.new_Polarization23Plugin(*args))
    __swig_destroy__ = _CompuCell.delete_Polarization23Plugin

    def getPolarization23DataAccessorPtr(self, *args):
        return _CompuCell.Polarization23Plugin_getPolarization23DataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.Polarization23Plugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.Polarization23Plugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.Polarization23Plugin_extraInit(self, *args)

    def setPolarizationVector(self, *args):
        return _CompuCell.Polarization23Plugin_setPolarizationVector(self, *args)

    def getPolarizationVector(self, *args):
        return _CompuCell.Polarization23Plugin_getPolarizationVector(self, *args)

    def setPolarizationMarkers(self, *args):
        return _CompuCell.Polarization23Plugin_setPolarizationMarkers(self, *args)

    def getPolarizationMarkers(self, *args):
        return _CompuCell.Polarization23Plugin_getPolarizationMarkers(self, *args)

    def setLambdaPolarization(self, *args):
        return _CompuCell.Polarization23Plugin_setLambdaPolarization(self, *args)

    def getLambdaPolarization(self, *args):
        return _CompuCell.Polarization23Plugin_getLambdaPolarization(self, *args)

    def update(self, *args):
        return _CompuCell.Polarization23Plugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.Polarization23Plugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.Polarization23Plugin_toString(self, *args)

# Register Polarization23Plugin in _CompuCell:
_CompuCell.Polarization23Plugin_swigregister(Polarization23Plugin)

def getPolarization23Plugin(*args):
    return _CompuCell.getPolarization23Plugin(*args)
class ClusterSurfacePlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ClusterSurfacePlugin_swiginit(self, _CompuCell.new_ClusterSurfacePlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ClusterSurfacePlugin

    def changeEnergy(self, *args):
        return _CompuCell.ClusterSurfacePlugin_changeEnergy(self, *args)

    def changeEnergyByCellId(self, *args):
        return _CompuCell.ClusterSurfacePlugin_changeEnergyByCellId(self, *args)

    def changeEnergyGlobal(self, *args):
        return _CompuCell.ClusterSurfacePlugin_changeEnergyGlobal(self, *args)

    def setTargetAndLambdaClusterSurface(self, *args):
        return _CompuCell.ClusterSurfacePlugin_setTargetAndLambdaClusterSurface(self, *args)

    def getTargetAndLambdaVolume(self, *args):
        return _CompuCell.ClusterSurfacePlugin_getTargetAndLambdaVolume(self, *args)

    def getNewOldClusterSurfaceDiffs(self, *args):
        return _CompuCell.ClusterSurfacePlugin_getNewOldClusterSurfaceDiffs(self, *args)

    def diffEnergy(self, *args):
        return _CompuCell.ClusterSurfacePlugin_diffEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ClusterSurfacePlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ClusterSurfacePlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ClusterSurfacePlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ClusterSurfacePlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ClusterSurfacePlugin_toString(self, *args)

# Register ClusterSurfacePlugin in _CompuCell:
_CompuCell.ClusterSurfacePlugin_swigregister(ClusterSurfacePlugin)

def getClusterSurfacePlugin(*args):
    return _CompuCell.getClusterSurfacePlugin(*args)
class ClusterSurfaceTrackerPlugin(CellGChangeWatcher):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ClusterSurfaceTrackerPlugin_swiginit(self, _CompuCell.new_ClusterSurfaceTrackerPlugin(*args))
    __swig_destroy__ = _CompuCell.delete_ClusterSurfaceTrackerPlugin

    def field3DChange(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_field3DChange(self, *args)

    def getLatticeMultiplicativeFactors(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_getLatticeMultiplicativeFactors(self, *args)

    def getMaxNeighborIndex(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_getMaxNeighborIndex(self, *args)

    def updateClusterSurface(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_updateClusterSurface(self, *args)

    def init(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_toString(self, *args)

# Register ClusterSurfaceTrackerPlugin in _CompuCell:
_CompuCell.ClusterSurfaceTrackerPlugin_swigregister(ClusterSurfaceTrackerPlugin)

def getClusterSurfaceTrackerPlugin(*args):
    return _CompuCell.getClusterSurfaceTrackerPlugin(*args)
class ReactionDiffusionSolverFVM(DiffusableVectorFloat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ReactionDiffusionSolverFVM_swiginit(self, _CompuCell.new_ReactionDiffusionSolverFVM(*args))
    __swig_destroy__ = _CompuCell.delete_ReactionDiffusionSolverFVM

    def getReactionDiffusionSolverFVMCellDataAccessorPtr(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getReactionDiffusionSolverFVMCellDataAccessorPtr(self, *args)

    def init(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_handleEvent(self, *args)

    def start(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_start(self, *args)

    def step(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_step(self, *args)

    def finish(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_finish(self, *args)

    def update(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_toString(self, *args)

    def getConcentrationField(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getConcentrationField(self, *args)

    def allocateDiffusableFieldVector(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_allocateDiffusableFieldVector(self, *args)

    def getConcentrationFieldNameVector(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getConcentrationFieldNameVector(self, *args)

    def updateFluctuationCompensator(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_updateFluctuationCompensator(self, *args)

    def loadCellData(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_loadCellData(self, *args)

    def loadFieldExpressions(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_loadFieldExpressions(self, *args)

    def loadFieldExpressionMultiplier(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_loadFieldExpressionMultiplier(self, *args)

    def loadFieldExpressionIndependent(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_loadFieldExpressionIndependent(self, *args)

    def initializeFVs(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_initializeFVs(self, *args)

    def initializeFieldUsingEquation(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_initializeFieldUsingEquation(self, *args)

    def getCoordsOfFV(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getCoordsOfFV(self, *args)

    def FVtoCellMap(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_FVtoCellMap(self, *args)

    def getConstantFieldDiffusivity(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getConstantFieldDiffusivity(self, *args)

    def getDiffusivityFieldPtVal(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getDiffusivityFieldPtVal(self, *args)

    def useConstantDiffusivity(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useConstantDiffusivity(self, *args)

    def useConstantDiffusivityByType(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useConstantDiffusivityByType(self, *args)

    def useFieldDiffusivityInMedium(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useFieldDiffusivityInMedium(self, *args)

    def useFieldDiffusivityEverywhere(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useFieldDiffusivityEverywhere(self, *args)

    def initDiffusivityField(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_initDiffusivityField(self, *args)

    def setDiffusivityFieldPtVal(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setDiffusivityFieldPtVal(self, *args)

    def getConcentrationFieldPtVal(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getConcentrationFieldPtVal(self, *args)

    def setConcentrationFieldPtVal(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setConcentrationFieldPtVal(self, *args)

    def useFixedFluxSurface(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useFixedFluxSurface(self, *args)

    def useFixedConcentration(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useFixedConcentration(self, *args)

    def useFixedFVConcentration(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useFixedFVConcentration(self, *args)

    def useDiffusiveSurface(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useDiffusiveSurface(self, *args)

    def useDiffusiveSurfaces(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_useDiffusiveSurfaces(self, *args)

    def usePermeableSurface(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_usePermeableSurface(self, *args)

    def usePermeableSurfaces(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_usePermeableSurfaces(self, *args)

    def initializeCellData(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_initializeCellData(self, *args)

    def getCellDiffusivityCoefficient(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getCellDiffusivityCoefficient(self, *args)

    def setCellDiffusivityCoefficient(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellDiffusivityCoefficient(self, *args)

    def setCellDiffusivityCoefficients(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellDiffusivityCoefficients(self, *args)

    def getPermeableCoefficients(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getPermeableCoefficients(self, *args)

    def setCellPermeationCoefficient(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellPermeationCoefficient(self, *args)

    def setCellPermeationCoefficients(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellPermeationCoefficients(self, *args)

    def setCellPermeableBiasCoefficient(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellPermeableBiasCoefficient(self, *args)

    def setCellPermeableBiasCoefficients(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellPermeableBiasCoefficients(self, *args)

    def setCellPermeableCoefficients(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellPermeableCoefficients(self, *args)

    def getCellOutwardFlux(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getCellOutwardFlux(self, *args)

    def setCellOutwardFlux(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setCellOutwardFlux(self, *args)

    def isValid(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_isValid(self, *args)

    def inContact(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_inContact(self, *args)

    def getNeighbors(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getNeighbors(self, *args)

    def getLatticePointFromPhys(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getLatticePointFromPhys(self, *args)

    def getSurfaceIndexByName(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getSurfaceIndexByName(self, *args)

    def getFieldIndexByName(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getFieldIndexByName(self, *args)

    def setUnitsTime(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setUnitsTime(self, *args)

    def getUnitsTime(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getUnitsTime(self, *args)

    def getIndexSurfToCoord(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getIndexSurfToCoord(self, *args)

    def getSurfaceNormSign(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getSurfaceNormSign(self, *args)

    def getLength(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getLength(self, *args)

    def getLengthBySurfaceIndex(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getLengthBySurfaceIndex(self, *args)

    def getSignedDistanceBySurfaceIndex(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getSignedDistanceBySurfaceIndex(self, *args)

    def getLengths(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getLengths(self, *args)

    def setLengths(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setLengths(self, *args)

    def getSurfaceArea(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getSurfaceArea(self, *args)

    def updateSurfaceAreas(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_updateSurfaceAreas(self, *args)

    def getTimeStep(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getTimeStep(self, *args)

    def getIntegrationTimeStep(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getIntegrationTimeStep(self, *args)

    def getPhysicalTime(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getPhysicalTime(self, *args)

    def getFieldFV(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getFieldFV(self, *args)

    def setFieldFV(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setFieldFV(self, *args)

    def getFVNeighborFVs(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getFVNeighborFVs(self, *args)

    def ind2pt(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_ind2pt(self, *args)

    def pt2ind(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_pt2ind(self, *args)

    def getFieldDim(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getFieldDim(self, *args)

    def setFieldExpressionMultiplier(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setFieldExpressionMultiplier(self, *args)

    def setFieldExpressionIndependent(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_setFieldExpressionIndependent(self, *args)

    def getFieldSymbol(self, *args):
        return _CompuCell.ReactionDiffusionSolverFVM_getFieldSymbol(self, *args)

# Register ReactionDiffusionSolverFVM in _CompuCell:
_CompuCell.ReactionDiffusionSolverFVM_swigregister(ReactionDiffusionSolverFVM)
class ReactionDiffusionSolverFV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ReactionDiffusionSolverFV_swiginit(self, _CompuCell.new_ReactionDiffusionSolverFV(*args))
    __swig_destroy__ = _CompuCell.delete_ReactionDiffusionSolverFV

    def getCoords(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getCoords(self, *args)

    def initialize(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_initialize(self, *args)

    def secrete(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_secrete(self, *args)

    def solve(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_solve(self, *args)

    def solveStable(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_solveStable(self, *args)

    def update(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_update(self, *args)

    def clearNeighbors(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_clearNeighbors(self, *args)

    def addNeighbor(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_addNeighbor(self, *args)

    def getNeighbors(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getNeighbors(self, *args)

    def useConstantDiffusivity(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useConstantDiffusivity(self, *args)

    def useConstantDiffusivityById(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useConstantDiffusivityById(self, *args)

    def useFieldDiffusivityEverywhere(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useFieldDiffusivityEverywhere(self, *args)

    def useFieldDiffusivityInMedium(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useFieldDiffusivityInMedium(self, *args)

    def useDiffusiveSurface(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useDiffusiveSurface(self, *args)

    def useDiffusiveSurfaces(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useDiffusiveSurfaces(self, *args)

    def usePermeableSurface(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_usePermeableSurface(self, *args)

    def usePermeableSurfaces(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_usePermeableSurfaces(self, *args)

    def useFixedFluxSurface(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useFixedFluxSurface(self, *args)

    def useFixedConcentration(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useFixedConcentration(self, *args)

    def useFixedFVConcentration(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useFixedFVConcentration(self, *args)

    def useCellInterfaceFlux(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_useCellInterfaceFlux(self, *args)

    def registerFieldSymbol(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_registerFieldSymbol(self, *args)

    def setDiagonalFunctionExpression(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_setDiagonalFunctionExpression(self, *args)

    def setOffDiagonalFunctionExpression(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_setOffDiagonalFunctionExpression(self, *args)

    def zeroMuParserFunction(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_zeroMuParserFunction(self, *args)

    def templateParserFunction(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_templateParserFunction(self, *args)

    def setConcentrationVec(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_setConcentrationVec(self, *args)

    def setConcentration(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_setConcentration(self, *args)

    def addConcentrationVecIncrement(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_addConcentrationVecIncrement(self, *args)

    def getConcentrationVec(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getConcentrationVec(self, *args)

    def getConcentration(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getConcentration(self, *args)

    def getConcentrationOld(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getConcentrationOld(self, *args)

    def getFieldDiffusivity(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getFieldDiffusivity(self, *args)

    def getCellOutwardFlux(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getCellOutwardFlux(self, *args)

    def getCellOutwardFluxes(self, *args):
        return _CompuCell.ReactionDiffusionSolverFV_getCellOutwardFluxes(self, *args)

# Register ReactionDiffusionSolverFV in _CompuCell:
_CompuCell.ReactionDiffusionSolverFV_swigregister(ReactionDiffusionSolverFV)
class ReactionDiffusionSolverFVMCellData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CompuCell.ReactionDiffusionSolverFVMCellData_swiginit(self, _CompuCell.new_ReactionDiffusionSolverFVMCellData(*args))
    __swig_destroy__ = _CompuCell.delete_ReactionDiffusionSolverFVMCellData
    permeationCoefficients = property(_CompuCell.ReactionDiffusionSolverFVMCellData_permeationCoefficients_get, _CompuCell.ReactionDiffusionSolverFVMCellData_permeationCoefficients_set)
    permeableBiasCoefficients = property(_CompuCell.ReactionDiffusionSolverFVMCellData_permeableBiasCoefficients_get, _CompuCell.ReactionDiffusionSolverFVMCellData_permeableBiasCoefficients_set)
    diffusivityCoefficients = property(_CompuCell.ReactionDiffusionSolverFVMCellData_diffusivityCoefficients_get, _CompuCell.ReactionDiffusionSolverFVMCellData_diffusivityCoefficients_set)
    outwardFluxValues = property(_CompuCell.ReactionDiffusionSolverFVMCellData_outwardFluxValues_get, _CompuCell.ReactionDiffusionSolverFVMCellData_outwardFluxValues_set)

# Register ReactionDiffusionSolverFVMCellData in _CompuCell:
_CompuCell.ReactionDiffusionSolverFVMCellData_swigregister(ReactionDiffusionSolverFVMCellData)

def getReactionDiffusionSolverFVMSteppable(*args):
    return _CompuCell.getReactionDiffusionSolverFVMSteppable(*args)

