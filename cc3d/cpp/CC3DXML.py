# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CC3DXML
else:
    import _CC3DXML

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CC3DXML.delete_SwigPyIterator

    def value(self):
        return _CC3DXML.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CC3DXML.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CC3DXML.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CC3DXML.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CC3DXML.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CC3DXML.SwigPyIterator_copy(self)

    def next(self):
        return _CC3DXML.SwigPyIterator_next(self)

    def __next__(self):
        return _CC3DXML.SwigPyIterator___next__(self)

    def previous(self):
        return _CC3DXML.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CC3DXML.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CC3DXML.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CC3DXML.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CC3DXML.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CC3DXML.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CC3DXML.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CC3DXML.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CC3DXML:
_CC3DXML.SwigPyIterator_swigregister(SwigPyIterator)
class ListCC3DXMLElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.ListCC3DXMLElement_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.ListCC3DXMLElement___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.ListCC3DXMLElement___bool__(self)

    def __len__(self):
        return _CC3DXML.ListCC3DXMLElement___len__(self)

    def __getslice__(self, i, j):
        return _CC3DXML.ListCC3DXMLElement___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CC3DXML.ListCC3DXMLElement___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___setitem__(self, *args)

    def pop(self):
        return _CC3DXML.ListCC3DXMLElement_pop(self)

    def append(self, x):
        return _CC3DXML.ListCC3DXMLElement_append(self, x)

    def empty(self):
        return _CC3DXML.ListCC3DXMLElement_empty(self)

    def size(self):
        return _CC3DXML.ListCC3DXMLElement_size(self)

    def swap(self, v):
        return _CC3DXML.ListCC3DXMLElement_swap(self, v)

    def begin(self):
        return _CC3DXML.ListCC3DXMLElement_begin(self)

    def end(self):
        return _CC3DXML.ListCC3DXMLElement_end(self)

    def rbegin(self):
        return _CC3DXML.ListCC3DXMLElement_rbegin(self)

    def rend(self):
        return _CC3DXML.ListCC3DXMLElement_rend(self)

    def clear(self):
        return _CC3DXML.ListCC3DXMLElement_clear(self)

    def get_allocator(self):
        return _CC3DXML.ListCC3DXMLElement_get_allocator(self)

    def pop_back(self):
        return _CC3DXML.ListCC3DXMLElement_pop_back(self)

    def erase(self, *args):
        return _CC3DXML.ListCC3DXMLElement_erase(self, *args)

    def __init__(self, *args):
        _CC3DXML.ListCC3DXMLElement_swiginit(self, _CC3DXML.new_ListCC3DXMLElement(*args))

    def push_back(self, x):
        return _CC3DXML.ListCC3DXMLElement_push_back(self, x)

    def front(self):
        return _CC3DXML.ListCC3DXMLElement_front(self)

    def back(self):
        return _CC3DXML.ListCC3DXMLElement_back(self)

    def assign(self, n, x):
        return _CC3DXML.ListCC3DXMLElement_assign(self, n, x)

    def resize(self, *args):
        return _CC3DXML.ListCC3DXMLElement_resize(self, *args)

    def insert(self, *args):
        return _CC3DXML.ListCC3DXMLElement_insert(self, *args)

    def reserve(self, n):
        return _CC3DXML.ListCC3DXMLElement_reserve(self, n)

    def capacity(self):
        return _CC3DXML.ListCC3DXMLElement_capacity(self)
    __swig_destroy__ = _CC3DXML.delete_ListCC3DXMLElement

# Register ListCC3DXMLElement in _CC3DXML:
_CC3DXML.ListCC3DXMLElement_swigregister(ListCC3DXMLElement)
class CC3DXMLElementPtrT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pValue):
        _CC3DXML.CC3DXMLElementPtrT_swiginit(self, _CC3DXML.new_CC3DXMLElementPtrT(pValue))
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElementPtrT

    def __ref__(self):
        return _CC3DXML.CC3DXMLElementPtrT___ref__(self)

    def __deref__(self):
        return _CC3DXML.CC3DXMLElementPtrT___deref__(self)

    def writeCC3DXMLElement(self, _out, _indent=0):
        return _CC3DXML.CC3DXMLElementPtrT_writeCC3DXMLElement(self, _out, _indent)

    def writeCC3DXMLElementInPython(self, _out, _parentElement, _indent=4, _commentElemFlag=False):
        return _CC3DXML.CC3DXMLElementPtrT_writeCC3DXMLElementInPython(self, _out, _parentElement, _indent, _commentElemFlag)

    def getCC3DXMLElementString(self):
        return _CC3DXML.CC3DXMLElementPtrT_getCC3DXMLElementString(self)

    def saveXML(self, _fileName):
        return _CC3DXML.CC3DXMLElementPtrT_saveXML(self, _fileName)

    def saveXMLInPython(self, _fileName):
        return _CC3DXML.CC3DXMLElementPtrT_saveXMLInPython(self, _fileName)

    def getXMLAsPython(self):
        return _CC3DXML.CC3DXMLElementPtrT_getXMLAsPython(self)

    def addChild(self, _child):
        return _CC3DXML.CC3DXMLElementPtrT_addChild(self, _child)

    def attachElement(self, *args):
        return _CC3DXML.CC3DXMLElementPtrT_attachElement(self, *args)

    def attachAttribute(self, _attrName, _attrValue):
        return _CC3DXML.CC3DXMLElementPtrT_attachAttribute(self, _attrName, _attrValue)

    def findAttribute(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_findAttribute(self, key)

    def getAttributes(self):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributes(self)

    def getAttribute(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttribute(self, key)

    def getAttributeAsDouble(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsDouble(self, key)

    def getAttributeAsUInt(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsUInt(self, key)

    def getAttributeAsInt(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsInt(self, key)

    def getAttributeAsShort(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsShort(self, key)

    def getAttributeAsUShort(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsUShort(self, key)

    def getAttributeAsBool(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsBool(self, key)

    def getAttributeAsUByte(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsUByte(self, key)

    def getAttributeAsByte(self, key):
        return _CC3DXML.CC3DXMLElementPtrT_getAttributeAsByte(self, key)

    def getData(self):
        return _CC3DXML.CC3DXMLElementPtrT_getData(self)

    def getElements(self, *args):
        return _CC3DXML.CC3DXMLElementPtrT_getElements(self, *args)

    def getFirstElement(self, _name, _attributes=None):
        return _CC3DXML.CC3DXMLElementPtrT_getFirstElement(self, _name, _attributes)

    def findElement(self, _name, _attributes=None):
        return _CC3DXML.CC3DXMLElementPtrT_findElement(self, _name, _attributes)

    def checkMatch(self, _name, _attributes):
        return _CC3DXML.CC3DXMLElementPtrT_checkMatch(self, _name, _attributes)

    def updateElementAttributes(self, _attributes=None):
        return _CC3DXML.CC3DXMLElementPtrT_updateElementAttributes(self, _attributes)

    def updateElementValue(self, _cdata):
        return _CC3DXML.CC3DXMLElementPtrT_updateElementValue(self, _cdata)

    def getNumberOfChildren(self):
        return _CC3DXML.CC3DXMLElementPtrT_getNumberOfChildren(self)

    def getUInt(self):
        return _CC3DXML.CC3DXMLElementPtrT_getUInt(self)

    def getInt(self):
        return _CC3DXML.CC3DXMLElementPtrT_getInt(self)

    def getByte(self):
        return _CC3DXML.CC3DXMLElementPtrT_getByte(self)

    def getUByte(self):
        return _CC3DXML.CC3DXMLElementPtrT_getUByte(self)

    def getShort(self):
        return _CC3DXML.CC3DXMLElementPtrT_getShort(self)

    def getUShort(self):
        return _CC3DXML.CC3DXMLElementPtrT_getUShort(self)

    def getDouble(self):
        return _CC3DXML.CC3DXMLElementPtrT_getDouble(self)

    def getBool(self):
        return _CC3DXML.CC3DXMLElementPtrT_getBool(self)

    def getText(self):
        return _CC3DXML.CC3DXMLElementPtrT_getText(self)

    def getName(self):
        return _CC3DXML.CC3DXMLElementPtrT_getName(self)

    def getPointerAsLong(self):
        return _CC3DXML.CC3DXMLElementPtrT_getPointerAsLong(self)

    def setElemNameCounterDictPtr(self, _ptr):
        return _CC3DXML.CC3DXMLElementPtrT_setElemNameCounterDictPtr(self, _ptr)

    def addComment(self, _comment):
        return _CC3DXML.CC3DXMLElementPtrT_addComment(self, _comment)

    def commentOutElement(self):
        return _CC3DXML.CC3DXMLElementPtrT_commentOutElement(self)
    name = property(_CC3DXML.CC3DXMLElementPtrT_name_get, _CC3DXML.CC3DXMLElementPtrT_name_set)
    cdata = property(_CC3DXML.CC3DXMLElementPtrT_cdata_get, _CC3DXML.CC3DXMLElementPtrT_cdata_set)
    attributes = property(_CC3DXML.CC3DXMLElementPtrT_attributes_get, _CC3DXML.CC3DXMLElementPtrT_attributes_set)
    additionalChildElements = property(_CC3DXML.CC3DXMLElementPtrT_additionalChildElements_get, _CC3DXML.CC3DXMLElementPtrT_additionalChildElements_set)
    children = property(_CC3DXML.CC3DXMLElementPtrT_children_get, _CC3DXML.CC3DXMLElementPtrT_children_set)
    comment = property(_CC3DXML.CC3DXMLElementPtrT_comment_get, _CC3DXML.CC3DXMLElementPtrT_comment_set)

# Register CC3DXMLElementPtrT in _CC3DXML:
_CC3DXML.CC3DXMLElementPtrT_swigregister(CC3DXMLElementPtrT)
class CC3DXMLElementList(ListCC3DXMLElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElementList

    def getBaseClass(self):
        return _CC3DXML.CC3DXMLElementList_getBaseClass(self)

    def getElement(self, _index):
        return _CC3DXML.CC3DXMLElementList_getElement(self, _index)

    def __init__(self):
        _CC3DXML.CC3DXMLElementList_swiginit(self, _CC3DXML.new_CC3DXMLElementList())

# Register CC3DXMLElementList in _CC3DXML:
_CC3DXML.CC3DXMLElementList_swigregister(CC3DXMLElementList)
class CC3DXMLElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CC3DXML.CC3DXMLElement_swiginit(self, _CC3DXML.new_CC3DXMLElement(*args))
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElement

    def writeCC3DXMLElement(self, _out, _indent=0):
        return _CC3DXML.CC3DXMLElement_writeCC3DXMLElement(self, _out, _indent)

    def writeCC3DXMLElementInPython(self, _out, _parentElement, _indent=4, _commentElemFlag=False):
        return _CC3DXML.CC3DXMLElement_writeCC3DXMLElementInPython(self, _out, _parentElement, _indent, _commentElemFlag)

    def getCC3DXMLElementString(self):
        return _CC3DXML.CC3DXMLElement_getCC3DXMLElementString(self)

    def saveXML(self, _fileName):
        return _CC3DXML.CC3DXMLElement_saveXML(self, _fileName)

    def saveXMLInPython(self, _fileName):
        return _CC3DXML.CC3DXMLElement_saveXMLInPython(self, _fileName)

    def getXMLAsPython(self):
        return _CC3DXML.CC3DXMLElement_getXMLAsPython(self)

    def addChild(self, _child):
        return _CC3DXML.CC3DXMLElement_addChild(self, _child)

    def attachElement(self, *args):
        return _CC3DXML.CC3DXMLElement_attachElement(self, *args)

    def attachAttribute(self, _attrName, _attrValue):
        return _CC3DXML.CC3DXMLElement_attachAttribute(self, _attrName, _attrValue)

    def findAttribute(self, key):
        return _CC3DXML.CC3DXMLElement_findAttribute(self, key)

    def getAttributes(self):
        return _CC3DXML.CC3DXMLElement_getAttributes(self)

    def getAttribute(self, key):
        return _CC3DXML.CC3DXMLElement_getAttribute(self, key)

    def getAttributeAsDouble(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsDouble(self, key)

    def getAttributeAsUInt(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsUInt(self, key)

    def getAttributeAsInt(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsInt(self, key)

    def getAttributeAsShort(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsShort(self, key)

    def getAttributeAsUShort(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsUShort(self, key)

    def getAttributeAsBool(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsBool(self, key)

    def getAttributeAsUByte(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsUByte(self, key)

    def getAttributeAsByte(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsByte(self, key)

    def getData(self):
        return _CC3DXML.CC3DXMLElement_getData(self)

    def getElements(self, *args):
        return _CC3DXML.CC3DXMLElement_getElements(self, *args)

    def getFirstElement(self, _name, _attributes=None):
        return _CC3DXML.CC3DXMLElement_getFirstElement(self, _name, _attributes)

    def findElement(self, _name, _attributes=None):
        return _CC3DXML.CC3DXMLElement_findElement(self, _name, _attributes)

    def checkMatch(self, _name, _attributes):
        return _CC3DXML.CC3DXMLElement_checkMatch(self, _name, _attributes)

    def updateElementAttributes(self, _attributes=None):
        return _CC3DXML.CC3DXMLElement_updateElementAttributes(self, _attributes)

    def updateElementValue(self, _cdata):
        return _CC3DXML.CC3DXMLElement_updateElementValue(self, _cdata)

    def getNumberOfChildren(self):
        return _CC3DXML.CC3DXMLElement_getNumberOfChildren(self)

    def getUInt(self):
        return _CC3DXML.CC3DXMLElement_getUInt(self)

    def getInt(self):
        return _CC3DXML.CC3DXMLElement_getInt(self)

    def getByte(self):
        return _CC3DXML.CC3DXMLElement_getByte(self)

    def getUByte(self):
        return _CC3DXML.CC3DXMLElement_getUByte(self)

    def getShort(self):
        return _CC3DXML.CC3DXMLElement_getShort(self)

    def getUShort(self):
        return _CC3DXML.CC3DXMLElement_getUShort(self)

    def getDouble(self):
        return _CC3DXML.CC3DXMLElement_getDouble(self)

    def getBool(self):
        return _CC3DXML.CC3DXMLElement_getBool(self)

    def getText(self):
        return _CC3DXML.CC3DXMLElement_getText(self)

    def getName(self):
        return _CC3DXML.CC3DXMLElement_getName(self)

    def getPointerAsLong(self):
        return _CC3DXML.CC3DXMLElement_getPointerAsLong(self)

    def setElemNameCounterDictPtr(self, _ptr):
        return _CC3DXML.CC3DXMLElement_setElemNameCounterDictPtr(self, _ptr)

    def addComment(self, _comment):
        return _CC3DXML.CC3DXMLElement_addComment(self, _comment)

    def commentOutElement(self):
        return _CC3DXML.CC3DXMLElement_commentOutElement(self)
    name = property(_CC3DXML.CC3DXMLElement_name_get, _CC3DXML.CC3DXMLElement_name_set)
    cdata = property(_CC3DXML.CC3DXMLElement_cdata_get, _CC3DXML.CC3DXMLElement_cdata_set)
    attributes = property(_CC3DXML.CC3DXMLElement_attributes_get, _CC3DXML.CC3DXMLElement_attributes_set)
    additionalChildElements = property(_CC3DXML.CC3DXMLElement_additionalChildElements_get, _CC3DXML.CC3DXMLElement_additionalChildElements_set)
    children = property(_CC3DXML.CC3DXMLElement_children_get, _CC3DXML.CC3DXMLElement_children_set)
    comment = property(_CC3DXML.CC3DXMLElement_comment_get, _CC3DXML.CC3DXMLElement_comment_set)

# Register CC3DXMLElement in _CC3DXML:
_CC3DXML.CC3DXMLElement_swigregister(CC3DXMLElement)
class CC3DXMLElementWalker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CC3DXML.CC3DXMLElementWalker_swiginit(self, _CC3DXML.new_CC3DXMLElementWalker())

    def iterateCC3DXMLElement(self, _element):
        return _CC3DXML.CC3DXMLElementWalker_iterateCC3DXMLElement(self, _element)
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElementWalker

# Register CC3DXMLElementWalker in _CC3DXML:
_CC3DXML.CC3DXMLElementWalker_swigregister(CC3DXMLElementWalker)
class MapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.MapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.MapStrStr___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.MapStrStr___bool__(self)

    def __len__(self):
        return _CC3DXML.MapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _CC3DXML.MapStrStr___getitem__(self, key)

    def __delitem__(self, key):
        return _CC3DXML.MapStrStr___delitem__(self, key)

    def has_key(self, key):
        return _CC3DXML.MapStrStr_has_key(self, key)

    def keys(self):
        return _CC3DXML.MapStrStr_keys(self)

    def values(self):
        return _CC3DXML.MapStrStr_values(self)

    def items(self):
        return _CC3DXML.MapStrStr_items(self)

    def __contains__(self, key):
        return _CC3DXML.MapStrStr___contains__(self, key)

    def key_iterator(self):
        return _CC3DXML.MapStrStr_key_iterator(self)

    def value_iterator(self):
        return _CC3DXML.MapStrStr_value_iterator(self)

    def __setitem__(self, *args):
        return _CC3DXML.MapStrStr___setitem__(self, *args)

    def asdict(self):
        return _CC3DXML.MapStrStr_asdict(self)

    def __init__(self, *args):
        _CC3DXML.MapStrStr_swiginit(self, _CC3DXML.new_MapStrStr(*args))

    def empty(self):
        return _CC3DXML.MapStrStr_empty(self)

    def size(self):
        return _CC3DXML.MapStrStr_size(self)

    def swap(self, v):
        return _CC3DXML.MapStrStr_swap(self, v)

    def begin(self):
        return _CC3DXML.MapStrStr_begin(self)

    def end(self):
        return _CC3DXML.MapStrStr_end(self)

    def rbegin(self):
        return _CC3DXML.MapStrStr_rbegin(self)

    def rend(self):
        return _CC3DXML.MapStrStr_rend(self)

    def clear(self):
        return _CC3DXML.MapStrStr_clear(self)

    def get_allocator(self):
        return _CC3DXML.MapStrStr_get_allocator(self)

    def count(self, x):
        return _CC3DXML.MapStrStr_count(self, x)

    def erase(self, *args):
        return _CC3DXML.MapStrStr_erase(self, *args)

    def find(self, x):
        return _CC3DXML.MapStrStr_find(self, x)

    def lower_bound(self, x):
        return _CC3DXML.MapStrStr_lower_bound(self, x)

    def upper_bound(self, x):
        return _CC3DXML.MapStrStr_upper_bound(self, x)
    __swig_destroy__ = _CC3DXML.delete_MapStrStr

# Register MapStrStr in _CC3DXML:
_CC3DXML.MapStrStr_swigregister(MapStrStr)
class MapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.MapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.MapIntStr___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.MapIntStr___bool__(self)

    def __len__(self):
        return _CC3DXML.MapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _CC3DXML.MapIntStr___getitem__(self, key)

    def __delitem__(self, key):
        return _CC3DXML.MapIntStr___delitem__(self, key)

    def has_key(self, key):
        return _CC3DXML.MapIntStr_has_key(self, key)

    def keys(self):
        return _CC3DXML.MapIntStr_keys(self)

    def values(self):
        return _CC3DXML.MapIntStr_values(self)

    def items(self):
        return _CC3DXML.MapIntStr_items(self)

    def __contains__(self, key):
        return _CC3DXML.MapIntStr___contains__(self, key)

    def key_iterator(self):
        return _CC3DXML.MapIntStr_key_iterator(self)

    def value_iterator(self):
        return _CC3DXML.MapIntStr_value_iterator(self)

    def __setitem__(self, *args):
        return _CC3DXML.MapIntStr___setitem__(self, *args)

    def asdict(self):
        return _CC3DXML.MapIntStr_asdict(self)

    def __init__(self, *args):
        _CC3DXML.MapIntStr_swiginit(self, _CC3DXML.new_MapIntStr(*args))

    def empty(self):
        return _CC3DXML.MapIntStr_empty(self)

    def size(self):
        return _CC3DXML.MapIntStr_size(self)

    def swap(self, v):
        return _CC3DXML.MapIntStr_swap(self, v)

    def begin(self):
        return _CC3DXML.MapIntStr_begin(self)

    def end(self):
        return _CC3DXML.MapIntStr_end(self)

    def rbegin(self):
        return _CC3DXML.MapIntStr_rbegin(self)

    def rend(self):
        return _CC3DXML.MapIntStr_rend(self)

    def clear(self):
        return _CC3DXML.MapIntStr_clear(self)

    def get_allocator(self):
        return _CC3DXML.MapIntStr_get_allocator(self)

    def count(self, x):
        return _CC3DXML.MapIntStr_count(self, x)

    def erase(self, *args):
        return _CC3DXML.MapIntStr_erase(self, *args)

    def find(self, x):
        return _CC3DXML.MapIntStr_find(self, x)

    def lower_bound(self, x):
        return _CC3DXML.MapIntStr_lower_bound(self, x)

    def upper_bound(self, x):
        return _CC3DXML.MapIntStr_upper_bound(self, x)
    __swig_destroy__ = _CC3DXML.delete_MapIntStr

# Register MapIntStr in _CC3DXML:
_CC3DXML.MapIntStr_swigregister(MapIntStr)
class DoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.DoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.DoubleMap___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.DoubleMap___bool__(self)

    def __len__(self):
        return _CC3DXML.DoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _CC3DXML.DoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _CC3DXML.DoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _CC3DXML.DoubleMap_has_key(self, key)

    def keys(self):
        return _CC3DXML.DoubleMap_keys(self)

    def values(self):
        return _CC3DXML.DoubleMap_values(self)

    def items(self):
        return _CC3DXML.DoubleMap_items(self)

    def __contains__(self, key):
        return _CC3DXML.DoubleMap___contains__(self, key)

    def key_iterator(self):
        return _CC3DXML.DoubleMap_key_iterator(self)

    def value_iterator(self):
        return _CC3DXML.DoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _CC3DXML.DoubleMap___setitem__(self, *args)

    def asdict(self):
        return _CC3DXML.DoubleMap_asdict(self)

    def __init__(self, *args):
        _CC3DXML.DoubleMap_swiginit(self, _CC3DXML.new_DoubleMap(*args))

    def empty(self):
        return _CC3DXML.DoubleMap_empty(self)

    def size(self):
        return _CC3DXML.DoubleMap_size(self)

    def swap(self, v):
        return _CC3DXML.DoubleMap_swap(self, v)

    def begin(self):
        return _CC3DXML.DoubleMap_begin(self)

    def end(self):
        return _CC3DXML.DoubleMap_end(self)

    def rbegin(self):
        return _CC3DXML.DoubleMap_rbegin(self)

    def rend(self):
        return _CC3DXML.DoubleMap_rend(self)

    def clear(self):
        return _CC3DXML.DoubleMap_clear(self)

    def get_allocator(self):
        return _CC3DXML.DoubleMap_get_allocator(self)

    def count(self, x):
        return _CC3DXML.DoubleMap_count(self, x)

    def erase(self, *args):
        return _CC3DXML.DoubleMap_erase(self, *args)

    def find(self, x):
        return _CC3DXML.DoubleMap_find(self, x)

    def lower_bound(self, x):
        return _CC3DXML.DoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _CC3DXML.DoubleMap_upper_bound(self, x)
    __swig_destroy__ = _CC3DXML.delete_DoubleMap

# Register DoubleMap in _CC3DXML:
_CC3DXML.DoubleMap_swigregister(DoubleMap)
class CC3DXMLElementListIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CC3DXML.CC3DXMLElementListIterator_current_get, _CC3DXML.CC3DXMLElementListIterator_current_set)
    begin = property(_CC3DXML.CC3DXMLElementListIterator_begin_get, _CC3DXML.CC3DXMLElementListIterator_begin_set)
    end = property(_CC3DXML.CC3DXMLElementListIterator_end_get, _CC3DXML.CC3DXMLElementListIterator_end_set)

    def __init__(self, *args):
        _CC3DXML.CC3DXMLElementListIterator_swiginit(self, _CC3DXML.new_CC3DXMLElementListIterator(*args))

    def getCurrentRef(self):
        return _CC3DXML.CC3DXMLElementListIterator_getCurrentRef(self)

    def initialize(self, a):
        return _CC3DXML.CC3DXMLElementListIterator_initialize(self, a)

    def isEnd(self):
        return _CC3DXML.CC3DXMLElementListIterator_isEnd(self)

    def isBegin(self):
        return _CC3DXML.CC3DXMLElementListIterator_isBegin(self)

    def setToBegin(self):
        return _CC3DXML.CC3DXMLElementListIterator_setToBegin(self)

    def getCurrent(self):
        return _CC3DXML.CC3DXMLElementListIterator_getCurrent(self)

    def getEnd(self):
        return _CC3DXML.CC3DXMLElementListIterator_getEnd(self)

    def previous(self):
        return _CC3DXML.CC3DXMLElementListIterator_previous(self)

    def next(self):
        return _CC3DXML.CC3DXMLElementListIterator_next(self)
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElementListIterator

# Register CC3DXMLElementListIterator in _CC3DXML:
_CC3DXML.CC3DXMLElementListIterator_swigregister(CC3DXMLElementListIterator)
class StrStrPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CC3DXML.StrStrPair_swiginit(self, _CC3DXML.new_StrStrPair(*args))
    first = property(_CC3DXML.StrStrPair_first_get, _CC3DXML.StrStrPair_first_set)
    second = property(_CC3DXML.StrStrPair_second_get, _CC3DXML.StrStrPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CC3DXML.delete_StrStrPair

# Register StrStrPair in _CC3DXML:
_CC3DXML.StrStrPair_swigregister(StrStrPair)
class MapStrStrIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CC3DXML.MapStrStrIterator_current_get, _CC3DXML.MapStrStrIterator_current_set)
    begin = property(_CC3DXML.MapStrStrIterator_begin_get, _CC3DXML.MapStrStrIterator_begin_set)
    end = property(_CC3DXML.MapStrStrIterator_end_get, _CC3DXML.MapStrStrIterator_end_set)

    def __init__(self, *args):
        _CC3DXML.MapStrStrIterator_swiginit(self, _CC3DXML.new_MapStrStrIterator(*args))

    def getCurrentRef(self):
        return _CC3DXML.MapStrStrIterator_getCurrentRef(self)

    def initialize(self, a):
        return _CC3DXML.MapStrStrIterator_initialize(self, a)

    def isEnd(self):
        return _CC3DXML.MapStrStrIterator_isEnd(self)

    def isBegin(self):
        return _CC3DXML.MapStrStrIterator_isBegin(self)

    def setToBegin(self):
        return _CC3DXML.MapStrStrIterator_setToBegin(self)

    def getCurrent(self):
        return _CC3DXML.MapStrStrIterator_getCurrent(self)

    def getEnd(self):
        return _CC3DXML.MapStrStrIterator_getEnd(self)

    def previous(self):
        return _CC3DXML.MapStrStrIterator_previous(self)

    def next(self):
        return _CC3DXML.MapStrStrIterator_next(self)
    __swig_destroy__ = _CC3DXML.delete_MapStrStrIterator

# Register MapStrStrIterator in _CC3DXML:
_CC3DXML.MapStrStrIterator_swigregister(MapStrStrIterator)

def createStrStrMap():
    return _CC3DXML.createStrStrMap()

def createIntStrMap():
    return _CC3DXML.createIntStrMap()
class ListString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.ListString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.ListString___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.ListString___bool__(self)

    def __len__(self):
        return _CC3DXML.ListString___len__(self)

    def __getslice__(self, i, j):
        return _CC3DXML.ListString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CC3DXML.ListString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CC3DXML.ListString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CC3DXML.ListString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CC3DXML.ListString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CC3DXML.ListString___setitem__(self, *args)

    def pop(self):
        return _CC3DXML.ListString_pop(self)

    def append(self, x):
        return _CC3DXML.ListString_append(self, x)

    def empty(self):
        return _CC3DXML.ListString_empty(self)

    def size(self):
        return _CC3DXML.ListString_size(self)

    def swap(self, v):
        return _CC3DXML.ListString_swap(self, v)

    def begin(self):
        return _CC3DXML.ListString_begin(self)

    def end(self):
        return _CC3DXML.ListString_end(self)

    def rbegin(self):
        return _CC3DXML.ListString_rbegin(self)

    def rend(self):
        return _CC3DXML.ListString_rend(self)

    def clear(self):
        return _CC3DXML.ListString_clear(self)

    def get_allocator(self):
        return _CC3DXML.ListString_get_allocator(self)

    def pop_back(self):
        return _CC3DXML.ListString_pop_back(self)

    def erase(self, *args):
        return _CC3DXML.ListString_erase(self, *args)

    def __init__(self, *args):
        _CC3DXML.ListString_swiginit(self, _CC3DXML.new_ListString(*args))

    def push_back(self, x):
        return _CC3DXML.ListString_push_back(self, x)

    def front(self):
        return _CC3DXML.ListString_front(self)

    def back(self):
        return _CC3DXML.ListString_back(self)

    def assign(self, n, x):
        return _CC3DXML.ListString_assign(self, n, x)

    def resize(self, *args):
        return _CC3DXML.ListString_resize(self, *args)

    def insert(self, *args):
        return _CC3DXML.ListString_insert(self, *args)

    def pop_front(self):
        return _CC3DXML.ListString_pop_front(self)

    def push_front(self, x):
        return _CC3DXML.ListString_push_front(self, x)

    def reverse(self):
        return _CC3DXML.ListString_reverse(self)
    __swig_destroy__ = _CC3DXML.delete_ListString

# Register ListString in _CC3DXML:
_CC3DXML.ListString_swigregister(ListString)

def derefCC3DXMLElement(_elem):
    return _CC3DXML.derefCC3DXMLElement(_elem)
class STLPyIteratorCC3DXMLElementList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    current = property(_CC3DXML.STLPyIteratorCC3DXMLElementList_current_get, _CC3DXML.STLPyIteratorCC3DXMLElementList_current_set)
    begin = property(_CC3DXML.STLPyIteratorCC3DXMLElementList_begin_get, _CC3DXML.STLPyIteratorCC3DXMLElementList_begin_set)
    end = property(_CC3DXML.STLPyIteratorCC3DXMLElementList_end_get, _CC3DXML.STLPyIteratorCC3DXMLElementList_end_set)

    def __init__(self, *args):
        _CC3DXML.STLPyIteratorCC3DXMLElementList_swiginit(self, _CC3DXML.new_STLPyIteratorCC3DXMLElementList(*args))

    def getCurrentRef(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_getCurrentRef(self)

    def initialize(self, a):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_initialize(self, a)

    def isEnd(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_isEnd(self)

    def isBegin(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_isBegin(self)

    def setToBegin(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_setToBegin(self)

    def previous(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_previous(self)

    def next(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_next(self)
    __swig_destroy__ = _CC3DXML.delete_STLPyIteratorCC3DXMLElementList

# Register STLPyIteratorCC3DXMLElementList in _CC3DXML:
_CC3DXML.STLPyIteratorCC3DXMLElementList_swigregister(STLPyIteratorCC3DXMLElementList)

def getListString():
    return _CC3DXML.getListString()
class ListStringWrapped(ListString):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CC3DXML.ListStringWrapped_swiginit(self, _CC3DXML.new_ListStringWrapped())
    __swig_destroy__ = _CC3DXML.delete_ListStringWrapped

# Register ListStringWrapped in _CC3DXML:
_CC3DXML.ListStringWrapped_swigregister(ListStringWrapped)

def getListStringWrapped():
    return _CC3DXML.getListStringWrapped()

def getFirstElement(_list):
    return _CC3DXML.getFirstElement(_list)

