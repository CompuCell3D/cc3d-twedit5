# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PlayerPython
else:
    import _PlayerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PlayerPython.delete_SwigPyIterator

    def value(self):
        return _PlayerPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PlayerPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PlayerPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PlayerPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PlayerPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PlayerPython.SwigPyIterator_copy(self)

    def next(self):
        return _PlayerPython.SwigPyIterator_next(self)

    def __next__(self):
        return _PlayerPython.SwigPyIterator___next__(self)

    def previous(self):
        return _PlayerPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PlayerPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PlayerPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PlayerPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PlayerPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PlayerPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PlayerPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PlayerPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PlayerPython:
_PlayerPython.SwigPyIterator_swigregister(SwigPyIterator)
class vectorCell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorCell_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorCell___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorCell___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorCell___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorCell___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorCell___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorCell___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorCell___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorCell___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorCell___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorCell_pop(self)

    def append(self, x):
        return _PlayerPython.vectorCell_append(self, x)

    def empty(self):
        return _PlayerPython.vectorCell_empty(self)

    def size(self):
        return _PlayerPython.vectorCell_size(self)

    def swap(self, v):
        return _PlayerPython.vectorCell_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorCell_begin(self)

    def end(self):
        return _PlayerPython.vectorCell_end(self)

    def rbegin(self):
        return _PlayerPython.vectorCell_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorCell_rend(self)

    def clear(self):
        return _PlayerPython.vectorCell_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorCell_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorCell_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorCell_erase(self, *args)

    def __init__(self, *args):
        _PlayerPython.vectorCell_swiginit(self, _PlayerPython.new_vectorCell(*args))

    def push_back(self, x):
        return _PlayerPython.vectorCell_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorCell_front(self)

    def back(self):
        return _PlayerPython.vectorCell_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorCell_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorCell_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorCell_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorCell_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorCell_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorCell

# Register vectorCell in _PlayerPython:
_PlayerPython.vectorCell_swigregister(vectorCell)
class mapCellGPtrToFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.mapCellGPtrToFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.mapCellGPtrToFloat___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.mapCellGPtrToFloat___bool__(self)

    def __len__(self):
        return _PlayerPython.mapCellGPtrToFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _PlayerPython.mapCellGPtrToFloat___getitem__(self, key)

    def __delitem__(self, key):
        return _PlayerPython.mapCellGPtrToFloat___delitem__(self, key)

    def has_key(self, key):
        return _PlayerPython.mapCellGPtrToFloat_has_key(self, key)

    def keys(self):
        return _PlayerPython.mapCellGPtrToFloat_keys(self)

    def values(self):
        return _PlayerPython.mapCellGPtrToFloat_values(self)

    def items(self):
        return _PlayerPython.mapCellGPtrToFloat_items(self)

    def __contains__(self, key):
        return _PlayerPython.mapCellGPtrToFloat___contains__(self, key)

    def key_iterator(self):
        return _PlayerPython.mapCellGPtrToFloat_key_iterator(self)

    def value_iterator(self):
        return _PlayerPython.mapCellGPtrToFloat_value_iterator(self)

    def __setitem__(self, *args):
        return _PlayerPython.mapCellGPtrToFloat___setitem__(self, *args)

    def asdict(self):
        return _PlayerPython.mapCellGPtrToFloat_asdict(self)

    def __init__(self, *args):
        _PlayerPython.mapCellGPtrToFloat_swiginit(self, _PlayerPython.new_mapCellGPtrToFloat(*args))

    def empty(self):
        return _PlayerPython.mapCellGPtrToFloat_empty(self)

    def size(self):
        return _PlayerPython.mapCellGPtrToFloat_size(self)

    def swap(self, v):
        return _PlayerPython.mapCellGPtrToFloat_swap(self, v)

    def begin(self):
        return _PlayerPython.mapCellGPtrToFloat_begin(self)

    def end(self):
        return _PlayerPython.mapCellGPtrToFloat_end(self)

    def rbegin(self):
        return _PlayerPython.mapCellGPtrToFloat_rbegin(self)

    def rend(self):
        return _PlayerPython.mapCellGPtrToFloat_rend(self)

    def clear(self):
        return _PlayerPython.mapCellGPtrToFloat_clear(self)

    def get_allocator(self):
        return _PlayerPython.mapCellGPtrToFloat_get_allocator(self)

    def count(self, x):
        return _PlayerPython.mapCellGPtrToFloat_count(self, x)

    def erase(self, *args):
        return _PlayerPython.mapCellGPtrToFloat_erase(self, *args)

    def find(self, x):
        return _PlayerPython.mapCellGPtrToFloat_find(self, x)

    def lower_bound(self, x):
        return _PlayerPython.mapCellGPtrToFloat_lower_bound(self, x)

    def upper_bound(self, x):
        return _PlayerPython.mapCellGPtrToFloat_upper_bound(self, x)
    __swig_destroy__ = _PlayerPython.delete_mapCellGPtrToFloat

# Register mapCellGPtrToFloat in _PlayerPython:
_PlayerPython.mapCellGPtrToFloat_swigregister(mapCellGPtrToFloat)
class Coodrinates3DFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PlayerPython.Coodrinates3DFloat_swiginit(self, _PlayerPython.new_Coodrinates3DFloat(*args))

    def X(self):
        return _PlayerPython.Coodrinates3DFloat_X(self)

    def Y(self):
        return _PlayerPython.Coodrinates3DFloat_Y(self)

    def Z(self):
        return _PlayerPython.Coodrinates3DFloat_Z(self)

    def XRef(self):
        return _PlayerPython.Coodrinates3DFloat_XRef(self)

    def YRef(self):
        return _PlayerPython.Coodrinates3DFloat_YRef(self)

    def ZRef(self):
        return _PlayerPython.Coodrinates3DFloat_ZRef(self)

    def __isub__(self, a):
        return _PlayerPython.Coodrinates3DFloat___isub__(self, a)

    def __iadd__(self, a):
        return _PlayerPython.Coodrinates3DFloat___iadd__(self, a)
    x = property(_PlayerPython.Coodrinates3DFloat_x_get, _PlayerPython.Coodrinates3DFloat_x_set)
    y = property(_PlayerPython.Coodrinates3DFloat_y_get, _PlayerPython.Coodrinates3DFloat_y_set)
    z = property(_PlayerPython.Coodrinates3DFloat_z_get, _PlayerPython.Coodrinates3DFloat_z_set)
    __swig_destroy__ = _PlayerPython.delete_Coodrinates3DFloat

# Register Coodrinates3DFloat in _PlayerPython:
_PlayerPython.Coodrinates3DFloat_swigregister(Coodrinates3DFloat)
class mapCellGPtrToCoordinates3DFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___bool__(self)

    def __len__(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___getitem__(self, key)

    def __delitem__(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___delitem__(self, key)

    def has_key(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_has_key(self, key)

    def keys(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_keys(self)

    def values(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_values(self)

    def items(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_items(self)

    def __contains__(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___contains__(self, key)

    def key_iterator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_key_iterator(self)

    def value_iterator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_value_iterator(self)

    def __setitem__(self, *args):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___setitem__(self, *args)

    def asdict(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_asdict(self)

    def __init__(self, *args):
        _PlayerPython.mapCellGPtrToCoordinates3DFloat_swiginit(self, _PlayerPython.new_mapCellGPtrToCoordinates3DFloat(*args))

    def empty(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_empty(self)

    def size(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_size(self)

    def swap(self, v):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_swap(self, v)

    def begin(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_begin(self)

    def end(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_end(self)

    def rbegin(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_rbegin(self)

    def rend(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_rend(self)

    def clear(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_clear(self)

    def get_allocator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_get_allocator(self)

    def count(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_count(self, x)

    def erase(self, *args):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_erase(self, *args)

    def find(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_find(self, x)

    def lower_bound(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_lower_bound(self, x)

    def upper_bound(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_upper_bound(self, x)
    __swig_destroy__ = _PlayerPython.delete_mapCellGPtrToCoordinates3DFloat

# Register mapCellGPtrToCoordinates3DFloat in _PlayerPython:
_PlayerPython.mapCellGPtrToCoordinates3DFloat_swigregister(mapCellGPtrToCoordinates3DFloat)
class vectorint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorint___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorint___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorint___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorint___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorint_pop(self)

    def append(self, x):
        return _PlayerPython.vectorint_append(self, x)

    def empty(self):
        return _PlayerPython.vectorint_empty(self)

    def size(self):
        return _PlayerPython.vectorint_size(self)

    def swap(self, v):
        return _PlayerPython.vectorint_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorint_begin(self)

    def end(self):
        return _PlayerPython.vectorint_end(self)

    def rbegin(self):
        return _PlayerPython.vectorint_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorint_rend(self)

    def clear(self):
        return _PlayerPython.vectorint_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorint_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorint_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorint_erase(self, *args)

    def __init__(self, *args):
        _PlayerPython.vectorint_swiginit(self, _PlayerPython.new_vectorint(*args))

    def push_back(self, x):
        return _PlayerPython.vectorint_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorint_front(self)

    def back(self):
        return _PlayerPython.vectorint_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorint_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorint_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorint_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorint_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorint_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorint

# Register vectorint in _PlayerPython:
_PlayerPython.vectorint_swigregister(vectorint)
class vectorlong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorlong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorlong___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorlong___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorlong___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorlong___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorlong___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorlong___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorlong___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorlong___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorlong___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorlong_pop(self)

    def append(self, x):
        return _PlayerPython.vectorlong_append(self, x)

    def empty(self):
        return _PlayerPython.vectorlong_empty(self)

    def size(self):
        return _PlayerPython.vectorlong_size(self)

    def swap(self, v):
        return _PlayerPython.vectorlong_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorlong_begin(self)

    def end(self):
        return _PlayerPython.vectorlong_end(self)

    def rbegin(self):
        return _PlayerPython.vectorlong_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorlong_rend(self)

    def clear(self):
        return _PlayerPython.vectorlong_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorlong_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorlong_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorlong_erase(self, *args)

    def __init__(self, *args):
        _PlayerPython.vectorlong_swiginit(self, _PlayerPython.new_vectorlong(*args))

    def push_back(self, x):
        return _PlayerPython.vectorlong_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorlong_front(self)

    def back(self):
        return _PlayerPython.vectorlong_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorlong_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorlong_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorlong_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorlong_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorlong_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorlong

# Register vectorlong in _PlayerPython:
_PlayerPython.vectorlong_swigregister(vectorlong)
class vectorfloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorfloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorfloat___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorfloat___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorfloat___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorfloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorfloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorfloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorfloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorfloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorfloat___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorfloat_pop(self)

    def append(self, x):
        return _PlayerPython.vectorfloat_append(self, x)

    def empty(self):
        return _PlayerPython.vectorfloat_empty(self)

    def size(self):
        return _PlayerPython.vectorfloat_size(self)

    def swap(self, v):
        return _PlayerPython.vectorfloat_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorfloat_begin(self)

    def end(self):
        return _PlayerPython.vectorfloat_end(self)

    def rbegin(self):
        return _PlayerPython.vectorfloat_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorfloat_rend(self)

    def clear(self):
        return _PlayerPython.vectorfloat_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorfloat_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorfloat_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorfloat_erase(self, *args)

    def __init__(self, *args):
        _PlayerPython.vectorfloat_swiginit(self, _PlayerPython.new_vectorfloat(*args))

    def push_back(self, x):
        return _PlayerPython.vectorfloat_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorfloat_front(self)

    def back(self):
        return _PlayerPython.vectorfloat_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorfloat_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorfloat_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorfloat_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorfloat_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorfloat_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorfloat

# Register vectorfloat in _PlayerPython:
_PlayerPython.vectorfloat_swigregister(vectorfloat)
class vectorstring(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorstring_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorstring___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorstring___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorstring___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorstring___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorstring___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorstring___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorstring___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorstring___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorstring___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorstring_pop(self)

    def append(self, x):
        return _PlayerPython.vectorstring_append(self, x)

    def empty(self):
        return _PlayerPython.vectorstring_empty(self)

    def size(self):
        return _PlayerPython.vectorstring_size(self)

    def swap(self, v):
        return _PlayerPython.vectorstring_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorstring_begin(self)

    def end(self):
        return _PlayerPython.vectorstring_end(self)

    def rbegin(self):
        return _PlayerPython.vectorstring_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorstring_rend(self)

    def clear(self):
        return _PlayerPython.vectorstring_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorstring_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorstring_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorstring_erase(self, *args)

    def __init__(self, *args):
        _PlayerPython.vectorstring_swiginit(self, _PlayerPython.new_vectorstring(*args))

    def push_back(self, x):
        return _PlayerPython.vectorstring_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorstring_front(self)

    def back(self):
        return _PlayerPython.vectorstring_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorstring_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorstring_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorstring_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorstring_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorstring_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorstring

# Register vectorstring in _PlayerPython:
_PlayerPython.vectorstring_swigregister(vectorstring)
class NdarrayAdapterDouble3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_PlayerPython.NdarrayAdapterDouble3_data_get, _PlayerPython.NdarrayAdapterDouble3_data_set)

    def setStrides(self, _strides):
        return _PlayerPython.NdarrayAdapterDouble3_setStrides(self, _strides)

    def setShape(self, _shape):
        return _PlayerPython.NdarrayAdapterDouble3_setShape(self, _shape)

    def setData(self, _data):
        return _PlayerPython.NdarrayAdapterDouble3_setData(self, _data)

    def __init__(self, *args):
        _PlayerPython.NdarrayAdapterDouble3_swiginit(self, _PlayerPython.new_NdarrayAdapterDouble3(*args))

    def getShape(self, axis):
        return _PlayerPython.NdarrayAdapterDouble3_getShape(self, axis)

    def clear(self):
        return _PlayerPython.NdarrayAdapterDouble3_clear(self)

    def initFromNumpy(self, _numpyArrayObj):
        return _PlayerPython.NdarrayAdapterDouble3_initFromNumpy(self, _numpyArrayObj)

    def getItem(self, _coord):
        return _PlayerPython.NdarrayAdapterDouble3_getItem(self, _coord)
    __swig_destroy__ = _PlayerPython.delete_NdarrayAdapterDouble3

# Register NdarrayAdapterDouble3 in _PlayerPython:
_PlayerPython.NdarrayAdapterDouble3_swigregister(NdarrayAdapterDouble3)
class NdarrayAdapterDouble4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_PlayerPython.NdarrayAdapterDouble4_data_get, _PlayerPython.NdarrayAdapterDouble4_data_set)

    def setStrides(self, _strides):
        return _PlayerPython.NdarrayAdapterDouble4_setStrides(self, _strides)

    def setShape(self, _shape):
        return _PlayerPython.NdarrayAdapterDouble4_setShape(self, _shape)

    def setData(self, _data):
        return _PlayerPython.NdarrayAdapterDouble4_setData(self, _data)

    def __init__(self, *args):
        _PlayerPython.NdarrayAdapterDouble4_swiginit(self, _PlayerPython.new_NdarrayAdapterDouble4(*args))

    def getShape(self, axis):
        return _PlayerPython.NdarrayAdapterDouble4_getShape(self, axis)

    def clear(self):
        return _PlayerPython.NdarrayAdapterDouble4_clear(self)

    def initFromNumpy(self, _numpyArrayObj):
        return _PlayerPython.NdarrayAdapterDouble4_initFromNumpy(self, _numpyArrayObj)

    def getItem(self, _coord):
        return _PlayerPython.NdarrayAdapterDouble4_getItem(self, _coord)
    __swig_destroy__ = _PlayerPython.delete_NdarrayAdapterDouble4

# Register NdarrayAdapterDouble4 in _PlayerPython:
_PlayerPython.NdarrayAdapterDouble4_swigregister(NdarrayAdapterDouble4)
class ScalarFieldCellLevel(mapCellGPtrToFloat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __setitem__(self, _cell, _val):
        return _PlayerPython.ScalarFieldCellLevel___setitem__(self, _cell, _val)

    def __getitem__(self, _cell):
        return _PlayerPython.ScalarFieldCellLevel___getitem__(self, _cell)

    def __init__(self):
        _PlayerPython.ScalarFieldCellLevel_swiginit(self, _PlayerPython.new_ScalarFieldCellLevel())
    __swig_destroy__ = _PlayerPython.delete_ScalarFieldCellLevel

# Register ScalarFieldCellLevel in _PlayerPython:
_PlayerPython.ScalarFieldCellLevel_swigregister(ScalarFieldCellLevel)
class VectorFieldCellLevel(mapCellGPtrToCoordinates3DFloat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __setitem__(self, _cell, _numpyArrayObj):
        return _PlayerPython.VectorFieldCellLevel___setitem__(self, _cell, _numpyArrayObj)

    def __getitem__(self, _cell):
        return _PlayerPython.VectorFieldCellLevel___getitem__(self, _cell)

    def __init__(self):
        _PlayerPython.VectorFieldCellLevel_swiginit(self, _PlayerPython.new_VectorFieldCellLevel())
    __swig_destroy__ = _PlayerPython.delete_VectorFieldCellLevel

# Register VectorFieldCellLevel in _PlayerPython:
_PlayerPython.VectorFieldCellLevel_swigregister(VectorFieldCellLevel)
class FieldStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PlayerPython.FieldStorage_swiginit(self, _PlayerPython.new_FieldStorage())
    __swig_destroy__ = _PlayerPython.delete_FieldStorage

    def setDim(self, _dim):
        return _PlayerPython.FieldStorage_setDim(self, _dim)

    def getDim(self):
        return _PlayerPython.FieldStorage_getDim(self)

    def allocateCellField(self, _dim):
        return _PlayerPython.FieldStorage_allocateCellField(self, _dim)

    def createFloatFieldPy(self, _dim, _fieldName):
        return _PlayerPython.FieldStorage_createFloatFieldPy(self, _dim, _fieldName)

    def clearScalarField(self, _dim, _fieldPtr):
        return _PlayerPython.FieldStorage_clearScalarField(self, _dim, _fieldPtr)

    def getScalarFieldNameVector(self):
        return _PlayerPython.FieldStorage_getScalarFieldNameVector(self)

    def getScalarFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getScalarFieldByName(self, _fieldName)

    def createVectorFieldPy(self, _dim, _fieldName):
        return _PlayerPython.FieldStorage_createVectorFieldPy(self, _dim, _fieldName)

    def clearVectorField(self, _dim, _fieldPtr):
        return _PlayerPython.FieldStorage_clearVectorField(self, _dim, _fieldPtr)

    def getVectorFieldNameVector(self):
        return _PlayerPython.FieldStorage_getVectorFieldNameVector(self)

    def getVectorFieldFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getVectorFieldFieldByName(self, _fieldName)

    def createVectorFieldCellLevelPy(self, _fieldName):
        return _PlayerPython.FieldStorage_createVectorFieldCellLevelPy(self, _fieldName)

    def clearVectorCellLevelField(self, _field):
        return _PlayerPython.FieldStorage_clearVectorCellLevelField(self, _field)

    def getVectorFieldCellLevelNameVector(self):
        return _PlayerPython.FieldStorage_getVectorFieldCellLevelNameVector(self)

    def getVectorFieldCellLevelFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getVectorFieldCellLevelFieldByName(self, _fieldName)

    def createScalarFieldCellLevelPy(self, _fieldName):
        return _PlayerPython.FieldStorage_createScalarFieldCellLevelPy(self, _fieldName)

    def clearScalarCellLevelField(self, _field):
        return _PlayerPython.FieldStorage_clearScalarCellLevelField(self, _field)

    def getScalarFieldCellLevelNameVector(self):
        return _PlayerPython.FieldStorage_getScalarFieldCellLevelNameVector(self)

    def getScalarFieldCellLevelFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getScalarFieldCellLevelFieldByName(self, _fieldName)

    def clearAllocatedFields(self):
        return _PlayerPython.FieldStorage_clearAllocatedFields(self)
    field3DGraphicsData = property(_PlayerPython.FieldStorage_field3DGraphicsData_get, _PlayerPython.FieldStorage_field3DGraphicsData_set)

# Register FieldStorage in _PlayerPython:
_PlayerPython.FieldStorage_swigregister(FieldStorage)
class FieldExtractorBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PlayerPython.FieldExtractorBase_swiginit(self, _PlayerPython.new_FieldExtractorBase())
    __swig_destroy__ = _PlayerPython.delete_FieldExtractorBase

    def pointOrder(self, _plane):
        return _PlayerPython.FieldExtractorBase_pointOrder(self, _plane)

    def dimOrder(self, _plane):
        return _PlayerPython.FieldExtractorBase_dimOrder(self, _plane)

    def permuted_order_to_xyz(self, _plane):
        return _PlayerPython.FieldExtractorBase_permuted_order_to_xyz(self, _plane)

    def HexCoordXY(self, x, y, z):
        return _PlayerPython.FieldExtractorBase_HexCoordXY(self, x, y, z)

    def fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos)

    def fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only=False):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only=False):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorBase_fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly)

    def fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only=False):
        return _PlayerPython.FieldExtractorBase_fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillCellFieldGlyphs3D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, _types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorBase_fillCellFieldGlyphs3D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, _types_invisibe_vec, extractOuterShellOnly)

    def fillCellFieldGlyphs2D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, plane, pos):
        return _PlayerPython.FieldExtractorBase_fillCellFieldGlyphs2D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, plane, pos)

    def fillConFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractorBase_fillConFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldCellLevelGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, _types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, _types_invisibe_vec, extractOuterShellOnly)

    def fillScalarFieldCellLevelGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillConFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorBase_fillConFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillLinksField2D(self, points_array_addr, lines_array_addr, plane, pos, margin=1):
        return _PlayerPython.FieldExtractorBase_fillLinksField2D(self, points_array_addr, lines_array_addr, plane, pos, margin)

    def fillLinksField3D(self, points_array_addr, lines_array_addr):
        return _PlayerPython.FieldExtractorBase_fillLinksField3D(self, points_array_addr, lines_array_addr)

    def type_indicator(self, type):
        return _PlayerPython.FieldExtractorBase_type_indicator(self, type)

    def type_value(self, type):
        return _PlayerPython.FieldExtractorBase_type_value(self, type)

    def centroid(self, point_list):
        return _PlayerPython.FieldExtractorBase_centroid(self, point_list)

    def setLatticeType(self, latticeType):
        return _PlayerPython.FieldExtractorBase_setLatticeType(self, latticeType)

# Register FieldExtractorBase in _PlayerPython:
_PlayerPython.FieldExtractorBase_swigregister(FieldExtractorBase)
class FieldExtractor(FieldExtractorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    potts = property(_PlayerPython.FieldExtractor_potts_get, _PlayerPython.FieldExtractor_potts_set)
    sim = property(_PlayerPython.FieldExtractor_sim_get, _PlayerPython.FieldExtractor_sim_set)

    def __init__(self):
        _PlayerPython.FieldExtractor_swiginit(self, _PlayerPython.new_FieldExtractor())
    __swig_destroy__ = _PlayerPython.delete_FieldExtractor

    def setFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldExtractor_setFieldStorage(self, _fsPtr)

    def getFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldExtractor_getFieldStorage(self, _fsPtr)

    def extractCellField(self):
        return _PlayerPython.FieldExtractor_extractCellField(self)

    def fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos)

    def fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only):
        return _PlayerPython.FieldExtractor_fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractor_fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly)

    def fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only):
        return _PlayerPython.FieldExtractor_fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillCellFieldGlyphs3D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractor_fillCellFieldGlyphs3D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillCellFieldGlyphs2D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, plane, pos):
        return _PlayerPython.FieldExtractor_fillCellFieldGlyphs2D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, plane, pos)

    def fillConFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractor_fillConFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldCellLevelGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractor_fillScalarFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillScalarFieldCellLevelGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillConFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractor_fillConFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillLinksField2D(self, points_array_addr, lines_array_addr, plane, pos, margin=1):
        return _PlayerPython.FieldExtractor_fillLinksField2D(self, points_array_addr, lines_array_addr, plane, pos, margin)

    def fillLinksField3D(self, points_array_addr, lines_array_addr):
        return _PlayerPython.FieldExtractor_fillLinksField3D(self, points_array_addr, lines_array_addr)

    def setVtkObj(self, _vtkObj):
        return _PlayerPython.FieldExtractor_setVtkObj(self, _vtkObj)

    def setVtkObjInt(self, _vtkObjAddr):
        return _PlayerPython.FieldExtractor_setVtkObjInt(self, _vtkObjAddr)

    def produceVtkIntArray(self):
        return _PlayerPython.FieldExtractor_produceVtkIntArray(self)

    def produceArray(self, _size):
        return _PlayerPython.FieldExtractor_produceArray(self, _size)

    def init(self, _sim):
        return _PlayerPython.FieldExtractor_init(self, _sim)

# Register FieldExtractor in _PlayerPython:
_PlayerPython.FieldExtractor_swigregister(FieldExtractor)
class FieldExtractorCML(FieldExtractorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PlayerPython.FieldExtractorCML_swiginit(self, _PlayerPython.new_FieldExtractorCML())
    __swig_destroy__ = _PlayerPython.delete_FieldExtractorCML

    def fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos)

    def fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillBorder2D(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorder2D(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorder2DHex(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorder2DHex(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly)

    def fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only):
        return _PlayerPython.FieldExtractorCML_fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec, type_indicator_only)

    def fillCellFieldGlyphs2D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, plane, pos):
        return _PlayerPython.FieldExtractorCML_fillCellFieldGlyphs2D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, plane, pos)

    def fillConFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractorCML_fillConFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillScalarFieldCellLevelGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelGlyphs2D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, plane, pos)

    def fillCellFieldGlyphs3D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorCML_fillCellFieldGlyphs3D(self, centroids_array_addr, vol_scaling_factors_array_addr, cell_type_array_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillConFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorCML_fillConFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillScalarFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillScalarFieldCellLevelGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelGlyphs3D(self, con_field_name, centroids_array_addr, vol_scaling_factors_array_addr, scalar_value_at_com_addr, types_invisibe_vec, extractOuterShellOnly)

    def fillLinksField2D(self, points_array_addr, lines_array_addr, plane, pos, margin=1):
        return _PlayerPython.FieldExtractorCML_fillLinksField2D(self, points_array_addr, lines_array_addr, plane, pos, margin)

    def fillLinksField3D(self, points_array_addr, lines_array_addr):
        return _PlayerPython.FieldExtractorCML_fillLinksField3D(self, points_array_addr, lines_array_addr)

    def readVtkStructuredPointsData(self, _structuredPointsReaderAddr):
        return _PlayerPython.FieldExtractorCML_readVtkStructuredPointsData(self, _structuredPointsReaderAddr)

    def setFieldDim(self, _dim):
        return _PlayerPython.FieldExtractorCML_setFieldDim(self, _dim)

    def getFieldDim(self):
        return _PlayerPython.FieldExtractorCML_getFieldDim(self)

    def setSimulationData(self, _structuredPointsAddr):
        return _PlayerPython.FieldExtractorCML_setSimulationData(self, _structuredPointsAddr)

    def pointIndex(self, _x, _y, _z):
        return _PlayerPython.FieldExtractorCML_pointIndex(self, _x, _y, _z)

    def indexPoint3D(self, pt):
        return _PlayerPython.FieldExtractorCML_indexPoint3D(self, pt)

# Register FieldExtractorCML in _PlayerPython:
_PlayerPython.FieldExtractorCML_swigregister(FieldExtractorCML)
class FieldWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    potts = property(_PlayerPython.FieldWriter_potts_get, _PlayerPython.FieldWriter_potts_set)
    sim = property(_PlayerPython.FieldWriter_sim_get, _PlayerPython.FieldWriter_sim_set)

    def __init__(self):
        _PlayerPython.FieldWriter_swiginit(self, _PlayerPython.new_FieldWriter())
    __swig_destroy__ = _PlayerPython.delete_FieldWriter

    def setFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldWriter_setFieldStorage(self, _fsPtr)

    def getFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldWriter_getFieldStorage(self, _fsPtr)

    def init(self, _sim):
        return _PlayerPython.FieldWriter_init(self, _sim)

    def setFileTypeToBinary(self, flag):
        return _PlayerPython.FieldWriter_setFileTypeToBinary(self, flag)

    def addCellFieldForOutput(self):
        return _PlayerPython.FieldWriter_addCellFieldForOutput(self)

    def addConFieldForOutput(self, _conFieldName):
        return _PlayerPython.FieldWriter_addConFieldForOutput(self, _conFieldName)

    def addScalarFieldForOutput(self, _scalarFieldName):
        return _PlayerPython.FieldWriter_addScalarFieldForOutput(self, _scalarFieldName)

    def addScalarFieldCellLevelForOutput(self, _scalarFieldCellLevelName):
        return _PlayerPython.FieldWriter_addScalarFieldCellLevelForOutput(self, _scalarFieldCellLevelName)

    def addVectorFieldForOutput(self, _vectorFieldName):
        return _PlayerPython.FieldWriter_addVectorFieldForOutput(self, _vectorFieldName)

    def addVectorFieldCellLevelForOutput(self, _vectorFieldCellLevelName):
        return _PlayerPython.FieldWriter_addVectorFieldCellLevelForOutput(self, _vectorFieldCellLevelName)

    def clear(self):
        return _PlayerPython.FieldWriter_clear(self)

    def writeFields(self, _fileName):
        return _PlayerPython.FieldWriter_writeFields(self, _fileName)

    def generatePIFFileFromVTKOutput(self, _vtkFileName, _pifFileName, _dimX, _dimY, _dimZ, typeIdTypeNameMap):
        return _PlayerPython.FieldWriter_generatePIFFileFromVTKOutput(self, _vtkFileName, _pifFileName, _dimX, _dimY, _dimZ, typeIdTypeNameMap)

    def generatePIFFileFromCurrentStateOfSimulation(self, _pifFileName):
        return _PlayerPython.FieldWriter_generatePIFFileFromCurrentStateOfSimulation(self, _pifFileName)

# Register FieldWriter in _PlayerPython:
_PlayerPython.FieldWriter_swigregister(FieldWriter)
FieldTypeCML_CellField = _PlayerPython.FieldTypeCML_CellField
FieldTypeCML_ConField = _PlayerPython.FieldTypeCML_ConField
FieldTypeCML_ScalarField = _PlayerPython.FieldTypeCML_ScalarField
FieldTypeCML_ScalarFieldCellLevel = _PlayerPython.FieldTypeCML_ScalarFieldCellLevel
FieldTypeCML_VectorField = _PlayerPython.FieldTypeCML_VectorField
FieldTypeCML_VectorFieldCellLevel = _PlayerPython.FieldTypeCML_VectorFieldCellLevel
FieldTypeCML_Links = _PlayerPython.FieldTypeCML_Links
FieldTypeCML_LinksInternal = _PlayerPython.FieldTypeCML_LinksInternal
FieldTypeCML_Anchors = _PlayerPython.FieldTypeCML_Anchors
class FieldWriterCML(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PlayerPython.FieldWriterCML_swiginit(self, _PlayerPython.new_FieldWriterCML())
    __swig_destroy__ = _PlayerPython.delete_FieldWriterCML

    def init(self, _sim):
        return _PlayerPython.FieldWriterCML_init(self, _sim)

    def clear(self):
        return _PlayerPython.FieldWriterCML_clear(self)

    def setFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldWriterCML_setFieldStorage(self, _fsPtr)

    def getFieldStorage(self):
        return _PlayerPython.FieldWriterCML_getFieldStorage(self)

    def numFields(self):
        return _PlayerPython.FieldWriterCML_numFields(self)

    def getFieldName(self, i):
        return _PlayerPython.FieldWriterCML_getFieldName(self, i)

    def getFieldType(self, i):
        return _PlayerPython.FieldWriterCML_getFieldType(self, i)

    def getArrayAddr(self, *args):
        return _PlayerPython.FieldWriterCML_getArrayAddr(self, *args)

    def getFieldDim(self):
        return _PlayerPython.FieldWriterCML_getFieldDim(self)

    def addCellFieldForOutput(self):
        return _PlayerPython.FieldWriterCML_addCellFieldForOutput(self)

    def addConFieldForOutput(self, _conFieldName):
        return _PlayerPython.FieldWriterCML_addConFieldForOutput(self, _conFieldName)

    def addScalarFieldForOutput(self, _scalarFieldName):
        return _PlayerPython.FieldWriterCML_addScalarFieldForOutput(self, _scalarFieldName)

    def addScalarFieldCellLevelForOutput(self, _scalarFieldCellLevelName):
        return _PlayerPython.FieldWriterCML_addScalarFieldCellLevelForOutput(self, _scalarFieldCellLevelName)

    def addVectorFieldForOutput(self, _vectorFieldName):
        return _PlayerPython.FieldWriterCML_addVectorFieldForOutput(self, _vectorFieldName)

    def addVectorFieldCellLevelForOutput(self, _vectorFieldCellLevelName):
        return _PlayerPython.FieldWriterCML_addVectorFieldCellLevelForOutput(self, _vectorFieldCellLevelName)

    def addFieldForOutput(self, _fieldName):
        return _PlayerPython.FieldWriterCML_addFieldForOutput(self, _fieldName)

# Register FieldWriterCML in _PlayerPython:
_PlayerPython.FieldWriterCML_swigregister(FieldWriterCML)
cvar = _PlayerPython.cvar
FieldWriterCML.CellTypeName = _PlayerPython.cvar.FieldWriterCML_CellTypeName
FieldWriterCML.CellIdName = _PlayerPython.cvar.FieldWriterCML_CellIdName
FieldWriterCML.ClusterIdName = _PlayerPython.cvar.FieldWriterCML_ClusterIdName
FieldWriterCML.LinksName = _PlayerPython.cvar.FieldWriterCML_LinksName
FieldWriterCML.LinksInternalName = _PlayerPython.cvar.FieldWriterCML_LinksInternalName
FieldWriterCML.AnchorsName = _PlayerPython.cvar.FieldWriterCML_AnchorsName

class FieldStreamerData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cellFieldNames = property(_PlayerPython.FieldStreamerData_cellFieldNames_get, _PlayerPython.FieldStreamerData_cellFieldNames_set)
    concFieldNames = property(_PlayerPython.FieldStreamerData_concFieldNames_get, _PlayerPython.FieldStreamerData_concFieldNames_set)
    scalarFieldNames = property(_PlayerPython.FieldStreamerData_scalarFieldNames_get, _PlayerPython.FieldStreamerData_scalarFieldNames_set)
    scalarFieldCellLevelNames = property(_PlayerPython.FieldStreamerData_scalarFieldCellLevelNames_get, _PlayerPython.FieldStreamerData_scalarFieldCellLevelNames_set)
    vectorFieldNames = property(_PlayerPython.FieldStreamerData_vectorFieldNames_get, _PlayerPython.FieldStreamerData_vectorFieldNames_set)
    vectorFieldCellLevelNames = property(_PlayerPython.FieldStreamerData_vectorFieldCellLevelNames_get, _PlayerPython.FieldStreamerData_vectorFieldCellLevelNames_set)
    linksNames = property(_PlayerPython.FieldStreamerData_linksNames_get, _PlayerPython.FieldStreamerData_linksNames_set)
    linksInternalNames = property(_PlayerPython.FieldStreamerData_linksInternalNames_get, _PlayerPython.FieldStreamerData_linksInternalNames_set)
    anchorsNames = property(_PlayerPython.FieldStreamerData_anchorsNames_get, _PlayerPython.FieldStreamerData_anchorsNames_set)
    fieldDim = property(_PlayerPython.FieldStreamerData_fieldDim_get, _PlayerPython.FieldStreamerData_fieldDim_set)
    data = property(_PlayerPython.FieldStreamerData_data_get, _PlayerPython.FieldStreamerData_data_set)

    def getFieldNames(self):
        return _PlayerPython.FieldStreamerData_getFieldNames(self)

    def __init__(self):
        _PlayerPython.FieldStreamerData_swiginit(self, _PlayerPython.new_FieldStreamerData())
    __swig_destroy__ = _PlayerPython.delete_FieldStreamerData

# Register FieldStreamerData in _PlayerPython:
_PlayerPython.FieldStreamerData_swigregister(FieldStreamerData)
class FieldStreamer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PlayerPython.FieldStreamer_swiginit(self, _PlayerPython.new_FieldStreamer(*args))
    __swig_destroy__ = _PlayerPython.delete_FieldStreamer

    def loadData(self, _data):
        return _PlayerPython.FieldStreamer_loadData(self, _data)

    @staticmethod
    def dump(fieldWriter):
        return _PlayerPython.FieldStreamer_dump(fieldWriter)

    def getPointsAddr(self):
        return _PlayerPython.FieldStreamer_getPointsAddr(self)

    def getFieldDim(self):
        return _PlayerPython.FieldStreamer_getFieldDim(self)

# Register FieldStreamer in _PlayerPython:
_PlayerPython.FieldStreamer_swigregister(FieldStreamer)

def setSwigPtr(_ptr):
    return _PlayerPython.setSwigPtr(_ptr)

def add(a, b, result):
    return _PlayerPython.add(a, b, result)

def fillScalarValue(_numpyArrayObj, _x, _y, _z, _value):
    return _PlayerPython.fillScalarValue(_numpyArrayObj, _x, _y, _z, _value)

def clearScalarField(_dim, _numpyArrayObj):
    return _PlayerPython.clearScalarField(_dim, _numpyArrayObj)

def clearScalarValueCellLevel(_field):
    return _PlayerPython.clearScalarValueCellLevel(_field)

def fillScalarValueCellLevel(_field, _cell, _value):
    return _PlayerPython.fillScalarValueCellLevel(_field, _cell, _value)

def insertVectorIntoVectorField(_numpyArrayObj, _xPos, _yPos, _zPos, _x, _y, _z):
    return _PlayerPython.insertVectorIntoVectorField(_numpyArrayObj, _xPos, _yPos, _zPos, _x, _y, _z)

def insertVectorIntoVectorCellLevelField(_field, _cell, _x, _y, _z):
    return _PlayerPython.insertVectorIntoVectorCellLevelField(_field, _cell, _x, _y, _z)

def clearVectorCellLevelField(_field):
    return _PlayerPython.clearVectorCellLevelField(_field)

def clearVectorField(_dim, _numpyArrayObj):
    return _PlayerPython.clearVectorField(_dim, _numpyArrayObj)

def findVectorInVectorCellLEvelField(_field, _cell):
    return _PlayerPython.findVectorInVectorCellLEvelField(_field, _cell)

